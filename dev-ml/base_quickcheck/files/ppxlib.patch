From bd35314949466a1ca0a171b494691e19370428bd Mon Sep 17 00:00:00 2001
From: Sonja Heinze <sonjaleaheinze@gmail.com>
Date: Thu, 28 Jan 2021 18:12:33 +0100
Subject: [PATCH] Achieve compatibility with ppxlib 0.22.0

In ppxlib 0.22.0, the AST gets bumped to ocaml 4.12. This commit adapts
to the compiler changes from 4.11 to 4.12: mainly, the introduction of
injectivity to type declarations.

Signed-off-by: Sonja Heinze <sonjaleaheinze@gmail.com>
---
 base_quickcheck.opam                               |  2 +-
 ppx_quickcheck/expander/environment.ml             | 11 ++++++-----
 ppx_quickcheck/expander/environment.mli            |  4 ++--
 ppx_quickcheck/expander/ppx_quickcheck_expander.ml |  9 +++++----
 4 files changed, 14 insertions(+), 12 deletions(-)

diff --git a/base_quickcheck.opam b/base_quickcheck.opam
index b354f59..1ebaa78 100644
--- a/base_quickcheck.opam
+++ b/base_quickcheck.opam
@@ -20,7 +20,7 @@ depends: [
   "ppx_sexp_value"    {>= "v0.14" & < "v0.15"}
   "splittable_random" {>= "v0.14" & < "v0.15"}
   "dune"              {>= "2.0.0"}
-  "ppxlib"            {>= "0.11.0"}
+  "ppxlib"            {>= "0.22.0"}
 ]
 synopsis: "Randomized testing framework, designed for compatibility with Base"
 description: "
diff --git a/ppx_quickcheck/expander/environment.ml b/ppx_quickcheck/expander/environment.ml
index 336b96e..1cc913a 100644
--- a/ppx_quickcheck/expander/environment.ml
+++ b/ppx_quickcheck/expander/environment.ml
@@ -46,16 +46,17 @@ let variance_error ~loc ~tyvar ~actual ~expect =
 
 let create_with_variance ~loc ~covariant ~contravariant param_list =
   let pat_list, by_variance_list =
-    List.map param_list ~f:(fun ((core_type, variance) as param) ->
+    List.map param_list ~f:(fun ((core_type, (variance, injectivity)) as param) ->
       let loc = core_type.ptyp_loc in
       let name = get_type_param_name param in
-      match variance with
-      | Invariant | Covariant ->
+      match (variance, injectivity) with
+      | ((NoVariance | Covariant), NoInjectivity) ->
         let pat, expr = gensym covariant loc in
         pat, `Covariant (name.txt, expr)
-      | Contravariant ->
+      | (Contravariant, NoInjectivity) ->
         let pat, expr = gensym contravariant loc in
-        pat, `Contravariant (name.txt, expr))
+        pat, `Contravariant (name.txt, expr)
+      | (_, Injective) -> Location.raise_errorf ~loc "Injective type parameters aren't supported.")
     |> List.unzip
   in
   let covariant_t =
diff --git a/ppx_quickcheck/expander/environment.mli b/ppx_quickcheck/expander/environment.mli
index 83df9bc..1940919 100644
--- a/ppx_quickcheck/expander/environment.mli
+++ b/ppx_quickcheck/expander/environment.mli
@@ -10,7 +10,7 @@ val lookup : t -> loc:location -> tyvar:string -> expression
 val create
   :  loc:location
   -> prefix:string
-  -> (core_type * variance) list
+  -> (core_type * (variance * injectivity)) list
   -> pattern list * t
 
 (** For generators, we want contravariant type parameters to map to observer names. For
@@ -19,5 +19,5 @@ val create_with_variance
   :  loc:location
   -> covariant:string
   -> contravariant:string
-  -> (core_type * variance) list
+  -> (core_type * (variance * injectivity)) list
   -> pattern list * [ `Covariant of t ] * [ `Contravariant of t ]
diff --git a/ppx_quickcheck/expander/ppx_quickcheck_expander.ml b/ppx_quickcheck/expander/ppx_quickcheck_expander.ml
index 57480e4..c19eef7 100644
--- a/ppx_quickcheck/expander/ppx_quickcheck_expander.ml
+++ b/ppx_quickcheck/expander/ppx_quickcheck_expander.ml
@@ -347,11 +347,12 @@ let intf type_decl ~f ~covar ~contravar =
     List.fold_right
       type_decl.ptype_params
       ~init:result
-      ~f:(fun (core_type, variance) result ->
+      ~f:(fun (core_type, (variance, injectivity)) result ->
         let id =
-          match variance with
-          | Invariant | Covariant -> covar
-          | Contravariant -> contravar
+          match (variance, injectivity) with
+          | ((NoVariance | Covariant), NoInjectivity) -> covar
+          | (Contravariant, NoInjectivity) -> contravar
+          | (_, Injective) -> Location.raise_errorf ~loc "Injective type parameters aren't supported."
         in
         let arg = ptyp_constr ~loc { loc; txt = id } [ core_type ] in
         [%type: [%t arg] -> [%t result]])
