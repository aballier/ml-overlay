Index: camlimages-5.0.5/config/xConfigurator.ml
===================================================================
--- camlimages-5.0.5.orig/config/xConfigurator.ml
+++ camlimages-5.0.5/config/xConfigurator.ml
@@ -1,5 +1,3 @@
-open Base
-
 external (&) : ('a -> 'b) -> 'a -> 'b = "%apply"
 (** Haskell's [($)]. *)
 
@@ -8,7 +6,7 @@ let (!%) fmt = Printf.sprintf fmt
 module Configurator = struct
   include Configurator.V1
 
-  let ( ^/ ) = Caml.Filename.concat
+  let ( ^/ ) = Filename.concat
 
   let path_sep =
     if Sys.win32 then
@@ -19,15 +17,15 @@ module Configurator = struct
   let exe = if Sys.win32 then ".exe" else ""
 
   let get_path () =
-    match Caml.Sys.getenv "PATH" with
+    match Sys.getenv "PATH" with
     | exception Not_found -> []
-    | s -> String.split ~on:path_sep s
+    | s -> Base.String.split ~on:path_sep s
 
   let find_file_in bases dirs =
-    List.find_map dirs ~f:(fun dir ->
-      List.find_map bases ~f:(fun base ->
+    Base.List.find_map dirs ~f:(fun dir ->
+      Base.List.find_map bases ~f:(fun base ->
         let path = dir ^/ base in
-        if Caml.Sys.file_exists path then Some path else None))
+        if Sys.file_exists path then Some path else None))
 
   let find_program prog =
     let prog = prog ^ exe in
@@ -45,13 +43,13 @@ module Configurator = struct
     | s ->
         (* findlib 1.7.3 installs META file for graphics
            even when there is no graphics library installed. *)
-        let dest = Caml.Filename.temp_file "test" ".cma" in
-        let res = match Caml.Sys.command & !% "ocamlfind ocamlc -package %s -o %s -linkpkg" n dest with
+        let dest = Filename.temp_file "test" ".cma" in
+        let res = match Sys.command & !% "ocamlfind ocamlc -package %s -o %s -linkpkg" n dest with
           | 0 -> Some s
           | _ -> None
           | exception _ -> None
         in
-        (try Caml.Sys.remove dest with _ -> ());
+        (try Sys.remove dest with _ -> ());
         res
     | exception Findlib.No_such_package _ -> None
 
@@ -62,7 +60,7 @@ module Configurator = struct
         ; cflags : string list
         }
 
-    let options_of {libs; cflags} = String.concat ~sep:" " (libs @ cflags)
+    let options_of {libs; cflags} = Base.String.concat ~sep:" " (libs @ cflags)
 
     let merge c1 c2 =
       { libs = c1.libs @ c2.libs; cflags = c1.cflags @ c2.cflags }
@@ -83,14 +81,14 @@ type item =
 module Make(A : sig val name : string end) = struct
   let t = create A.name
 
-  let log fmt = Caml.Format.eprintf fmt
+  let log fmt = Format.eprintf fmt
 
   module Package_conf = Package_conf
   open Package_conf
 
   let extract_package_conf xs =
-    Caml.List.fold_left merge empty
-      (Caml.List.map (fun item -> match item with
+    List.fold_left merge empty
+      (List.map (fun item -> match item with
            | Library (Some pkc) -> pkc
            | _ -> empty) xs)
 
@@ -165,12 +163,12 @@ module Make(A : sig val name : string en
             Some conf
 
   let by_cc ~c_flags ~link_flags ~headers ~functions:fnames () =
-    log "Checking library %s by using C compiler... " (String.concat ~sep:" " link_flags);
+    log "Checking library %s by using C compiler... " (Base.String.concat ~sep:" " link_flags);
     let headers = "stdio.h" :: headers in
-    let includes = Caml.List.map (!% "#include <%s>") headers in
-    let fcalls = Caml.List.map (!% "  ( (void(*)()) (%s) )();") fnames in
+    let includes = List.map (!% "#include <%s>") headers in
+    let fcalls = List.map (!% "  ( (void(*)()) (%s) )();") fnames in
     let code =
-      String.concat ~sep:"\n"
+      Base.String.concat ~sep:"\n"
       & includes
         @ [ "int main(int argc, char **argv) {" ]
         @ fcalls
@@ -193,7 +191,7 @@ module Make(A : sig val name : string en
     end
 
   let find_library tests =
-    Library (List.find_map tests (fun t -> t ()))
+    Library (Base.List.find_map tests (fun t -> t ()))
 
   let find_file base ~dirs =
     log "Checking file %s..." base;
@@ -228,13 +226,13 @@ module Make(A : sig val name : string en
     [ bool k o;  has k o ] @
     match o with
     | Some { libs; cflags } ->
-        [ !% "CFLAGS_%s" k, String (String.concat ~sep:" " cflags )
-        ; !% "LDFLAGS_%s" k, String (String.concat ~sep:" " libs )
+        [ !% "CFLAGS_%s" k, String (Base.String.concat ~sep:" " cflags )
+        ; !% "LDFLAGS_%s" k, String (Base.String.concat ~sep:" " libs )
         ]
     | None -> []
 
   let make_header ~fname kitems =
-    let kvs = List.concat_map kitems ~f:(fun (k,item) -> match item with
+    let kvs = Base.List.concat_map kitems ~f:(fun (k,item) -> match item with
         | Pkg_config o -> [ bool k o; has k o ]
         | File o
         | Program o
