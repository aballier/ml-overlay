Index: ppx_tools-6.4/src/ast_mapper_class.ml
===================================================================
--- ppx_tools-6.4.orig/src/ast_mapper_class.ml
+++ ppx_tools-6.4/src/ast_mapper_class.ml
@@ -111,8 +111,8 @@ module T = struct
       ~attrs:(sub # attributes ptyext_attributes)
 
   let map_extension_constructor_kind sub = function
-      Pext_decl(ctl, cto) ->
-        Pext_decl(sub # constructor_arguments ctl, map_opt (sub # typ) cto)
+      Pext_decl(li, ctl, cto) ->
+        Pext_decl(li, sub # constructor_arguments ctl, map_opt (sub # typ) cto)
     | Pext_rebind li ->
         Pext_rebind (map_loc sub li)
 
@@ -565,10 +565,11 @@ class mapper =
       | Pcstr_tuple (tys) -> Pcstr_tuple (List.map (this # typ) tys)
       | Pcstr_record (ls) -> Pcstr_record (List.map (this # label_declaration) ls)
 
-    method constructor_declaration {pcd_name; pcd_args; pcd_res; pcd_loc;
+    method constructor_declaration {pcd_name; pcd_vars; pcd_args; pcd_res; pcd_loc;
                                     pcd_attributes} =
       Type.constructor
         (map_loc this pcd_name)
+	~vars:(List.map (map_loc this) pcd_vars)
         ~args:(this # constructor_arguments pcd_args)
         ?res:(map_opt (this # typ) pcd_res)
         ~loc:(this # location pcd_loc)
Index: ppx_tools-6.4/src/genlifter.ml
===================================================================
--- ppx_tools-6.4.orig/src/genlifter.ml
+++ ppx_tools-6.4/src/genlifter.ml
@@ -68,7 +68,7 @@ module Main : sig end = struct
       in
       Hashtbl.add printed ty ();
       let params = List.mapi (fun i _ -> mknoloc (Printf.sprintf "f%i" i)) td.type_params in
-      let env = List.map2 (fun s t -> t.id, evar s.txt) params td.type_params in
+      let env = List.map2 (fun s t -> (Transient_expr.coerce t).id, evar s.txt) params td.type_params in
       let make_result_t tyargs = Typ.(arrow Asttypes.Nolabel (constr (lid ty) tyargs) (var "res")) in
       let make_t tyargs =
         List.fold_right
@@ -139,7 +139,8 @@ module Main : sig end = struct
     in
     List.split (List.mapi arg tl)
 
-  and tyexpr env ty x =
+  and tyexpr env transy x =
+    let ty = Transient_expr.coerce transy in
     match ty.desc with
     | Tvar _ ->
         (match List.assoc ty.id env with
@@ -174,7 +175,7 @@ module Main : sig end = struct
         use_arrows := true;
         selfcall "arrow" [x]
     | _ ->
-        Format.eprintf "** Cannot deal with type %a@." Printtyp.type_expr ty;
+        Format.eprintf "** Cannot deal with type %a@." Printtyp.type_expr transy;
         exit 2
 
   and tyexpr_fun env ty =
