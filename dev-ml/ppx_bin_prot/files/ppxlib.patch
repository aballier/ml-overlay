From 197355d75437ce8233ce4464602539cdef9a28f9 Mon Sep 17 00:00:00 2001
From: public-release <as-public-release@janestreet.com>
Date: Thu, 26 Sep 2024 19:08:47 +0100
Subject: [PATCH] v0.18~preview.129.42+498

---
 shape/src/bin_shape_expand.ml |   3 +-
 src/ppx_bin_prot.ml           |  99 +++++----
 test/deriving_inline.ml       | 386 +++++++++++++++++++++++++++++++++-
 4 files changed, 443 insertions(+), 47 deletions(-)

diff --git a/shape/src/bin_shape_expand.ml b/shape/src/bin_shape_expand.ml
index 03d11f7..f5f923d 100644
--- a/shape/src/bin_shape_expand.ml
+++ b/shape/src/bin_shape_expand.ml
@@ -138,7 +138,7 @@ let of_type
           [%e traverse t]]
   and traverse typ =
     let loc = { typ.ptyp_loc with loc_ghost = true } in
-    match typ.ptyp_desc with
+    match Ppxlib_jane.Shim.Core_type_desc.of_parsetree typ.ptyp_desc with
     | Ptyp_constr (lid, typs) ->
       let args = List.map typs ~f:traverse in
       (match
@@ -163,6 +163,7 @@ let of_type
     | Ptyp_variant (_, _, Some _)
     | Ptyp_any
     | Ptyp_arrow _
+    | Ptyp_unboxed_tuple _
     | Ptyp_object _
     | Ptyp_class _
     | Ptyp_alias _
diff --git a/src/ppx_bin_prot.ml b/src/ppx_bin_prot.ml
index cfdaf5b..2fbd668 100644
--- a/src/ppx_bin_prot.ml
+++ b/src/ppx_bin_prot.ml
@@ -9,34 +9,43 @@ open Ast_builder.Default
    +-----------------------------------------------------------------+ *)
 
 module Locality_mode = struct
-  type t = Ppxlib_jane.Ast_builder.Default.mode option
+  type t = Local
 end
 
-(* Bring the name [Local] into scope *)
-type mode = Ppxlib_jane.Ast_builder.Default.mode = Local
+open Locality_mode
 
 module Locality_modality = struct
-  type t = Ppxlib_jane.Ast_builder.Default.modality option
+  type t = Global
+
+  let of_modalities (modalities : Ppxlib_jane.modality list) =
+    List.find_map modalities ~f:(function
+      | Modality "global" -> Some Global
+      | Modality _ -> None)
+  ;;
 
   let of_ld ld =
-    let modality, _ = Ppxlib_jane.Ast_builder.Default.get_label_declaration_modality ld in
-    match modality, ld.pld_mutable with
-    | Some _, _ -> modality
-    | None, Mutable -> Some Global
-    | None, Immutable -> None
+    let modalities, _ =
+      Ppxlib_jane.Ast_builder.Default.get_label_declaration_modalities ld
+    in
+    match of_modalities modalities with
+    | Some _ as some -> some
+    | None ->
+      (match ld.pld_mutable with
+       | Mutable -> Some Global
+       | Immutable -> None)
   ;;
 
   let of_cstr_tuple_field core_type =
-    let modality, _ =
-      Ppxlib_jane.Ast_builder.Default.get_tuple_field_modality core_type
+    let modalities, _ =
+      Ppxlib_jane.Ast_builder.Default.get_tuple_field_modalities core_type
     in
-    modality
+    of_modalities modalities
   ;;
 
   let of_tuple_field _ = None
 
-  let apply modality locality =
-    match (modality : t) with
+  let apply modality (locality : Locality_mode.t option) =
+    match (modality : t option) with
     | None -> locality
     | Some Global -> None
   ;;
@@ -68,9 +77,17 @@ let bin_write_name = value_name ~prefix:"bin_write_"
 let bin_writer_name = value_name ~prefix:"bin_writer_"
 let bin_shape_name = value_name ~prefix:"bin_shape_"
 let bin_name = value_name ~prefix:"bin_"
-let bin_size_arg = value_name ~prefix:"_size_of_"
-let bin_write_arg = value_name ~prefix:"_write_"
-let conv_name = value_name ~prefix:"_of__"
+
+(* These are used for identifiers of function arguments that correspond to a type
+   argument. Because they are scoped to the function, the name is independent of locality,
+   and it is much more convenient to consistently ignore it. *)
+let locality_agnostic f = f ~locality:None
+let bin_size_arg = value_name ~prefix:"_size_of_" |> locality_agnostic
+let bin_write_arg = value_name ~prefix:"_write_" |> locality_agnostic
+let bin_writer_arg = value_name ~prefix:"bin_writer_" |> locality_agnostic
+let bin_reader_arg = value_name ~prefix:"bin_reader_" |> locality_agnostic
+let bin_arg = value_name ~prefix:"bin_" |> locality_agnostic
+let conv_name = value_name ~prefix:"_of__" |> locality_agnostic
 
 module Typ = struct
   type t =
@@ -239,10 +256,10 @@ let td_is_nil td =
 
 type var = string Located.t
 
-let vars_of_params ~f ~locality td =
+let vars_of_params ~f td =
   List.map td.ptype_params ~f:(fun tp ->
     let name = get_type_param_name tp in
-    { name with txt = f ~locality name.txt })
+    { name with txt = f name.txt })
 ;;
 
 let map_vars vars ~f = List.map vars ~f:(fun (v : var) -> f ~loc:v.loc v.txt)
@@ -303,7 +320,7 @@ let make_value
   ~body
   td
   =
-  let vars = vars_of_params td ~f:make_arg_name ~locality in
+  let vars = vars_of_params td ~f:make_arg_name in
   let pat = pvar ~loc (make_value_name ~locality td.ptype_name.txt) in
   let expr = eabstract ~loc (patts_of_vars vars) body in
   let constraint_ =
@@ -455,7 +472,7 @@ module Generate_bin_size = struct
        | Ptyp_constr (id, args) ->
          `Fun (bin_size_appl_fun full_type_name loc id args ~locality)
        | Ptyp_tuple l -> bin_size_tuple full_type_name loc l ~locality
-       | Ptyp_var parm -> `Fun (evar ~loc (bin_size_arg parm ~locality))
+       | Ptyp_var parm -> `Fun (evar ~loc (bin_size_arg parm))
        | Ptyp_arrow _ ->
          Location.raise_errorf
            ~loc
@@ -483,10 +500,10 @@ module Generate_bin_size = struct
     Full_type_name.t
     -> Location.t
     -> ('a -> core_type)
-    -> ('a -> Locality_modality.t)
+    -> ('a -> Locality_modality.t option)
     -> (Location.t -> string -> 'a -> 'b)
     -> 'a list
-    -> locality:Locality_mode.t
+    -> locality:Locality_mode.t option
     -> 'b list * expression
     =
     fun full_type_name loc get_tp get_locality_modality mk_patt tps ~locality ->
@@ -524,10 +541,10 @@ module Generate_bin_size = struct
     -> Location.t
     -> ('b list -> pattern)
     -> ('a -> core_type)
-    -> ('a -> Locality_modality.t)
+    -> ('a -> Locality_modality.t option)
     -> (Location.t -> string -> 'a -> 'b)
     -> 'a list
-    -> locality:Locality_mode.t
+    -> locality:Locality_mode.t option
     -> _
     =
     fun full_type_name loc cnv_patts get_tp get_locality_modality mk_patt tp ~locality ->
@@ -638,7 +655,7 @@ module Generate_bin_size = struct
         let full_type_name = Full_type_name.get_exn ~loc full_type_name in
         value_binding
           ~loc
-          ~pat:(pvar ~loc (bin_size_arg parm.txt ~locality))
+          ~pat:(pvar ~loc (bin_size_arg parm.txt))
           ~expr:
             [%expr
               fun _v ->
@@ -846,7 +863,7 @@ module Generate_bin_write = struct
        | Ptyp_constr (id, args) ->
          `Fun (bin_write_appl_fun full_type_name loc id args ~locality)
        | Ptyp_tuple l -> bin_write_tuple full_type_name loc l ~locality
-       | Ptyp_var parm -> `Fun (evar ~loc (bin_write_arg parm ~locality))
+       | Ptyp_var parm -> `Fun (evar ~loc (bin_write_arg parm))
        | Ptyp_arrow _ ->
          Location.raise_errorf
            ~loc
@@ -875,10 +892,10 @@ module Generate_bin_write = struct
     Full_type_name.t
     -> Location.t
     -> ('a -> core_type)
-    -> ('a -> Locality_modality.t)
+    -> ('a -> Locality_modality.t option)
     -> (Location.t -> string -> 'a -> 'b)
     -> 'a list
-    -> locality:Locality_mode.t
+    -> locality:Locality_mode.t option
     -> 'b list * expression
     =
     fun full_type_name loc get_tp get_locality_modality mk_patt tp ~locality ->
@@ -913,10 +930,10 @@ module Generate_bin_write = struct
     -> Location.t
     -> ('b list -> pattern)
     -> ('a -> core_type)
-    -> ('a -> Locality_modality.t)
+    -> ('a -> Locality_modality.t option)
     -> (Location.t -> string -> 'a -> 'b)
     -> 'a list
-    -> locality:Locality_mode.t
+    -> locality:Locality_mode.t option
     -> _
     =
     fun full_type_name loc cnv_patts get_tp get_locality_modality mk_patt tp ~locality ->
@@ -1025,7 +1042,7 @@ module Generate_bin_write = struct
         let full_type_name = Full_type_name.get_exn ~loc full_type_name in
         value_binding
           ~loc
-          ~pat:(pvar ~loc (bin_write_arg parm.txt ~locality))
+          ~pat:(pvar ~loc (bin_write_arg parm.txt))
           ~expr:
             [%expr
               fun _buf ~pos:_ _v ->
@@ -1183,7 +1200,7 @@ module Generate_bin_write = struct
 
   let bin_writer_td ~loc td ~locality =
     let body =
-      let vars = vars_of_params td ~f:bin_writer_name ~locality in
+      let vars = vars_of_params td ~f:bin_writer_arg in
       writer_type_class_record
         ~loc
         ~size:
@@ -1203,7 +1220,7 @@ module Generate_bin_write = struct
       ~type_constr:(Typ.create "Bin_prot.Type_class.writer")
       ~hide_params:true
       ~make_value_name:bin_writer_name
-      ~make_arg_name:bin_writer_name
+      ~make_arg_name:bin_writer_arg
       ~body
       td
   ;;
@@ -1336,7 +1353,7 @@ module Generate_bin_read = struct
          let expr = bin_read_path_fun id.loc id args_expr in
          `Closed expr
        | Ptyp_tuple tp -> bin_read_tuple full_type_name loc tp
-       | Ptyp_var parm -> `Closed (evar ~loc (conv_name parm ~locality))
+       | Ptyp_var parm -> `Closed (evar ~loc (conv_name parm))
        | Ptyp_arrow _ ->
          Location.raise_errorf ~loc "bin_read_arrow: cannot convert functions"
        | Ptyp_variant ([], _, _) -> bin_read_nil_variant full_type_name loc
@@ -1470,7 +1487,7 @@ module Generate_bin_read = struct
         let full_type_name = Full_type_name.get_exn ~loc full_type_name in
         value_binding
           ~loc
-          ~pat:(pvar ~loc (conv_name parm.txt ~locality))
+          ~pat:(pvar ~loc (conv_name parm.txt))
           ~expr:
             [%expr
               fun _buf ~pos_ref ->
@@ -1769,7 +1786,7 @@ module Generate_bin_read = struct
         )
     in
     let read_binding, vtag_read_binding =
-      let args = vars_of_params td ~f:conv_name ~locality in
+      let args = vars_of_params td ~f:conv_name in
       read_and_vtag_read_bindings
         ~loc
         ~read_name
@@ -1781,7 +1798,7 @@ module Generate_bin_read = struct
         ~args
         ~oc_body
     in
-    let vars = vars_of_params td ~f:bin_reader_name ~locality in
+    let vars = vars_of_params td ~f:bin_reader_arg in
     let read =
       let call = project_vars (evar ~loc read_name) vars ~field_name:"read" in
       alias_or_fun call [%expr fun buf ~pos_ref -> [%e call] buf ~pos_ref]
@@ -1798,7 +1815,7 @@ module Generate_bin_read = struct
         ~type_constr:(Typ.create "Bin_prot.Type_class.reader")
         ~hide_params:true
         ~make_value_name:bin_reader_name
-        ~make_arg_name:bin_reader_name
+        ~make_arg_name:bin_reader_arg
         ~body
         td
     in
@@ -1909,7 +1926,7 @@ module Generate_tp_class = struct
   let bin_tp_class_td td =
     let loc = td.ptype_loc in
     let body =
-      let vars = vars_of_params ~f:bin_name ~locality td in
+      let vars = vars_of_params ~f:bin_arg td in
       let writer =
         project_vars
           (evar ~loc (bin_writer_name td.ptype_name.txt ~locality))
@@ -1936,7 +1953,7 @@ module Generate_tp_class = struct
       ~type_constr:(Typ.create "Bin_prot.Type_class.t")
       ~hide_params:true
       ~make_value_name:bin_name
-      ~make_arg_name:bin_name
+      ~make_arg_name:bin_arg
       ~body
       td
   ;;
diff --git a/test/deriving_inline.ml b/test/deriving_inline.ml
index b94de67..03e2d2c 100644
--- a/test/deriving_inline.ml
+++ b/test/deriving_inline.ml
@@ -128,10 +128,10 @@ end = struct
   let bin_size_t__local
     : 'a. 'a Bin_prot.Size.sizer_local -> 'a t Bin_prot.Size.sizer_local
     =
-    fun _size_of_a__local -> function
+    fun _size_of_a -> function
     | A v1 ->
       let size = 1 in
-      Bin_prot.Common.( + ) size (_size_of_a__local v1)
+      Bin_prot.Common.( + ) size (_size_of_a v1)
   ;;
 
   let _ = bin_size_t__local
@@ -148,10 +148,10 @@ end = struct
   let bin_write_t__local
     : 'a. 'a Bin_prot.Write.writer_local -> 'a t Bin_prot.Write.writer_local
     =
-    fun _write_a__local buf ~pos -> function
+    fun _write_a buf ~pos -> function
     | A v1 ->
       let pos = Bin_prot.Write.bin_write_int_8bit buf ~pos 0 in
-      _write_a__local buf ~pos v1
+      _write_a buf ~pos v1
   ;;
 
   let _ = bin_write_t__local
@@ -891,14 +891,26 @@ end
 module Global_fields_with_localize : sig
   module Record : sig
     type t [@@deriving bin_io ~localize]
+
+    module T1 : sig
+      type 'a t [@@deriving bin_io ~localize]
+    end
   end
 
   module Record_constructor : sig
     type t [@@deriving bin_io ~localize]
+
+    module T1 : sig
+      type 'a t [@@deriving bin_io ~localize]
+    end
   end
 
   module Tuple_constructor : sig
     type t [@@deriving bin_io ~localize]
+
+    module T1 : sig
+      type 'a t [@@deriving bin_io ~localize]
+    end
   end
 end = struct
   module T = struct
@@ -1012,6 +1024,119 @@ end = struct
     let _ = bin_t
 
     [@@@end]
+
+    module T1 = struct
+      type 'a t = { x : 'a } [@@deriving_inline bin_io ~localize ~hide_locations]
+
+      let _ = fun (_ : 'a t) -> ()
+
+      let bin_shape_t =
+        let _group =
+          Bin_prot.Shape.group
+            (Bin_prot.Shape.Location.of_string "<hidden>")
+            [ ( Bin_prot.Shape.Tid.of_string "t"
+              , [ Bin_prot.Shape.Vid.of_string "a" ]
+              , Bin_prot.Shape.record
+                  [ ( "x"
+                    , Bin_prot.Shape.var
+                        (Bin_prot.Shape.Location.of_string "<hidden>")
+                        (Bin_prot.Shape.Vid.of_string "a") )
+                  ] )
+            ]
+        in
+        fun a -> (Bin_prot.Shape.top_app _group (Bin_prot.Shape.Tid.of_string "t")) [ a ]
+      ;;
+
+      let _ = bin_shape_t
+
+      let bin_size_t__local
+        : 'a. 'a Bin_prot.Size.sizer_local -> 'a t Bin_prot.Size.sizer_local
+        =
+        fun _size_of_a -> function
+        | { x = v1 } ->
+          let size = 0 in
+          Bin_prot.Common.( + ) size (_size_of_a v1)
+      ;;
+
+      let _ = bin_size_t__local
+
+      let bin_size_t : 'a. 'a Bin_prot.Size.sizer -> 'a t Bin_prot.Size.sizer =
+        fun _size_of_a -> function
+        | { x = v1 } ->
+          let size = 0 in
+          Bin_prot.Common.( + ) size (_size_of_a v1)
+      ;;
+
+      let _ = bin_size_t
+
+      let bin_write_t__local
+        : 'a. 'a Bin_prot.Write.writer_local -> 'a t Bin_prot.Write.writer_local
+        =
+        fun _write_a buf ~pos -> function
+        | { x = v1 } -> _write_a buf ~pos v1
+      ;;
+
+      let _ = bin_write_t__local
+
+      let bin_write_t : 'a. 'a Bin_prot.Write.writer -> 'a t Bin_prot.Write.writer =
+        fun _write_a buf ~pos -> function
+        | { x = v1 } -> _write_a buf ~pos v1
+      ;;
+
+      let _ = bin_write_t
+
+      let bin_writer_t =
+        (fun bin_writer_a ->
+           { size = (fun v -> bin_size_t bin_writer_a.size v)
+           ; write = (fun v -> bin_write_t bin_writer_a.write v)
+           }
+         : _ Bin_prot.Type_class.writer -> _ Bin_prot.Type_class.writer)
+      ;;
+
+      let _ = bin_writer_t
+
+      let __bin_read_t__ : 'a. 'a Bin_prot.Read.reader -> 'a t Bin_prot.Read.vtag_reader =
+        fun _of__a _buf ~pos_ref _vint ->
+        Bin_prot.Common.raise_variant_wrong_type
+          "deriving_inline.ml.Global_fields_with_localize.Record.T1.t"
+          !pos_ref
+      ;;
+
+      let _ = __bin_read_t__
+
+      let bin_read_t : 'a. 'a Bin_prot.Read.reader -> 'a t Bin_prot.Read.reader =
+        fun _of__a buf ~pos_ref ->
+        let v_x = _of__a buf ~pos_ref in
+        { x = v_x }
+      ;;
+
+      let _ = bin_read_t
+
+      let bin_reader_t =
+        (fun bin_reader_a ->
+           { read = (fun buf ~pos_ref -> (bin_read_t bin_reader_a.read) buf ~pos_ref)
+           ; vtag_read =
+               (fun buf ~pos_ref vtag ->
+                 (__bin_read_t__ bin_reader_a.read) buf ~pos_ref vtag)
+           }
+         : _ Bin_prot.Type_class.reader -> _ Bin_prot.Type_class.reader)
+      ;;
+
+      let _ = bin_reader_t
+
+      let bin_t =
+        (fun bin_a ->
+           { writer = bin_writer_t bin_a.writer
+           ; reader = bin_reader_t bin_a.reader
+           ; shape = bin_shape_t bin_a.shape
+           }
+         : _ Bin_prot.Type_class.t -> _ Bin_prot.Type_class.t)
+      ;;
+
+      let _ = bin_t
+
+      [@@@end]
+    end
   end
 
   module Record_constructor = struct
@@ -1128,6 +1253,134 @@ end = struct
     let _ = bin_t
 
     [@@@end]
+
+    module T1 = struct
+      type 'a t = T of { x : 'a } [@@deriving_inline bin_io ~localize ~hide_locations]
+
+      let _ = fun (_ : 'a t) -> ()
+
+      let bin_shape_t =
+        let _group =
+          Bin_prot.Shape.group
+            (Bin_prot.Shape.Location.of_string "<hidden>")
+            [ ( Bin_prot.Shape.Tid.of_string "t"
+              , [ Bin_prot.Shape.Vid.of_string "a" ]
+              , Bin_prot.Shape.variant
+                  [ ( "T"
+                    , [ Bin_prot.Shape.record
+                          [ ( "x"
+                            , Bin_prot.Shape.var
+                                (Bin_prot.Shape.Location.of_string "<hidden>")
+                                (Bin_prot.Shape.Vid.of_string "a") )
+                          ]
+                      ] )
+                  ] )
+            ]
+        in
+        fun a -> (Bin_prot.Shape.top_app _group (Bin_prot.Shape.Tid.of_string "t")) [ a ]
+      ;;
+
+      let _ = bin_shape_t
+
+      let bin_size_t__local
+        : 'a. 'a Bin_prot.Size.sizer_local -> 'a t Bin_prot.Size.sizer_local
+        =
+        fun _size_of_a -> function
+        | T { x = v1 } ->
+          let size = 1 in
+          Bin_prot.Common.( + ) size (_size_of_a v1)
+      ;;
+
+      let _ = bin_size_t__local
+
+      let bin_size_t : 'a. 'a Bin_prot.Size.sizer -> 'a t Bin_prot.Size.sizer =
+        fun _size_of_a -> function
+        | T { x = v1 } ->
+          let size = 1 in
+          Bin_prot.Common.( + ) size (_size_of_a v1)
+      ;;
+
+      let _ = bin_size_t
+
+      let bin_write_t__local
+        : 'a. 'a Bin_prot.Write.writer_local -> 'a t Bin_prot.Write.writer_local
+        =
+        fun _write_a buf ~pos -> function
+        | T { x = v1 } ->
+          let pos = Bin_prot.Write.bin_write_int_8bit buf ~pos 0 in
+          _write_a buf ~pos v1
+      ;;
+
+      let _ = bin_write_t__local
+
+      let bin_write_t : 'a. 'a Bin_prot.Write.writer -> 'a t Bin_prot.Write.writer =
+        fun _write_a buf ~pos -> function
+        | T { x = v1 } ->
+          let pos = Bin_prot.Write.bin_write_int_8bit buf ~pos 0 in
+          _write_a buf ~pos v1
+      ;;
+
+      let _ = bin_write_t
+
+      let bin_writer_t =
+        (fun bin_writer_a ->
+           { size = (fun v -> bin_size_t bin_writer_a.size v)
+           ; write = (fun v -> bin_write_t bin_writer_a.write v)
+           }
+         : _ Bin_prot.Type_class.writer -> _ Bin_prot.Type_class.writer)
+      ;;
+
+      let _ = bin_writer_t
+
+      let __bin_read_t__ : 'a. 'a Bin_prot.Read.reader -> 'a t Bin_prot.Read.vtag_reader =
+        fun _of__a _buf ~pos_ref _vint ->
+        Bin_prot.Common.raise_variant_wrong_type
+          "deriving_inline.ml.Global_fields_with_localize.Record_constructor.T1.t"
+          !pos_ref
+      ;;
+
+      let _ = __bin_read_t__
+
+      let bin_read_t : 'a. 'a Bin_prot.Read.reader -> 'a t Bin_prot.Read.reader =
+        fun _of__a buf ~pos_ref ->
+        match Bin_prot.Read.bin_read_int_8bit buf ~pos_ref with
+        | 0 ->
+          let v_x = _of__a buf ~pos_ref in
+          T { x = v_x }
+        | _ ->
+          Bin_prot.Common.raise_read_error
+            (Bin_prot.Common.ReadError.Sum_tag
+               "deriving_inline.ml.Global_fields_with_localize.Record_constructor.T1.t")
+            !pos_ref
+      ;;
+
+      let _ = bin_read_t
+
+      let bin_reader_t =
+        (fun bin_reader_a ->
+           { read = (fun buf ~pos_ref -> (bin_read_t bin_reader_a.read) buf ~pos_ref)
+           ; vtag_read =
+               (fun buf ~pos_ref vtag ->
+                 (__bin_read_t__ bin_reader_a.read) buf ~pos_ref vtag)
+           }
+         : _ Bin_prot.Type_class.reader -> _ Bin_prot.Type_class.reader)
+      ;;
+
+      let _ = bin_reader_t
+
+      let bin_t =
+        (fun bin_a ->
+           { writer = bin_writer_t bin_a.writer
+           ; reader = bin_reader_t bin_a.reader
+           ; shape = bin_shape_t bin_a.shape
+           }
+         : _ Bin_prot.Type_class.t -> _ Bin_prot.Type_class.t)
+      ;;
+
+      let _ = bin_t
+
+      [@@@end]
+    end
   end
 
   module Tuple_constructor = struct
@@ -1231,5 +1484,130 @@ end = struct
     let _ = bin_t
 
     [@@@end]
+
+    module T1 = struct
+      type 'a t = T of 'a [@@deriving_inline bin_io ~localize ~hide_locations]
+
+      let _ = fun (_ : 'a t) -> ()
+
+      let bin_shape_t =
+        let _group =
+          Bin_prot.Shape.group
+            (Bin_prot.Shape.Location.of_string "<hidden>")
+            [ ( Bin_prot.Shape.Tid.of_string "t"
+              , [ Bin_prot.Shape.Vid.of_string "a" ]
+              , Bin_prot.Shape.variant
+                  [ ( "T"
+                    , [ Bin_prot.Shape.var
+                          (Bin_prot.Shape.Location.of_string "<hidden>")
+                          (Bin_prot.Shape.Vid.of_string "a")
+                      ] )
+                  ] )
+            ]
+        in
+        fun a -> (Bin_prot.Shape.top_app _group (Bin_prot.Shape.Tid.of_string "t")) [ a ]
+      ;;
+
+      let _ = bin_shape_t
+
+      let bin_size_t__local
+        : 'a. 'a Bin_prot.Size.sizer_local -> 'a t Bin_prot.Size.sizer_local
+        =
+        fun _size_of_a -> function
+        | T v1 ->
+          let size = 1 in
+          Bin_prot.Common.( + ) size (_size_of_a v1)
+      ;;
+
+      let _ = bin_size_t__local
+
+      let bin_size_t : 'a. 'a Bin_prot.Size.sizer -> 'a t Bin_prot.Size.sizer =
+        fun _size_of_a -> function
+        | T v1 ->
+          let size = 1 in
+          Bin_prot.Common.( + ) size (_size_of_a v1)
+      ;;
+
+      let _ = bin_size_t
+
+      let bin_write_t__local
+        : 'a. 'a Bin_prot.Write.writer_local -> 'a t Bin_prot.Write.writer_local
+        =
+        fun _write_a buf ~pos -> function
+        | T v1 ->
+          let pos = Bin_prot.Write.bin_write_int_8bit buf ~pos 0 in
+          _write_a buf ~pos v1
+      ;;
+
+      let _ = bin_write_t__local
+
+      let bin_write_t : 'a. 'a Bin_prot.Write.writer -> 'a t Bin_prot.Write.writer =
+        fun _write_a buf ~pos -> function
+        | T v1 ->
+          let pos = Bin_prot.Write.bin_write_int_8bit buf ~pos 0 in
+          _write_a buf ~pos v1
+      ;;
+
+      let _ = bin_write_t
+
+      let bin_writer_t =
+        (fun bin_writer_a ->
+           { size = (fun v -> bin_size_t bin_writer_a.size v)
+           ; write = (fun v -> bin_write_t bin_writer_a.write v)
+           }
+         : _ Bin_prot.Type_class.writer -> _ Bin_prot.Type_class.writer)
+      ;;
+
+      let _ = bin_writer_t
+
+      let __bin_read_t__ : 'a. 'a Bin_prot.Read.reader -> 'a t Bin_prot.Read.vtag_reader =
+        fun _of__a _buf ~pos_ref _vint ->
+        Bin_prot.Common.raise_variant_wrong_type
+          "deriving_inline.ml.Global_fields_with_localize.Tuple_constructor.T1.t"
+          !pos_ref
+      ;;
+
+      let _ = __bin_read_t__
+
+      let bin_read_t : 'a. 'a Bin_prot.Read.reader -> 'a t Bin_prot.Read.reader =
+        fun _of__a buf ~pos_ref ->
+        match Bin_prot.Read.bin_read_int_8bit buf ~pos_ref with
+        | 0 ->
+          let arg_1 = _of__a buf ~pos_ref in
+          T arg_1
+        | _ ->
+          Bin_prot.Common.raise_read_error
+            (Bin_prot.Common.ReadError.Sum_tag
+               "deriving_inline.ml.Global_fields_with_localize.Tuple_constructor.T1.t")
+            !pos_ref
+      ;;
+
+      let _ = bin_read_t
+
+      let bin_reader_t =
+        (fun bin_reader_a ->
+           { read = (fun buf ~pos_ref -> (bin_read_t bin_reader_a.read) buf ~pos_ref)
+           ; vtag_read =
+               (fun buf ~pos_ref vtag ->
+                 (__bin_read_t__ bin_reader_a.read) buf ~pos_ref vtag)
+           }
+         : _ Bin_prot.Type_class.reader -> _ Bin_prot.Type_class.reader)
+      ;;
+
+      let _ = bin_reader_t
+
+      let bin_t =
+        (fun bin_a ->
+           { writer = bin_writer_t bin_a.writer
+           ; reader = bin_reader_t bin_a.reader
+           ; shape = bin_shape_t bin_a.shape
+           }
+         : _ Bin_prot.Type_class.t -> _ Bin_prot.Type_class.t)
+      ;;
+
+      let _ = bin_t
+
+      [@@@end]
+    end
   end
 end
