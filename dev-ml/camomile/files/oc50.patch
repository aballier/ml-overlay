Index: camomile-1.0.2/Camomile/dune
===================================================================
--- camomile-1.0.2.orig/Camomile/dune
+++ camomile-1.0.2/Camomile/dune
@@ -9,7 +9,7 @@
  (name camomileLibrary)
  (public_name camomile.library)
  (wrapped true)
- (libraries bigarray camomileDefaultConfig)
+ (libraries bigarray camomileDefaultConfig camlp-streams)
  (modules
   :standard \ camomileDefaultConfig
   camomile_do_not_use
Index: camomile-1.0.2/Camomile/internal/byte_labeled_dag.ml
===================================================================
--- camomile-1.0.2.orig/Camomile/internal/byte_labeled_dag.ml
+++ camomile-1.0.2/Camomile/internal/byte_labeled_dag.ml
@@ -87,7 +87,7 @@ let make_bytes def vs =
           branch.(Char.code c') <- Some node;
           scan d c leaf branch rest
   in
-  let comp (s1, _) (s2, _) = Pervasives.compare s1 s2 in
+  let comp (s1, _) (s2, _) = Stdlib.compare s1 s2 in
   let vs = List.sort comp vs in
   match vs with
     (_, _) :: _ ->
Index: camomile-1.0.2/Camomile/internal/unidata.ml
===================================================================
--- camomile-1.0.2.orig/Camomile/internal/unidata.ml
+++ camomile-1.0.2/Camomile/internal/unidata.ml
@@ -302,7 +302,7 @@ module Make (Config : ConfigInt.Type) =
   (* little hack to maintain 4.02.3 compat with warnings *)
   module String = struct
     [@@@ocaml.warning "-3-32"]
-    let lowercase_ascii = StringLabels.lowercase
+    let lowercase_ascii = StringLabels.lowercase_ascii
     include String
   end
 
Index: camomile-1.0.2/Camomile/public/charEncoding.ml
===================================================================
--- camomile-1.0.2.orig/Camomile/public/charEncoding.ml
+++ camomile-1.0.2/Camomile/public/charEncoding.ml
@@ -131,12 +131,12 @@ module type Interface = sig
       {!OOChannel.obj_output_channel} which
       receives Unicode characters and outputs them to [outchan] using
       the encoding [enc]. *)
-  class out_channel : t -> Pervasives.out_channel -> [UChar.t] obj_output_channel
+  class out_channel : t -> Stdlib.out_channel -> [UChar.t] obj_output_channel
 
   (** [new in_channel enc inchan] creates the intput channel object
       {!OOChannel.obj_input_channel} which
       reads bytes from [inchan] and converts them to Unicode characters. *)
-  class in_channel : t -> Pervasives.in_channel -> [UChar.t] obj_input_channel
+  class in_channel : t -> Stdlib.in_channel -> [UChar.t] obj_input_channel
 
   (** [ustream_of enc chars] converts the byte stream [chars]
       to the Unicode character stream by the encoding [enc]. *)
Index: camomile-1.0.2/Camomile/public/charEncoding.mli
===================================================================
--- camomile-1.0.2.orig/Camomile/public/charEncoding.mli
+++ camomile-1.0.2/Camomile/public/charEncoding.mli
@@ -130,12 +130,12 @@ module type Interface = sig
       {!OOChannel.obj_output_channel} which
       receives Unicode characters and outputs them to [outchan] using
       the encoding [enc]. *)
-  class out_channel : t -> Pervasives.out_channel -> [UChar.t] obj_output_channel
+  class out_channel : t -> Stdlib.out_channel -> [UChar.t] obj_output_channel
 
   (** [new in_channel enc inchan] creates the intput channel object 
       {!OOChannel.obj_input_channel} which
       reads bytes from [inchan] and converts them to Unicode characters. *)
-  class in_channel : t -> Pervasives.in_channel -> [UChar.t] obj_input_channel
+  class in_channel : t -> Stdlib.in_channel -> [UChar.t] obj_input_channel
 
   (** [ustream_of enc chars] converts the byte stream [chars] 
       to the Unicode character stream by the encoding [enc]. *)
Index: camomile-1.0.2/Camomile/public/oOChannel.mli
===================================================================
--- camomile-1.0.2.orig/Camomile/public/oOChannel.mli
+++ camomile-1.0.2/Camomile/public/oOChannel.mli
@@ -113,7 +113,7 @@ class char_obj_output_channel_of : char_
   [char] obj_output_channel
 
 (** Convert an OCaml input channel to an OO-based character input channel *)
-class of_in_channel : Pervasives.in_channel -> char_input_channel
+class of_in_channel : Stdlib.in_channel -> char_input_channel
 
 (** Convert an OCaml output channel to an OO-based character output channel *)
-class of_out_channel : Pervasives.out_channel -> char_output_channel
+class of_out_channel : Stdlib.out_channel -> char_output_channel
Index: camomile-1.0.2/Camomile/public/uCS4.ml
===================================================================
--- camomile-1.0.2.orig/Camomile/public/uCS4.ml
+++ camomile-1.0.2/Camomile/public/uCS4.ml
@@ -140,5 +140,5 @@ end
 
 let compare (a:t) (b:t) =
   match Array1.dim a - Array1.dim b with
-    0 -> Pervasives.compare a b
+    0 -> Stdlib.compare a b
   | sgn -> sgn
Index: camomile-1.0.2/Camomile/public/uCol.ml
===================================================================
--- camomile-1.0.2.orig/Camomile/public/uCol.ml
+++ camomile-1.0.2/Camomile/public/uCol.ml
@@ -731,7 +731,7 @@ module Make (Config : ConfigInt.Type) (T
       | _ ->
         let key1 = key_of_inc prec col_info x1 in
         let key2 = key_of_inc prec col_info x2 in
-        Pervasives.compare key1 key2
+        Stdlib.compare key1 key2
 
   let compare ?locale ?prec ?variable t1 t2 =
     let col_info =
@@ -782,7 +782,7 @@ module Make (Config : ConfigInt.Type) (T
       | _ ->
         let key = key_of_inc prec col_info x in
         (*      Printf.printf "key_of_inc %s\n" (String.escaped key);*)
-        Pervasives.compare k key
+        Stdlib.compare k key
 
   let compare_with_key ?locale ?prec ?variable k t =
     let col_info =
Index: camomile-1.0.2/Camomile/public/uTF8.ml
===================================================================
--- camomile-1.0.2.orig/Camomile/public/uTF8.ml
+++ camomile-1.0.2/Camomile/public/uTF8.ml
@@ -194,7 +194,7 @@ let rec iter_aux proc s i =
 
 let iter proc s = iter_aux proc s 0
 
-let compare s1 s2 = Pervasives.compare s1 s2
+let compare s1 s2 = Stdlib.compare s1 s2
 
 exception Malformed_code
 
Index: camomile-1.0.2/Camomile/tools/dune
===================================================================
--- camomile-1.0.2.orig/Camomile/tools/dune
+++ camomile-1.0.2/Camomile/tools/dune
@@ -12,7 +12,7 @@
         camomilestringprep)
  (flags -I Camomile :standard)
  (modules :standard \ camomilelocaledef camomilelocaledef_lexer iana)
- (libraries toolslib camomile camomile.library))
+ (libraries toolslib camomile camomile.library camlp-streams))
 
 (executable
  (name iana)
@@ -21,6 +21,6 @@
 
 (executable
  (name camomilelocaledef)
- (libraries toolslib camomile.library)
+ (libraries toolslib camomile.library camlp-streams)
  (flags -I Camomile :standard)
  (modules camomilelocaledef camomilelocaledef_lexer))
Index: camomile-1.0.2/Camomile/tools/parse_specialcasing.ml
===================================================================
--- camomile-1.0.2.orig/Camomile/tools/parse_specialcasing.ml
+++ camomile-1.0.2/Camomile/tools/parse_specialcasing.ml
@@ -52,7 +52,7 @@ let locale_pat = Str.regexp "\\(..\\)\\(
 (* little hack to maintain 4.02.3 compat with warnings *)
 module String = struct
   [@@@ocaml.warning "-3-32"]
-  let lowercase_ascii = StringLabels.lowercase
+  let lowercase_ascii = StringLabels.lowercase_ascii
   include String
 end
 
Index: camomile-1.0.2/Camomile/toolslib/absCe.ml
===================================================================
--- camomile-1.0.2.orig/Camomile/toolslib/absCe.ml
+++ camomile-1.0.2/Camomile/toolslib/absCe.ml
@@ -49,7 +49,7 @@ type elt =
   | `FirstImplicit
   | `FirstTrailing ]
 
-module Elt = struct type t = elt let compare = Pervasives.compare end
+module Elt = struct type t = elt let compare = Stdlib.compare end
 module EltMap = Map.Make (Elt)
 
 type ce = AbsOrd.point * AbsOrd.point * AbsOrd.point
Index: camomile-1.0.2/dune-project
===================================================================
--- camomile-1.0.2.orig/dune-project
+++ camomile-1.0.2/dune-project
@@ -20,4 +20,5 @@ collation and locale-sensitive case mapp
 designed for Unicode Standard 3.2.")
  (depends
   (dune (>= 1.11))
-  (ocaml (>= "4.02.3"))))
+  (ocaml (>= "4.02.3"))
+  (camlp-streams (>= "5.0"))))
