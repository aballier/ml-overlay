Index: core_unix-0.15.1/bigstring_unix/src/bigstring_unix_stubs.c
===================================================================
--- core_unix-0.15.1.orig/bigstring_unix/src/bigstring_unix_stubs.c
+++ core_unix-0.15.1/bigstring_unix/src/bigstring_unix_stubs.c
@@ -253,7 +253,7 @@ CAMLprim value bigstring_recvfrom_assume
   else n_read = recvfrom(Int_val(v_sock), bstr, len, 0, &addr.s_gen, &addr_len);
   if (n_read == -1)
     uerror("bigstring_recvfrom_assume_fd_is_nonblocking", Nothing);
-  v_addr = alloc_sockaddr(&addr, addr_len, -1);
+  v_addr = caml_unix_alloc_sockaddr(&addr, addr_len, -1);
   v_res = caml_alloc_small(2, 0);
   Field(v_res, 0) = Val_long(n_read);
   Field(v_res, 1) = v_addr;
@@ -683,7 +683,7 @@ CAMLprim value bigstring_sendto_nonblock
   union sock_addr_union addr;
   socklen_param_type addr_len = sizeof(addr);
   ssize_t ret;
-  get_sockaddr(v_addr, &addr, &addr_len);
+  caml_unix_get_sockaddr(v_addr, &addr, &addr_len);
   ret =
     sendto(
       Int_val(v_fd), bstr, Long_val(v_len),
Index: core_unix-0.15.1/bigstring_unix/src/recvmmsg.c
===================================================================
--- core_unix-0.15.1.orig/bigstring_unix/src/recvmmsg.c
+++ core_unix-0.15.1/bigstring_unix/src/recvmmsg.c
@@ -91,7 +91,7 @@ int recvmmsg_assume_fd_is_nonblocking(
         }
 
         for (i = 0; (int) i < n_read; i++) {
-          value addr = alloc_sockaddr(&addrs[i], hdrs[i].msg_hdr.msg_namelen, -1);
+          value addr = caml_unix_alloc_sockaddr(&addrs[i], hdrs[i].msg_hdr.msg_namelen, -1);
           Store_field(v_sockaddrs, i, addr);
         }
       }
Index: core_unix-0.15.1/core_unix/src/socketaddr.h
===================================================================
--- core_unix-0.15.1.orig/core_unix/src/socketaddr.h
+++ core_unix-0.15.1/core_unix/src/socketaddr.h
@@ -20,15 +20,15 @@ typedef socklen_t socklen_param_type;
 typedef int socklen_param_type;
 #endif
 
-extern void get_sockaddr (value mladdr,
+extern void caml_unix_get_sockaddr (value mladdr,
                           union sock_addr_union * addr /*out*/,
                           socklen_param_type * addr_len /*out*/);
-CAMLexport value alloc_sockaddr (union sock_addr_union * addr /*in*/,
+CAMLexport value caml_unix_alloc_sockaddr (union sock_addr_union * addr /*in*/,
                       socklen_param_type addr_len, int close_on_error);
-CAMLexport value alloc_inet_addr (struct in_addr * inaddr);
+CAMLexport value caml_unix_alloc_inet_addr (struct in_addr * inaddr);
 #define GET_INET_ADDR(v) (*((struct in_addr *) (v)))
 
 #ifdef HAS_IPV6
-CAMLexport value alloc_inet6_addr (struct in6_addr * inaddr);
+CAMLexport value caml_unix_alloc_inet6_addr (struct in6_addr * inaddr);
 #define GET_INET6_ADDR(v) (*((struct in6_addr *) (v)))
 #endif
Index: core_unix-0.15.1/linux_ext/src/linux_ext_stubs.c
===================================================================
--- core_unix-0.15.1.orig/linux_ext/src/linux_ext_stubs.c
+++ core_unix-0.15.1/linux_ext/src/linux_ext_stubs.c
@@ -99,11 +99,11 @@ enum option_type {
   TYPE_UNIX_ERROR = 4
 };
 
-extern value unix_getsockopt_aux(
+extern value caml_unix_getsockopt_aux(
   char *name,
   enum option_type ty, int level, int option,
   value v_socket);
-extern value unix_setsockopt_aux(
+extern value caml_unix_setsockopt_aux(
   char *name,
   enum option_type ty, int level, int option,
   value v_socket, value v_status);
@@ -112,7 +112,7 @@ CAMLprim value core_linux_gettcpopt_bool
 {
   int option = linux_tcpopt_bool[Int_val(v_option)];
   return
-    unix_getsockopt_aux("getsockopt", TYPE_BOOL, SOL_TCP, option, v_socket);
+    caml_unix_getsockopt_aux("getsockopt", TYPE_BOOL, SOL_TCP, option, v_socket);
 }
 
 CAMLprim value
@@ -120,7 +120,7 @@ core_linux_settcpopt_bool_stub(value v_s
 {
   int option = linux_tcpopt_bool[Int_val(v_option)];
   return
-    unix_setsockopt_aux(
+    caml_unix_setsockopt_aux(
       "setsockopt", TYPE_BOOL, SOL_TCP, option, v_socket, v_status);
 }
 
