Index: labltk-8.06.14/browser/cmt2annot_raw.ml
===================================================================
--- labltk-8.06.14.orig/browser/cmt2annot_raw.ml
+++ labltk-8.06.14/browser/cmt2annot_raw.ml
@@ -101,10 +101,12 @@ let rec iterator ~scope rebuild_env =
         bind_bindings exp.exp_loc bindings
     | Texp_let (Nonrecursive, bindings, body) ->
         bind_bindings body.exp_loc bindings
-    | Texp_match (_, f1, _) ->
-        bind_cases f1
-    | Texp_try (_, f) ->
-        bind_cases f
+    | Texp_match (_, f1, v, _) ->
+        bind_cases f1;
+	bind_cases v
+    | Texp_try (_, f, k) ->
+        bind_cases f;
+	bind_cases k
     | Texp_function (params, _) ->
         List.iter (bind_function_param exp.exp_loc) params
     | Texp_letmodule (_, modname, _, _, body ) ->
Index: labltk-8.06.14/browser/searchid.ml
===================================================================
--- labltk-8.06.14.orig/browser/searchid.ml
+++ labltk-8.06.14/browser/searchid.ml
@@ -292,14 +292,14 @@ let search_string_type text ~mode =
   try
     let sexp = Parse.interface (Lexing.from_string ("val z : " ^ text)) in
     let sign =
-      try (Typemod.transl_signature !start_env sexp).sig_type with _ ->
+      try (Typemod.type_interface !start_env sexp).sig_type with _ ->
       let env = List.fold_left !module_list ~init:!start_env ~f:
         begin fun acc m ->
           match open_pers_signature m acc with
             Ok env -> env
           | Error _ -> acc
         end in
-      try (Typemod.transl_signature env sexp).sig_type
+      try (Typemod.type_interface env sexp).sig_type
       with
         Env.Error _ | Persistent_env.Error _ -> []
       | Typemod.Error (l,_,_) ->
@@ -440,6 +440,7 @@ let rec bound_variables pat =
   | Ppat_extension _ -> []
   | Ppat_exception pat -> bound_variables pat
   | Ppat_open (_, pat) -> bound_variables pat
+  | Ppat_effect (pat1, pat2) -> bound_variables pat1 @ bound_variables pat2
 
 let search_structure str ~name ~kind ~prefix =
   let loc = ref 0 in
Index: labltk-8.06.14/browser/searchpos.ml
===================================================================
--- labltk-8.06.14.orig/browser/searchpos.ml
+++ labltk-8.06.14/browser/searchpos.ml
@@ -217,7 +217,7 @@ let rec search_pos_signature l ~pos ~env
         | Error _ -> env
         end
     | sign_item ->
-        try add_signature (Typemod.transl_signature env [pt]).sig_type env
+        try add_signature (Typemod.type_interface env [pt]).sig_type env
         with Typemod.Error _ | Typeclass.Error _
         | Typetexp.Error _  | Typedecl.Error _ -> env
     in
@@ -703,7 +703,7 @@ let view_type_menu kind ~env ~parent =
       Format.set_formatter_output_functions buf#out ignore;
       Format.set_margin 60;
       Format.open_hbox ();
-      Printtyp.prepare_for_printing [ty];
+      Out_type.prepare_for_printing [ty];
       Printtyp.wrap_printing_env ~error:false env
         (fun () -> Printtyp.type_expr Format.std_formatter ty);
       Format.close_box (); Format.print_flush ();
@@ -860,12 +860,14 @@ and search_pos_expr ~pos exp =
       List.iter l
         ~f:(fun (_, x) -> Stdlib.Option.iter (search_pos_expr ~pos) x);
       search_pos_expr exp ~pos
-  | Texp_match (exp, l, _) ->
+  | Texp_match (exp, l, v, _) ->
       search_pos_expr exp ~pos;
-      List.iter l ~f:(search_case ~pos)
-  | Texp_try (exp, l) ->
+      List.iter l ~f:(search_case ~pos);
+      List.iter v ~f:(search_case ~pos);
+  | Texp_try (exp, l, k) ->
       search_pos_expr exp ~pos;
-      List.iter l ~f:(search_case ~pos)
+      List.iter l ~f:(search_case ~pos);
+      List.iter k ~f:(search_case ~pos)
   | Texp_tuple l -> List.iter l ~f:(search_pos_expr ~pos)
   | Texp_construct (_, _, l) -> List.iter l ~f:(search_pos_expr ~pos)
   | Texp_variant (_, None) -> ()
Index: labltk-8.06.14/browser/typecheck.ml
===================================================================
--- labltk-8.06.14.orig/browser/typecheck.ml
+++ labltk-8.06.14/browser/typecheck.ml
@@ -113,7 +113,7 @@ let f txt =
     let psign = parse_pp text ~ext:".mli"
         ~parse:Parse.interface ~wrap:(fun x -> x) in
     txt.psignature <- psign;
-    txt.signature <- (Typemod.transl_signature !env psign).sig_type;
+    txt.signature <- (Typemod.type_interface !env psign).sig_type;
 
     else (* others are interpreted as .ml *)
 
