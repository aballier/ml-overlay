Index: tls-0.17.5/lib/handshake_client.ml
===================================================================
--- tls-0.17.5.orig/lib/handshake_client.ml
+++ tls-0.17.5/lib/handshake_client.ml
@@ -362,7 +362,7 @@ let answer_server_hello_done state (sess
   let* msgs, raw_msgs, raws, cert_verify =
     match session.common_session_data.client_auth, session.common_session_data.own_private_key with
     | true, Some p ->
-       let cs = List.map X509.Certificate.encode_der session.common_session_data.own_certificate in
+       let cs = List.map (fun x -> Cstruct.of_string (X509.Certificate.encode_der x)) session.common_session_data.own_certificate in
        let cert = Certificate (Writer.assemble_certificates cs) in
        let ccert = Writer.assemble_handshake cert in
        let to_sign = log @ [ raw ; ccert ; ckex ] in
@@ -510,10 +510,10 @@ let handle_handshake cs hs buf =
     answer_server_hello_renegotiate hs session ch sh buf log
   | AwaitCertificate_RSA (session, log), Certificate cs ->
     let* cs = map_reader_error (Reader.parse_certificates cs) in
-    answer_certificate_RSA hs session cs buf log
+    answer_certificate_RSA hs session (List.map Cstruct.to_string cs) buf log
   | AwaitCertificate_DHE (session, log), Certificate cs ->
     let* cs = map_reader_error (Reader.parse_certificates cs) in
-    answer_certificate_DHE hs session cs buf log
+    answer_certificate_DHE hs session (List.map Cstruct.to_string cs) buf log
   | AwaitServerKeyExchange_DHE (session, log), ServerKeyExchange kex ->
     answer_server_key_exchange_DHE hs session kex buf log
   | AwaitCertificateRequestOrServerHelloDone (session, kex, pms, log), CertificateRequest cr ->
Index: tls-0.17.5/lib/handshake_client13.ml
===================================================================
--- tls-0.17.5.orig/lib/handshake_client13.ml
+++ tls-0.17.5/lib/handshake_client13.ml
@@ -156,7 +156,7 @@ let answer_finished state (session : ses
         | _ -> ([], None)
       in
       let certificate =
-        let cs = List.map X509.Certificate.encode_der own_certificate in
+        let cs = List.map (fun x -> Cstruct.of_string (X509.Certificate.encode_der x)) own_certificate in
         Certificate (Writer.assemble_certificates_1_3 Cstruct.empty cs)
       in
       let cert_raw = Writer.assemble_handshake certificate in
@@ -255,14 +255,14 @@ let handle_handshake cs hs buf =
     let* () = guard (ctx = None) (`Fatal `InvalidMessage) in
     answer_certificate_request hs sd es ss exts buf log
   | AwaitServerCertificateRequestOrCertificate13 (sd, es, ss, log), Certificate cs ->
-    let* con, cs = map_reader_error (parse_certificates_1_3 cs) in
+    let* con, cs = Result.map (fun (a,b) -> (Cstruct.to_string a, List.map (fun (x,y) -> (Cstruct.to_string x, y)) b)) (map_reader_error (parse_certificates_1_3 cs)) in
     (* during handshake, context must be empty! and we'll not get any new certificate from server *)
-    let* () = guard (Cstruct.length con = 0) (`Fatal `InvalidMessage) in
+    let* () = guard (String.length con = 0) (`Fatal `InvalidMessage) in
     answer_certificate hs sd es ss None cs buf log
   | AwaitServerCertificate13 (sd, es, ss, sigalgs, log), Certificate cs ->
-    let* con, cs = map_reader_error (parse_certificates_1_3 cs) in
+    let* con, cs = Result.map (fun (a,b) -> (Cstruct.to_string a, List.map (fun (x,y) -> (Cstruct.to_string x, y)) b)) (map_reader_error (parse_certificates_1_3 cs)) in
     (* during handshake, context must be empty! and we'll not get any new certificate from server *)
-    let* () = guard (Cstruct.length con = 0) (`Fatal `InvalidMessage) in
+    let* () = guard (String.length con = 0) (`Fatal `InvalidMessage) in
     answer_certificate hs sd es ss sigalgs cs buf log
   | AwaitServerCertificateVerify13 (sd, es, ss, sigalgs, log), CertificateVerify cv ->
     answer_certificate_verify hs sd es ss sigalgs cv buf log
Index: tls-0.17.5/lib/handshake_common.ml
===================================================================
--- tls-0.17.5.orig/lib/handshake_common.ml
+++ tls-0.17.5/lib/handshake_common.ml
@@ -488,7 +488,7 @@ let validate_chain authenticator certifi
         | Ok c -> Some c
         | Error `Msg msg ->
           Log.warn (fun m -> m "cannot decode certificate %s:@.%a" msg
-                       Cstruct.hexdump_pp cs);
+                       (Fmt.fmt "%S") cs);
           None
       in
       List.filter_map f certs
Index: tls-0.17.5/lib/handshake_server.ml
===================================================================
--- tls-0.17.5.orig/lib/handshake_server.ml
+++ tls-0.17.5/lib/handshake_server.ml
@@ -339,7 +339,7 @@ let answer_client_hello_common state ren
     match session.common_session_data.own_certificate with
     | []    -> []
     | certs ->
-       let cs = List.map X509.Certificate.encode_der certs in
+       let cs = List.map (fun x -> Cstruct.of_string (X509.Certificate.encode_der x)) certs in
        let cert = Certificate (Writer.assemble_certificates cs) in
        Tracing.hs ~tag:"handshake-out" cert ;
        [ Writer.assemble_handshake cert ]
@@ -350,7 +350,7 @@ let answer_client_hello_common state ren
     | None -> Ok ([], session)
     | Some _ ->
        let cas =
-         List.map X509.Distinguished_name.encode_der config.acceptable_cas
+         List.map (fun x -> Cstruct.of_string (X509.Distinguished_name.encode_der x)) config.acceptable_cas
        and certs =
          [ Packet.RSA_SIGN ; Packet.ECDSA_SIGN ]
        in
@@ -641,10 +641,10 @@ let handle_handshake ss hs buf =
     answer_client_hello hs ch buf
   | AwaitClientCertificate_RSA (session, log), Certificate cs ->
     let* cs = map_reader_error (Reader.parse_certificates cs) in
-    answer_client_certificate_RSA hs session cs buf log
+    answer_client_certificate_RSA hs session (List.map Cstruct.to_string cs) buf log
   | AwaitClientCertificate_DHE (session, dh_sent, log), Certificate cs ->
     let* cs = map_reader_error (Reader.parse_certificates cs) in
-    answer_client_certificate_DHE hs session dh_sent cs buf log
+    answer_client_certificate_DHE hs session dh_sent (List.map Cstruct.to_string cs) buf log
   | AwaitClientKeyExchange_RSA (session, log), ClientKeyExchange cs ->
     let* kex = map_reader_error (Reader.parse_client_dh_key_exchange cs) in
     answer_client_key_exchange_RSA hs session kex buf log
Index: tls-0.17.5/lib/handshake_server13.ml
===================================================================
--- tls-0.17.5.orig/lib/handshake_server13.ml
+++ tls-0.17.5/lib/handshake_server13.ml
@@ -280,7 +280,7 @@ let answer_client_hello ~hrr state ch ra
           in
 
           let certs = List.map X509.Certificate.encode_der chain in
-          let cert = Certificate (Writer.assemble_certificates_1_3 Cstruct.empty certs) in
+          let cert = Certificate (Writer.assemble_certificates_1_3 Cstruct.empty (List.map Cstruct.of_string certs)) in
           let cert_raw = Writer.assemble_handshake cert in
           Tracing.hs ~tag:"handshake-out" cert ;
           let log = log <+> cert_raw in
@@ -390,7 +390,7 @@ let answer_client_certificate state cert
   | (_ctx, cert_exts), auth ->
     (* TODO what to do with ctx? send through authenticator? *)
     (* TODO what to do with extensions? *)
-    let certs = List.map fst cert_exts in
+    let certs = List.map (fun x -> Cstruct.to_string (fst x)) cert_exts in
     let* peer_certificate, received_certificates, peer_certificate_chain, trust_anchor =
       validate_chain auth certs state.config.Config.ip None
     in
Index: tls-0.17.5/lib/reader.ml
===================================================================
--- tls-0.17.5.orig/lib/reader.ml
+++ tls-0.17.5/lib/reader.ml
@@ -672,7 +672,7 @@ let parse_certificate_request_extension
         raise_trailing_bytes "certificate authorities"
       else
         let cas = List.fold_left (fun cas buf ->
-            match X509.Distinguished_name.decode_der buf with
+            match X509.Distinguished_name.decode_der (Cstruct.to_string buf) with
             | Ok ca -> ca :: cas
             | Error _ -> cas)
             [] cas
Index: tls-0.17.5/lib/writer.ml
===================================================================
--- tls-0.17.5.orig/lib/writer.ml
+++ tls-0.17.5/lib/writer.ml
@@ -213,7 +213,7 @@ let assemble_extensions ?none_if_empty a
 
 let assemble_ca ca =
   let lenbuf = create 2 in
-  let data = X509.Distinguished_name.encode_der ca in
+  let data = Cstruct.of_string (X509.Distinguished_name.encode_der ca) in
   BE.set_uint16 lenbuf 0 (length data) ;
   lenbuf <+> data
 
