Index: mdx-1.8.0/lib/dune
===================================================================
--- mdx-1.8.0.orig/lib/dune
+++ mdx-1.8.0/lib/dune
@@ -5,7 +5,7 @@
   (action
    (run %{bin:cppo} -V OCAML:%{ocaml_version} %{input-file})))
  (libraries astring csexp fmt logs ocaml-migrate-parsetree ocaml-version
-   odoc.parser re result str))
+   odoc.parser re result str ppxlib ppxlib.ast))
 
 (ocamllex lexer_mdx)
 
Index: mdx-1.8.0/lib/migrate_ast.ml
===================================================================
--- mdx-1.8.0.orig/lib/migrate_ast.ml
+++ mdx-1.8.0/lib/migrate_ast.ml
@@ -31,39 +31,14 @@ module Asttypes_ = Asttypes
 module Parsetree_ = Parsetree
 
 include (
-  Migrate_parsetree.Ast_408 :
-  module type of struct
-      include Migrate_parsetree.Ast_408
-    end
-    with module Location := Migrate_parsetree.Ast_408.Location
-     and module Outcometree := Migrate_parsetree.Ast_408.Outcometree
-     and module Asttypes := Migrate_parsetree.Ast_408.Asttypes
-     and module Ast_helper := Migrate_parsetree.Ast_408.Ast_helper
-     and module Parsetree := Migrate_parsetree.Ast_408.Parsetree
+  Migrate_parsetree.Ast_408
  )
 
 module Asttypes = Migrate_parsetree.Ast_408.Asttypes
-module Ast_helper = Migrate_parsetree.Ast_408.Ast_helper
 module Parsetree = Migrate_parsetree.Ast_408.Parsetree
 
-module Parse = struct
-  open Migrate_parsetree
-
-  let toplevel_phrase lexbuf =
-    Parse.toplevel_phrase Versions.ocaml_408 lexbuf
-
-  let implementation lexbuf =
-    Parse.implementation Versions.ocaml_408 lexbuf
-
-  let interface lexbuf =
-    Parse.interface Versions.ocaml_408 lexbuf
-end
-
-let to_current =
-  Migrate_parsetree.Versions.(migrate ocaml_408 ocaml_current)
-
-let to_408 =
-  Migrate_parsetree.Versions.(migrate ocaml_current ocaml_408)
+module To_current = Ppxlib_ast__Versions.Convert(Ppxlib_ast__Versions.OCaml_408)(Ppxlib_ast__Versions.OCaml_current)
+module To_408 = Ppxlib_ast__Versions.Convert(Ppxlib_ast__Versions.OCaml_current)(Ppxlib_ast__Versions.OCaml_408)
 
 module Typemod = struct
   open Typemod
@@ -71,22 +46,22 @@ module Typemod = struct
   let type_structure e s l =
 #if OCAML_VERSION >= (4, 12, 0)
     let _ = l in
-    type_structure e (to_current.copy_structure s)
+    type_structure e (To_current.copy_structure s)
 #else
-    type_structure e (to_current.copy_structure s) l
+    type_structure e (To_current.copy_structure s) l
 #endif
 end
 
 module Printast = struct
   open Printast
 
-  let top_phrase f x = top_phrase f (to_current.copy_toplevel_phrase x)
+  let top_phrase f x = top_phrase f (To_current.copy_toplevel_phrase x)
 end
 
 module Pprintast = struct
   open Pprintast
 
-  let top_phrase f x = top_phrase f (to_current.copy_toplevel_phrase x)
+  let top_phrase f x = top_phrase f (To_current.copy_toplevel_phrase x)
 end
 
 module Printtyp = struct
@@ -104,8 +79,8 @@ module Pparse = struct
   open Pparse
 
   let apply_rewriters_str ~tool_name s =
-    apply_rewriters_str ~tool_name (to_current.copy_structure s)
-    |> to_408.copy_structure
+    apply_rewriters_str ~tool_name (To_current.copy_structure s)
+    |> To_408.copy_structure
 end
 
 module Position = struct
@@ -132,7 +107,7 @@ module Position = struct
 end
 
 module Location = struct
-  include Migrate_parsetree.Ast_408.Location
+  include Location
 
   let fmt fs {loc_start; loc_end; loc_ghost} =
     Format.fprintf fs "(%a..%a)%s" Position.fmt loc_start Position.fmt
Index: mdx-1.8.0/lib/top/mdx_top.ml
===================================================================
--- mdx-1.8.0.orig/lib/top/mdx_top.ml
+++ mdx-1.8.0/lib/top/mdx_top.ml
@@ -23,7 +23,7 @@ module Toploop = struct
   include Toploop
 
   let execute_phrase verbose ppf p =
-    execute_phrase verbose ppf (to_current.copy_toplevel_phrase p)
+    execute_phrase verbose ppf (To_current.copy_toplevel_phrase p)
 end
 
 let redirect ~f =
@@ -117,7 +117,7 @@ module Phrase = struct
     let lexbuf = Lexing.from_string contents in
     let startpos = lexbuf.Lexing.lex_start_p in
     let parsed =
-      match Parse.toplevel_phrase lexbuf with
+      match To_408.copy_toplevel_phrase (Parse.toplevel_phrase lexbuf) with
       | phrase -> Result.Ok phrase
       | exception exn ->
           let exn =
@@ -181,9 +181,10 @@ module Rewrite = struct
     let open Ast_helper in
     let rewrite loc e =
       with_default_loc loc (fun () ->
+      To_408.copy_expression (
           Exp.apply
             (Exp.ident (Location.mkloc runner loc))
-            [ (Asttypes.Nolabel, e) ])
+            [ (Asttypes_.Nolabel, To_current.copy_expression e) ]))
     in
     { typ; runner; rewrite; witness; preload }
 
@@ -203,9 +204,10 @@ module Rewrite = struct
         Pat.construct (Location.mkloc (Longident.Lident "()") loc) None
       in
       with_default_loc loc @@ fun () ->
+      To_408.copy_expression (
       Exp.apply
         (Exp.ident (Location.mkloc runner loc))
-        [ (Asttypes.Nolabel, Exp.fun_ Asttypes.Nolabel None punit e) ]
+        [ (Asttypes_.Nolabel, Exp.fun_ Asttypes_.Nolabel None punit (To_current.copy_expression e)) ])
     in
     { typ; runner; rewrite; witness; preload }
 
@@ -324,7 +326,7 @@ let toplevel_exec_phrase t ppf p =
       let mapper = Lexbuf.position_mapper (Phrase.start p) in
       let phrase =
         match phrase with
-        | Ptop_def str -> Ptop_def (mapper.Ast_mapper.structure mapper str)
+        | Ptop_def str -> Ptop_def (To_408.copy_structure (mapper.Ast_mapper.structure mapper (To_current.copy_structure str)))
         | Ptop_dir _ as x -> x
       in
       let phrase =
Index: mdx-1.8.0/test/bin/mdx-test/expect/errors/test-case.md
===================================================================
--- mdx-1.8.0.orig/test/bin/mdx-test/expect/errors/test-case.md
+++ mdx-1.8.0/test/bin/mdx-test/expect/errors/test-case.md
@@ -63,5 +63,5 @@ Error: This expression has type string b
 
 ```ocaml non-deterministic=output
 # raise Not_found
-Exception: Not_found.
+Exception: Not_found
 ```
