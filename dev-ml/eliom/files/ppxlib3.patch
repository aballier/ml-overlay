Index: eliom-8.8.0/src/ppx/ppx_eliom_client.ml
===================================================================
--- eliom-8.8.0.orig/src/ppx/ppx_eliom_client.ml
+++ eliom-8.8.0/src/ppx/ppx_eliom_client.ml
@@ -96,7 +96,7 @@ module Pass = struct
              Eliom_client_core.Syntax_helpers.register_client_closure
                [%e Exp.constant ~loc @@ Const.string (*~loc*) num]
                (fun [%p pat_args ~loc args] ->
-                  ([%e map_get_escaped_values expr] : [%t typ]))
+                  ([%e Ppxlib_ast.Selected_ast.Of_ocaml.copy_expression (map_get_escaped_values (Ppxlib_ast.Selected_ast.To_ocaml.copy_expression expr))] : [%t typ]))
            ]
         )
         client_value_datas
@@ -200,7 +200,7 @@ module Pass = struct
     match context, escaped_bindings with
     | `Server, _ ->
       (* We are in a server fragment, this code should always be discarded. *)
-      Exp.extension @@ AM.extension_of_error @@ Location.errorf "Eliom: ICE"
+      Exp.extension @@ Ppxlib.Location.Error.to_extension @@ Ppxlib.Location.Error.createf ~loc "Eliom: ICE"
     | `Shared, [] ->
       [%expr [%e frag_eid] ()][@metaloc loc]
     | `Shared, _ ->
@@ -231,19 +231,19 @@ module Pass = struct
       let typ mapper = function
         | {ptyp_desc = Ptyp_var _ } as typ ->
           let attr =
-            AM.attribute_of_warning loc
+            Ppxlib.attribute_of_warning loc
               "The type of this injected value contains a type variable \
                that could be wrongly inferred."
           in
           { typ with ptyp_attributes = attr :: typ.ptyp_attributes;
                      ptyp_loc = loc }
-        | typ -> AM.default_mapper.typ mapper typ
+        | typ -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Core_type AM.default_mapper.typ mapper typ
       in
       if unsafe then
         t
       else
-        let m = { AM.default_mapper with typ } in
-        m.AM.typ m t
+        let m = { AM.default_mapper with typ=(Ppxlib_ast.Selected_ast.to_ocaml_mapper Core_type typ) } in
+        Ppxlib_ast.Selected_ast.of_ocaml_mapper Core_type m.AM.typ m t
     in
 
     match context with
@@ -293,7 +293,7 @@ include Make(Pass)
 
 let () =
   Ppxlib.Driver.register_transformation
-    ~preprocess_impl:(fun str -> mapper.AM.structure mapper str)
+    ~preprocess_impl:(fun str -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Structure mapper.AM.structure mapper str)
     ~preprocess_intf:(fun sig_ ->
-      mapper.AM.signature mapper sig_)
+      Ppxlib_ast.Selected_ast.of_ocaml_mapper Signature mapper.AM.signature mapper sig_)
      "ppx_eliom_client"
Index: eliom-8.8.0/src/ppx/ppx_eliom_server.ml
===================================================================
--- eliom-8.8.0.orig/src/ppx/ppx_eliom_server.ml
+++ eliom-8.8.0/src/ppx/ppx_eliom_server.ml
@@ -261,7 +261,7 @@ include Make(Pass)
 
 let () =
   Ppxlib.Driver.register_transformation
-    ~preprocess_impl:(fun str -> mapper.AM.structure mapper str)
+    ~preprocess_impl:(fun str -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Structure mapper.AM.structure mapper str)
     ~preprocess_intf:(fun sig_ ->
-      mapper.AM.signature mapper sig_)
+      Ppxlib_ast.Selected_ast.of_ocaml_mapper Signature mapper.AM.signature mapper sig_)
      "ppx_eliom_server"
Index: eliom-8.8.0/src/ppx/ppx_eliom_type.ml
===================================================================
--- eliom-8.8.0.orig/src/ppx/ppx_eliom_type.ml
+++ eliom-8.8.0/src/ppx/ppx_eliom_type.ml
@@ -145,7 +145,7 @@ include Make(Pass)
 
 let () =
   Ppxlib.Driver.register_transformation
-    ~preprocess_impl:(fun str -> mapper.AM.structure mapper str)
+    ~preprocess_impl:(fun str -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Structure mapper.AM.structure mapper str)
     ~preprocess_intf:(fun sig_ ->
-      mapper.AM.signature mapper sig_)
+      Ppxlib_ast.Selected_ast.of_ocaml_mapper Signature mapper.AM.signature mapper sig_)
      "ppx_eliom_types"
Index: eliom-8.8.0/src/ppx/ppx_eliom_utils.ml
===================================================================
--- eliom-8.8.0.orig/src/ppx/ppx_eliom_utils.ml
+++ eliom-8.8.0/src/ppx/ppx_eliom_utils.ml
@@ -195,13 +195,13 @@ module Mli = struct
       (* | Ptyp_constr  (_, Ast.TyAny _, ty) *)
       (* | Ptyp_constr (_, ty, Ast.TyAny _) -> ty *)
       | Ptyp_var var when has_pfix var ->
-        mapper.AM.typ mapper
+        Ppxlib_ast.Selected_ast.of_ocaml_mapper Core_type mapper.AM.typ mapper
           {ty with
            ptyp_desc = Ptyp_var (rename var)
           }
-      | _ -> AM.default_mapper.typ mapper ty in
-    let m = { AM.default_mapper with typ } in
-    m.AM.typ m
+      | _ -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Core_type AM.default_mapper.typ mapper ty in
+    let m = { AM.default_mapper with typ=(Ppxlib_ast.Selected_ast.to_ocaml_mapper Core_type typ) } in
+    Ppxlib_ast.Selected_ast.of_ocaml_mapper Core_type m.AM.typ m
 
   let is_injected_ident id =
     try Scanf.sscanf id Name.injected_ident_fmt (fun _ _ -> true)
@@ -263,7 +263,7 @@ module Mli = struct
   let find err {Location. txt ; loc } =
     try Hashtbl.find (Lazy.force inferred_sig) txt with
     | Not_found ->
-      Typ.extension ~loc @@ AM.extension_of_error @@ Location.errorf ~loc
+      Typ.extension ~loc @@ Ppxlib.Location.Error.to_extension @@ Ppxlib.Location.Error.createf ~loc
         "Error: Inferred type of %s not found. You need to regenerate %s."
         err (get_type_file ())
 
@@ -415,7 +415,7 @@ module Cmo = struct
     try
       typ (Hashtbl.find (Lazy.force events) (pos_fname, pos_cnum))
     with Not_found ->
-      Typ.extension ~loc @@ AM.extension_of_error @@ Location.errorf ~loc
+      Typ.extension ~loc @@ Ppxlib.Location.Error.to_extension @@ Ppxlib.Location.Error.createf ~loc
         "Error: Inferred type of %s not found. You need to regenerate %s."
         err (get_file ())
 
@@ -869,22 +869,22 @@ module Shared = struct
     | [%expr [%client [%e? _ ]]] -> expr
     | [%expr [%client.unsafe [%e? _ ]]] -> expr
     | [%expr ~% [%e? injection_expr ]] -> injection_expr
-    | _ -> AM.default_mapper.expr mapper expr
-  let server = {AM.default_mapper with expr = server_expr}
+    | _ -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Expression AM.default_mapper.expr mapper expr
+  let server = {AM.default_mapper with expr = (Ppxlib_ast.Selected_ast.to_ocaml_mapper Expression server_expr)}
 
   let client_expr context mapper expr =
     match expr with
     | [%expr [%client [%e? fragment_expr ]]]
     | [%expr [%client.unsafe [%e? fragment_expr ]]] ->
       in_context context `Fragment
-        (mapper.AM.expr mapper) fragment_expr
+        (Ppxlib_ast.Selected_ast.of_ocaml_mapper Expression mapper.AM.expr mapper) fragment_expr
     | [%expr ~% [%e? injection_expr ]] ->
       begin match !context with
         | `Top -> expr
         | `Fragment -> injection_expr
       end
-    | _ -> AM.default_mapper.expr mapper expr
-  let client = {AM.default_mapper with expr = client_expr (ref `Top)}
+    | _ -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Expression AM.default_mapper.expr mapper expr
+  let client = {AM.default_mapper with expr = (Ppxlib_ast.Selected_ast.to_ocaml_mapper Expression (client_expr (ref `Top)))}
 
   let expr loc ~unsafe expr =
     let server_expr = server.AM.expr server expr in
@@ -892,14 +892,14 @@ module Shared = struct
     if unsafe then
       [%expr
           Eliom_shared.Value.create
-          [%e server_expr]
-          [%client.unsafe [%e client_expr]]
+          [%e (Ppxlib_ast.Selected_ast.Of_ocaml.copy_expression server_expr)]
+          [%client.unsafe [%e (Ppxlib_ast.Selected_ast.Of_ocaml.copy_expression client_expr)]]
       ]
     else
       [%expr
           Eliom_shared.Value.create
-          [%e server_expr]
-          [%client [%e client_expr]]
+          [%e (Ppxlib_ast.Selected_ast.Of_ocaml.copy_expression server_expr)]
+          [%client [%e (Ppxlib_ast.Selected_ast.Of_ocaml.copy_expression client_expr)]]
       ]
 end
 
@@ -914,7 +914,7 @@ module Make (Pass : Pass) = struct
          when is_annotation txt ["client"; "shared";
                                  "client.unsafe"; "shared.unsafe"] ->
       let side = get_extension expr in
-      Exp.extension @@ AM.extension_of_error @@ Location.errorf ~loc
+      Exp.extension @@ Ppxlib.Location.Error.to_extension @@ Ppxlib.Location.Error.createf ~loc
         "The syntax [%%%s ...] is not allowed inside client code."
         side
     | {pexp_desc = Pexp_extension ({txt},_)}
@@ -922,7 +922,7 @@ module Make (Pass : Pass) = struct
          when is_annotation txt ["client"; "shared";
                                  "client.unsafe"; "shared.unsafe"] ->
       let side = get_extension expr in
-      Exp.extension @@ AM.extension_of_error @@ Location.errorf ~loc
+      Exp.extension @@ Ppxlib.Location.Error.to_extension @@ Ppxlib.Location.Error.createf ~loc
         "The syntax [%%%s ...] can not be nested."
         side
 
@@ -931,8 +931,8 @@ module Make (Pass : Pass) = struct
       (`Server | `Shared)
       when is_annotation txt ["shared"; "shared.unsafe"] ->
       let unsafe = is_annotation txt ["shared.unsafe"] in
-      let e = Shared.expr loc ~unsafe side_val in
-      mapper.AM.expr mapper @@ exp_add_attrs (attr@attr') e
+      let e = Shared.expr loc ~unsafe (Ppxlib_ast.Selected_ast.To_ocaml.copy_expression side_val) in
+      Ppxlib_ast.Selected_ast.Of_ocaml.copy_expression @@ mapper.AM.expr mapper @@ Ppxlib_ast.Selected_ast.To_ocaml.copy_expression @@ exp_add_attrs (attr@attr') e
 
     (* [%client ... ] *)
     | {pexp_desc = Pexp_extension ({txt},PStr [{pstr_desc = Pstr_eval (side_val,attr)}])},
@@ -948,7 +948,7 @@ module Make (Pass : Pass) = struct
       let unsafe = is_annotation txt ["client.unsafe"] in
       in_context context (`Fragment (c, unsafe))
         (Pass.fragment ~loc ?typ ~context:c ~num ~id ~unsafe
-         % mapper.AM.expr mapper)
+         % (Ppxlib_ast.Selected_ast.of_ocaml_mapper Expression mapper.AM.expr mapper))
         (exp_add_attrs attr side_val)
 
     (* ~%( ... ) ] *)
@@ -967,7 +967,7 @@ module Make (Pass : Pass) = struct
           in_context context new_context
             (Pass.escape_inject ~loc ?ident ~context:new_context ~id
                ~unsafe:false %
-             mapper.AM.expr mapper)
+             (Ppxlib_ast.Selected_ast.of_ocaml_mapper Expression mapper.AM.expr mapper))
             inj
         | `Fragment (c, unsafe) ->
           let id = match ident with
@@ -977,7 +977,7 @@ module Make (Pass : Pass) = struct
           let new_context = `Escaped_value c in
           in_context context new_context
             (Pass.escape_inject ~loc ?ident ~context:new_context ~id ~unsafe %
-             mapper.AM.expr mapper)
+             (Ppxlib_ast.Selected_ast.of_ocaml_mapper Expression mapper.AM.expr mapper))
             inj
         | `Server ->
           Location.raise_errorf ~loc
@@ -986,22 +986,24 @@ module Make (Pass : Pass) = struct
           Location.raise_errorf ~loc
             "The syntax ~%% ... can not be nested."
       end
-    | _ -> AM.default_mapper.expr mapper expr
+    | _ -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Expression AM.default_mapper.expr mapper expr
 
-  let structure_item mapper str =
+  let structure mapper strl =
+    let str = List.hd strl in
     let loc = str.pstr_loc in
     match str.pstr_desc with
     | Pstr_extension (({txt=("server"|"shared"|"client")}, _), _) ->
       Location.raise_errorf ~loc
         "Sections are only allowed at toplevel."
-    | _ -> AM.default_mapper.structure_item mapper str
+    | _ -> (Ppxlib_ast.Selected_ast.of_ocaml_mapper Structure AM.default_mapper.structure mapper [str])
 
-  let signature_item mapper sig_ =
+  let signature mapper sigl_ =
+    let sig_ = List.hd sigl_ in
     let loc = sig_.psig_loc in
     match sig_.psig_desc with
     | Psig_extension (({txt=("server"|"shared"|"client")}, _), _) ->
       Location.raise_errorf ~loc "Sections are only allowed at toplevel."
-    | _ -> AM.default_mapper.signature_item mapper sig_
+    | _ -> Ppxlib_ast.Selected_ast.of_ocaml_mapper Signature AM.default_mapper.signature mapper [sig_]
 
   let eliom_mapper context =
     let context = ref (context :> Context.t) in
@@ -1009,11 +1011,11 @@ module Make (Pass : Pass) = struct
       with
         AM.
 
-        expr = eliom_expr context ;
+        expr = (fun m x -> Ppxlib_ast.Selected_ast.To_ocaml.copy_expression (eliom_expr context m (Ppxlib_ast.Selected_ast.Of_ocaml.copy_expression x)));
 
         (* Reject sections not at toplevel. *)
-        structure_item ;
-        signature_item ;
+        structure = (fun x y -> (Ppxlib_ast.Selected_ast.To_ocaml.copy_structure (structure x ((Ppxlib_ast.Selected_ast.Of_ocaml.copy_structure y)))));
+	signature = (fun x y -> (Ppxlib_ast.Selected_ast.To_ocaml.copy_signature (signature x ((Ppxlib_ast.Selected_ast.Of_ocaml.copy_signature y)))));
     }
 
 
@@ -1027,21 +1029,21 @@ module Make (Pass : Pass) = struct
     (* We must do this before any transformation on the structure. *)
     let no_fragment = Cannot_have_fragment.structure_item stri in
     let f = match context with
-      | `Server -> Pass.server_str no_fragment
-      | `Shared -> Pass.shared_str no_fragment
-      | `Client -> Pass.client_str
+      | `Server -> fun x -> Pass.server_str no_fragment (List.hd x)
+      | `Shared -> fun x -> Pass.shared_str no_fragment (List.hd x)
+      | `Client -> fun x -> Pass.client_str (List.hd x)
     in
     let m = eliom_mapper context in
-    f @@ m.AM.structure_item m stri
+    f @@ Ppxlib_ast.Selected_ast.of_ocaml_mapper Structure m.AM.structure m [stri]
 
   let dispatch_sig context _mapper sigi =
     let f = match context with
-      | `Server -> Pass.server_sig
-      | `Shared -> Pass.shared_sig
-      | `Client -> Pass.client_sig
+      | `Server -> fun x -> Pass.server_sig (List.hd x)
+      | `Shared -> fun x -> Pass.shared_sig (List.hd x)
+      | `Client -> fun x -> Pass.client_sig (List.hd x)
     in
     let m = eliom_mapper context in
-    f @@ m.AM.signature_item m sigi
+    f @@ Ppxlib_ast.Selected_ast.of_ocaml_mapper Signature m.AM.signature m [sigi]
 
   let toplevel_structure context mapper structs =
     let f pstr =
@@ -1058,7 +1060,7 @@ module Make (Pass : Pass) = struct
                                 "client.start";
                                 "server.start"] ->
         if strs <> [] then
-          [ Str.extension ~loc @@ AM.extension_of_error @@ Location.errorf ~loc
+          [ Str.extension ~loc @@ Ppxlib.Location.Error.to_extension @@ Ppxlib.Location.Error.createf ~loc
               "The %%%%%s extension doesn't accept arguments." txt ]
         else (
           maybe_reset_injected_idents !context ;
@@ -1105,7 +1107,7 @@ module Make (Pass : Pass) = struct
       | Psig_extension (({txt}, PStr strs), _)
         when is_annotation txt ["shared.start"; "client.start" ;"server.start"] ->
         if strs <> [] then
-          [ Sig.extension ~loc @@ AM.extension_of_error @@ Location.errorf ~loc
+          [ Sig.extension ~loc @@ Ppxlib.Location.Error.to_extension @@ Ppxlib.Location.Error.createf ~loc
               "The %%%%%s extension doesn't accept arguments." txt ]
         else ( context := Context.of_string txt ; [] )
       | _ ->
@@ -1117,8 +1119,8 @@ module Make (Pass : Pass) = struct
     let c = ref `Server in
     {AM.default_mapper
      with
-      structure = toplevel_structure c ;
-      signature = toplevel_signature c ;
+      structure = Ppxlib_ast.Selected_ast.to_ocaml_mapper Structure (toplevel_structure c) ;
+      signature = Ppxlib_ast.Selected_ast.to_ocaml_mapper Signature (toplevel_signature c) ;
     }
 
 end
