Index: lablgl-1.06/src/ml_gl.c
===================================================================
--- lablgl-1.06.orig/src/ml_gl.c
+++ lablgl-1.06/src/ml_gl.c
@@ -31,16 +31,16 @@
 
 void ml_raise_gl(const char *errmsg)
 {
-  static value * gl_exn = NULL;
+  static const value * gl_exn = NULL;
   if (gl_exn == NULL)
       gl_exn = caml_named_value("glerror");
-  raise_with_string(*gl_exn, (char*)errmsg);
+  caml_raise_with_string(*gl_exn, (char*)errmsg);
 }
 
 value copy_string_check (const char *str)
 {
     if (!str) ml_raise_gl("Null string");
-    return copy_string ((char*) str);
+    return caml_copy_string ((char*) str);
 }
 
 struct record {
@@ -61,7 +61,7 @@ CAMLprim value ml_gl_make_table (value u
     int i;
     unsigned int hash;
 
-    tag_table = stat_alloc (TABLE_SIZE * sizeof(struct record));
+    tag_table = caml_stat_alloc (TABLE_SIZE * sizeof(struct record));
     memset ((char *) tag_table, 0, TABLE_SIZE * sizeof(struct record));
     for (i = 0; i < TAG_NUMBER; i++) {
 	hash = (unsigned long) input_table[i].key % TABLE_SIZE;
@@ -268,7 +268,7 @@ CAMLprim value ml_glLight (value n, valu
     float params[4];
     int i;
 
-    if (Int_val(n) >= GL_MAX_LIGHTS) invalid_argument ("Gl.light");
+    if (Int_val(n) >= GL_MAX_LIGHTS) caml_invalid_argument ("Gl.light");
     switch (Field(param,0))
     {
     case MLTAG_ambient:
@@ -714,7 +714,7 @@ CAMLprim value ml_glCallLists (value ind
 
     switch (Field(indexes,0)) {
     case MLTAG_byte:
-	glCallLists (string_length(Field(indexes,1)),
+	glCallLists (caml_string_length(Field(indexes,1)),
 		     GL_UNSIGNED_BYTE,
 		     String_val(Field(indexes,1)));
 	break;
Index: lablgl-1.06/src/ml_glu.c
===================================================================
--- lablgl-1.06.orig/src/ml_glu.c
+++ lablgl-1.06/src/ml_glu.c
@@ -102,14 +102,14 @@ ML_3 (gluLookAt, Triple(arg1,Double_val,
 
 CAMLprim value ml_gluNewNurbsRenderer (void)
 {
-    value struc = alloc_final (2, ml_gluDeleteNurbsRenderer, 1, 32);
+    value struc = caml_alloc_final (2, ml_gluDeleteNurbsRenderer, 1, 32);
     Store_addr(struc, gluNewNurbsRenderer());
     return struc;
 }
 
 CAMLprim value ml_gluNewQuadric (void)
 {
-    value struc = alloc_final (2, ml_gluDeleteQuadric, 1, 32);
+    value struc = caml_alloc_final (2, ml_gluDeleteQuadric, 1, 32);
     Store_addr(struc, gluNewQuadric());
     return struc;
 }
@@ -241,10 +241,10 @@ CAMLprim value ml_gluProject (value obje
     gluProject (Double_val(Field(object,0)), Double_val(Field(object,1)),
 		Double_val(Field(object,2)), model, proj, viewport,
 		&winX, &winY, &winZ);
-    win0 = copy_double(winX);
-    win1 = copy_double(winY);
-    win2 = copy_double(winZ);
-    win = alloc_small(3, 0);
+    win0 = caml_copy_double(winX);
+    win1 = caml_copy_double(winY);
+    win2 = caml_copy_double(winZ);
+    win = caml_alloc_small(3, 0);
     Field(win,0) = win0;
     Field(win,1) = win1;
     Field(win,2) = win2;
@@ -296,10 +296,10 @@ CAMLprim value ml_gluUnProject (value wi
 		       Double_val(Field(win,2)), model, proj, viewport,
 		       &objX, &objY, &objZ);
     if (!ok) ml_raise_gl ("Glu.unproject : point out of window");
-    obj0 = copy_double(objX);
-    obj1 = copy_double(objY);
-    obj2 = copy_double(objZ);
-    obj = alloc_small (3, 0);
+    obj0 = caml_copy_double(objX);
+    obj1 = caml_copy_double(objY);
+    obj2 = caml_copy_double(objZ);
+    obj = caml_alloc_small (3, 0);
     Field(obj,0) = obj0;
     Field(obj,1) = obj1;
     Field(obj,2) = obj2;
Index: lablgl-1.06/src/ml_glutess.c
===================================================================
--- lablgl-1.06.orig/src/ml_glutess.c
+++ lablgl-1.06/src/ml_glutess.c
@@ -95,24 +95,24 @@ static void push_vert(value root, double
   CAMLparam1(root);
   CAMLlocal4(vert, xx, yy, zz);
   value cons;
-  xx = copy_double(x); yy = copy_double(y); zz = copy_double(z);
-  vert = alloc_tuple(3);
+  xx = caml_copy_double(x); yy = caml_copy_double(y); zz = caml_copy_double(z);
+  vert = caml_alloc_tuple(3);
   Field(vert,0) = xx;
   Field(vert,1) = yy;
   Field(vert,2) = zz;
-  cons = alloc_tuple(2);
+  cons = caml_alloc_tuple(2);
   Field(cons, 0) = vert;
   Field(cons, 1) = Field(root,0);
-  modify(&Field(root,0), cons);
+  caml_modify(&Field(root,0), cons);
   CAMLreturn0;
 }
 
 static void push_list()
 {
-  value cons = alloc_tuple(2);
+  value cons = caml_alloc_tuple(2);
   Field(cons,0) = Val_unit;
   Field(cons,1) = Field(*prim,kind);
-  modify(&Field(*prim,kind), cons);
+  caml_modify(&Field(*prim,kind), cons);
 }
 
 static void CALLBACK beginCallback(GLenum type)
@@ -195,7 +195,7 @@ CAMLprim value ml_gluTesselateAndReturn(
   CAMLparam1(contours);
   CAMLlocal1(res);
 
-  res = alloc_tuple(3);
+  res = caml_alloc_tuple(3);
   Field(res,0) = Field(res,1) = Field(res,2) = Val_unit;
   prim = &res;
 
Index: lablgl-1.06/src/ml_raw.c
===================================================================
--- lablgl-1.06.orig/src/ml_raw.c
+++ lablgl-1.06/src/ml_raw.c
@@ -90,7 +90,7 @@ CAMLprim value ml_raw_read (value raw, v
 
     check_size (raw,s+l-1,"Raw.read");
     if (l<0 || s<0) invalid_argument("Raw.read");
-    ret = alloc_shr (l, 0);
+    ret = caml_alloc_shr (l, 0);
     switch (Kind_raw(raw)) {
     case MLTAG_bitmap:
     case MLTAG_ubyte:
@@ -162,7 +162,7 @@ CAMLprim value ml_raw_read_string (value
 
     if (l<0 || s<0 || s+l > Int_val(Size_raw(raw)))
 	invalid_argument("Raw.read_string");
-    ret = alloc_string (l);
+    ret = caml_alloc_string (l);
     memcpy (String_val(ret), Bp_val(Addr_raw(raw))+s, l);
     CAMLreturn(ret);
 }
@@ -170,7 +170,7 @@ CAMLprim value ml_raw_read_string (value
 CAMLprim value ml_raw_write_string (value raw, value pos, value data)  /* ML */
 {
     int s = Int_val(pos);
-    int l = string_length(data);
+    int l = caml_string_length(data);
 
     if (s<0 || s+l > Int_val(Size_raw(raw)))
 	invalid_argument("Raw.write_string");
@@ -273,9 +273,9 @@ CAMLprim value ml_raw_get_float (value r
 
     check_size (raw,i,"Raw.get_float");
     if (Kind_raw(raw) == MLTAG_float)
-	return copy_double ((double) Float_raw(raw)[i]);
+	return caml_copy_double ((double) Float_raw(raw)[i]);
     else
-	return copy_double (Double_raw(raw)[i]);
+	return caml_copy_double (Double_raw(raw)[i]);
 }
 
 CAMLprim value ml_raw_read_float (value raw, value pos, value len)  /* ML */
@@ -286,7 +286,7 @@ CAMLprim value ml_raw_read_float (value
 
     check_size (raw,s+l-1,"Raw.read_float");
     if (l<0 || s<0) invalid_argument("Raw.read_float");
-    ret = alloc_shr (l*sizeof(double)/sizeof(value), Double_array_tag);
+    ret = caml_alloc_shr (l*sizeof(double)/sizeof(value), Double_array_tag);
     if (Kind_raw(raw) == MLTAG_float) {
 	float *float_raw = Float_raw(raw)+s;
 	for (i = 0; i < l; i++)
@@ -428,10 +428,10 @@ CAMLprim value ml_raw_get_long (value ra
     switch (Kind_raw(raw)) {
     case MLTAG_int:
     case MLTAG_uint:
-        return copy_nativeint (Int_raw(raw)[i]);
+        return caml_copy_nativeint (Int_raw(raw)[i]);
     case MLTAG_long:
     case MLTAG_ulong:
-        return copy_nativeint (Long_raw(raw)[i]);
+        return caml_copy_nativeint (Long_raw(raw)[i]);
     }
     return Val_unit;
 }
@@ -463,10 +463,10 @@ CAMLprim value ml_raw_alloc (value kind,
     int offset = 0;
 
     if (kind == MLTAG_double && sizeof(double) > sizeof(value)) {
-	data = alloc_shr ((size-1)/sizeof(value)+2, Abstract_tag);
+	data = caml_alloc_shr ((size-1)/sizeof(value)+2, Abstract_tag);
 	offset = (data % sizeof(double) ? sizeof(value) : 0);
-    } else data = alloc_shr ((size-1)/sizeof(value)+1, Abstract_tag);
-    raw = alloc_small (SIZE_RAW,0);
+    } else data = caml_alloc_shr ((size-1)/sizeof(value)+1, Abstract_tag);
+    raw = caml_alloc_small (SIZE_RAW,0);
     Kind_raw(raw) = kind;
     Size_raw(raw) = Val_int(size);
     Base_raw(raw) = data;
@@ -483,10 +483,10 @@ CAMLprim value ml_raw_alloc_static (valu
     int offset = 0;
 
     if (kind == MLTAG_double && sizeof(double) > sizeof(long)) {
-	data = stat_alloc (size+sizeof(long));
+	data = caml_stat_alloc (size+sizeof(long));
 	offset = ((long)data % sizeof(double) ? sizeof(value) : 0);
-    } else data = stat_alloc (size);
-    raw = alloc_small (SIZE_RAW, 0);
+    } else data = caml_stat_alloc (size);
+    raw = caml_alloc_small (SIZE_RAW, 0);
     Kind_raw(raw) = kind;
     Size_raw(raw) = Val_int(size);
     Base_raw(raw) = (value) data;
@@ -498,7 +498,7 @@ CAMLprim value ml_raw_alloc_static (valu
 CAMLprim value ml_raw_free_static (value raw)  /* ML */
 {
     if (Static_raw(raw) != Val_int(1)) invalid_argument ("Raw.free_static");
-    stat_free (Void_raw(raw));
+    caml_stat_free (Void_raw(raw));
     Base_raw(raw) = Val_unit;
     Size_raw(raw) = Val_unit;
     Offset_raw(raw) = Val_unit;
Index: lablgl-1.06/Togl/src/ml_togl.c
===================================================================
--- lablgl-1.06.orig/Togl/src/ml_togl.c
+++ lablgl-1.06/Togl/src/ml_togl.c
@@ -29,25 +29,25 @@ int TOGLenum_val(value tag)
     {
 #include "togl_tags.c"
     }
-    invalid_argument ("Unknown Togl tag");
+    caml_invalid_argument ("Unknown Togl tag");
 }
 
 /* Avoid direct use of stderr */
 void togl_prerr(const char *msg)
 {
-    value ml_msg = copy_string(msg);
-    value *prerr = caml_named_value("togl_prerr");
+    value ml_msg = caml_copy_string(msg);
+    const value *prerr = caml_named_value("togl_prerr");
     if (!prerr) caml_failwith(msg);
     caml_callback_exn(*prerr, ml_msg);
 }
 
 CAMLprim value ml_Togl_Init (value unit)  /* ML */
 {
-    value *interp = caml_named_value("cltclinterp");
+    const value *interp = caml_named_value("cltclinterp");
     Tcl_Interp *cltclinterp =
       (interp ? (Tcl_Interp *) Nativeint_val(Field(*interp,0)) : NULL);
     if (cltclinterp == NULL || Togl_Init(cltclinterp) == TCL_ERROR)
-      raise_with_string(*caml_named_value("tkerror"), "Togl_Init failed");
+      caml_raise_with_string(*caml_named_value("tkerror"), "Togl_Init failed");
     return Val_unit;
 }
 
@@ -71,14 +71,14 @@ enum {
      LastFunc
 };
 
-static value *callbacks = NULL;
+static const value *callbacks = NULL;
 
 #define CALLBACK(func) \
 static void callback_##func (struct Togl *togl) \
-{ callback (Field(*callbacks, func), Val_addr(togl)); }
+{ caml_callback (Field(*callbacks, func), Val_addr(togl)); }
 #define CALLBACK_const(func) \
 static void callback_##func (const struct Togl *togl) \
-{ callback (Field(*callbacks, func), Val_addr(togl)); }
+{ caml_callback (Field(*callbacks, func), Val_addr(togl)); }
 
 #define ENABLER(func) \
 CAMLprim value ml_Togl_##func (value unit) \
@@ -104,13 +104,13 @@ ENABLER (OverlayDisplayFunc)
 ML_0 (Togl_ResetDefaultCallbacks)
 ML_1 (Togl_PostRedisplay, Addr_val)
 ML_1 (Togl_SwapBuffers, Addr_val)
-ML_1_ (Togl_Ident, Addr_val, copy_string)
+ML_1_ (Togl_Ident, Addr_val, caml_copy_string)
 ML_1_ (Togl_Width, Addr_val, Val_int)
 ML_1_ (Togl_Height, Addr_val, Val_int)
 
 CAMLprim value ml_Togl_LoadBitmapFont (value togl, value font)  /* ML */
 {
-    char *fontname = NULL;
+    const char *fontname = NULL;
 
     if (Is_block(font)) fontname = String_val (Field(font,0));
     else switch (font) {
@@ -144,7 +144,7 @@ CAMLprim value ml_Togl_DumpToEpsFile (va
     if (Togl_DumpToEpsFile(Addr_val(togl), String_val(filename),
 			   Int_val(rgb), callback_RenderFunc)
 	== TCL_ERROR)
-        raise_with_string(*caml_named_value("tkerror"),
+        caml_raise_with_string(*caml_named_value("tkerror"),
                           "Dump to EPS file failed");
     return Val_unit;
 }
Index: lablgl-1.06/LablGlut/src/wrap_glut.c
===================================================================
--- lablgl-1.06.orig/LablGlut/src/wrap_glut.c
+++ lablgl-1.06/LablGlut/src/wrap_glut.c
@@ -35,9 +35,9 @@
 /* ML_0(glutMainLoop) */
 CAMLprim value ml_glutMainLoop (value unit) \
 { 
-  enter_blocking_section ();
+  caml_enter_blocking_section ();
   glutMainLoop (); 
-  leave_blocking_section ();
+  caml_leave_blocking_section ();
   return Val_unit; 
 }
 
@@ -79,7 +79,7 @@ ML_1(glutRemoveMenuItem, Int_val)
 ML_1(glutAttachMenu, Int_val)
 ML_1(glutDetachMenu, Int_val)
 ML_4(glutSetColor, Int_val, Float_val, Float_val, Float_val)
-ML_2_(glutGetColor, Int_val, Int_val, copy_double)
+ML_2_(glutGetColor, Int_val, Int_val, caml_copy_double)
 ML_1(glutCopyColormap, Int_val)
 ML_1_(glutGet, Int_val, Val_int)
 ML_1_(glutDeviceGet, Int_val, Val_int)
@@ -215,18 +215,18 @@ CAMLprim value bytecode_glutInitDisplayM
 #define CB_0(glut_func)                                                 \
   value glut_func##_value = 0;					\
   static void glut_func##_cb( void ) {					\
-    leave_blocking_section ();						\
-    callback(glut_func##_value, Val_unit);				\
-    enter_blocking_section ();						\
+    caml_leave_blocking_section ();						\
+    caml_callback(glut_func##_value, Val_unit);				\
+    caml_enter_blocking_section ();						\
   }						                        \
   REGISTER_CB(glut_func)
 
 #define CB_1(glut_func, type1, conv1)                                   \
   value glut_func##_value = 0;					\
   static void glut_func##_cb( type1 arg1 ) {		         	\
-    leave_blocking_section ();						\
-    callback(glut_func##_value, conv1(arg1));				\
-    enter_blocking_section ();						\
+    caml_leave_blocking_section ();						\
+    caml_callback(glut_func##_value, conv1(arg1));				\
+    caml_enter_blocking_section ();						\
   }                                                                     \
   REGISTER_CB(glut_func)
 
@@ -234,27 +234,27 @@ CAMLprim value bytecode_glutInitDisplayM
 #define CB_1_(glut_func, type1, conv1, conv)           		        \
   value glut_func##_value = 0;					\
   static void glut_func##_cb( type1 arg1 ) {		         	\
-    leave_blocking_section ();						\
-    callback(glut_func##_value, conv1(arg1));				\
-    enter_blocking_section ();						\
+    caml_leave_blocking_section ();						\
+    caml_callback(glut_func##_value, conv1(arg1));				\
+    caml_enter_blocking_section ();						\
   } 						                        \
   REGISTER_CB_(glut_func, conv)
 
 #define CB_2(glut_func, type1, conv1,  type2, conv2)                    \
   value glut_func##_value = 0;					\
   static void glut_func##_cb( type1 arg1, type2 arg2 ) {		\
-    leave_blocking_section ();                                          \
-    callback2(glut_func##_value, conv1(arg1), conv2(arg2));            \
-    enter_blocking_section ();                                          \
+    caml_leave_blocking_section ();                                          \
+    caml_callback2(glut_func##_value, conv1(arg1), conv2(arg2));            \
+    caml_enter_blocking_section ();                                          \
   }						                        \
   REGISTER_CB(glut_func)
 
 #define CB_3(glut_func, type1, conv1,  type2, conv2,  type3, conv3)     \
   value glut_func##_value = 0;					\
   static void glut_func##_cb( type1 arg1, type2 arg2, type3 arg3 ) {    \
-    leave_blocking_section ();                                          \
-    callback3(glut_func##_value, conv1(arg1), conv2(arg2), conv3(arg3)); \
-    enter_blocking_section ();                                          \
+    caml_leave_blocking_section ();                                          \
+    caml_callback3(glut_func##_value, conv1(arg1), conv2(arg2), conv3(arg3)); \
+    caml_enter_blocking_section ();                                          \
   }						                        \
   REGISTER_CB(glut_func)
 
@@ -263,13 +263,13 @@ CAMLprim value bytecode_glutInitDisplayM
   static void glut_func##_cb( type1 arg1, type2 arg2, type3 arg3, type4 arg4 )\
   {                                                                   \
     value args[4];                                                    \
-    leave_blocking_section ();                                        \
+    caml_leave_blocking_section ();                                        \
     args[0] = conv1(arg1);                                            \
     args[1] = conv2(arg2);                                            \
     args[2] = conv3(arg3);                                            \
     args[3] = conv4(arg4);                                            \
-    callbackN (glut_func##_value, 4, args);                          \
-    enter_blocking_section ();                                        \
+    caml_callbackN (glut_func##_value, 4, args);                          \
+    caml_enter_blocking_section ();                                        \
   }						                      \
   REGISTER_CB(glut_func)
 
@@ -279,13 +279,13 @@ CAMLprim value bytecode_glutInitDisplayM
   static void glut_func##_cb( type1 arg1, type2 arg2, type3 arg3, type4 arg4 )\
   {                                                                   \
     value args[4];                                                    \
-    leave_blocking_section ();                                        \
+    caml_leave_blocking_section ();                                        \
     args[0] = conv1(arg1);                                            \
     args[1] = conv2(arg2);                                            \
     args[2] = conv3(arg3);                                            \
     args[3] = conv4(arg4);                                            \
-    callbackN (glut_func##_value, 4, args);                          \
-    enter_blocking_section ();                                        \
+    caml_callbackN (glut_func##_value, 4, args);                          \
+    caml_enter_blocking_section ();                                        \
   }						                      \
   REGISTER__CB(glut_func, conv)
 
@@ -330,9 +330,9 @@ CAMLprim void init_glutTimerFunc_cb(valu
 
 static void glutTimerFunc_cb(int val)
 {
-  leave_blocking_section ();
-  callback (caml_glutTimerFunc_cb, (value) val);
-  enter_blocking_section ();
+  caml_leave_blocking_section ();
+  caml_callback (caml_glutTimerFunc_cb, (value) val);
+  caml_enter_blocking_section ();
 }
 
 CAMLprim value ml_glutTimerFunc(value millis, value timer_count) // set Timer callback
Index: lablgl-1.06/Togl/src/Togl/togl.c
===================================================================
--- lablgl-1.06.orig/Togl/src/Togl/togl.c
+++ lablgl-1.06/Togl/src/Togl/togl.c
@@ -96,7 +96,7 @@
 /* pointer to Tk_SetClassProcs function in the stub table */
 
 static void (*SetClassProcsPtr)
-        _ANSI_ARGS_((Tk_Window, Tk_ClassProcs *, ClientData));
+        _ANSI_ARGS_((Tk_Window, const Tk_ClassProcs *, ClientData));
 #endif
 
 /* 
