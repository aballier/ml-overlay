Index: facile-1.1.3/src/fcl_alldiff.ml
===================================================================
--- facile-1.1.3.orig/src/fcl_alldiff.ml
+++ facile-1.1.3/src/fcl_alldiff.ml
@@ -61,7 +61,7 @@ let new_diff (vars : Fd.t array) on_even
   let n = Array.length vars
       (* Une valeur en dehors des valeurs possibles *)
   and valout = Array.fold_left (fun acc v -> min acc (Fd.min v)) max_int vars - 1 in
-  let matchingl = Array.create n valout in (* var -> value : not backtrackable *)
+  let matchingl = Array.make n valout in (* var -> value : not backtrackable *)
   let matchingr = IntHashtbl.create n in(* value -> var : not backtrackable *)
 
   let name = "Permut.diff"
Index: facile-1.1.3/src/fcl_cstr.ml
===================================================================
--- facile-1.1.3.orig/src/fcl_cstr.ml
+++ facile-1.1.3/src/fcl_cstr.ml
@@ -46,11 +46,11 @@ let create ?(name = "anonymous") ?(nb_wa
   if nb_wakings < 1 then begin
     let msg = "Cstr.create: nb_wakings must be greater or equal to 1" in
     Fcl_debug.fatal_error msg end;
-  let solved = Array.create nb_wakings false
+  let solved = Array.make nb_wakings false
   and nb_solved = Fcl_stak.ref 0 in
   let update i =
     if update i then
-      if Pervasives.not solved.(i) then begin
+      if Bool.not solved.(i) then begin
        	Fcl_stak.set nb_solved (Fcl_stak.get nb_solved + 1);
        	array_set_true solved i
       end in
@@ -61,7 +61,7 @@ let create ?(name = "anonymous") ?(nb_wa
   update = update;
   delay = delay;
   solved = solved;
-  woken = Array.create nb_wakings false;
+  woken = Array.make nb_wakings false;
   nb_solved = nb_solved;
   fprint = (match fprint with Some f -> f | None -> fun c -> fprintf c "%s" name);
   init =
@@ -87,7 +87,7 @@ let solved c = c.solved
 
 let is_solved ct = Fcl_stak.get ct.nb_solved = Array.length ct.woken
 
-let queue = Array.create nb_priorities []
+let queue = Array.make nb_priorities []
 and already_in_wake = ref false
 and next_priority = ref nb_priorities
 
Index: facile-1.1.3/src/fcl_fdArray.ml
===================================================================
--- facile-1.1.3.orig/src/fcl_fdArray.ml
+++ facile-1.1.3/src/fcl_fdArray.ml
@@ -299,7 +299,7 @@ let get array index =
       let (mi, ma) =
       	Array.fold_left
 	  (fun (mi, ma) e ->
-	    (Pervasives.min mi (Fd.min e), Pervasives.max ma (Fd.max e)))
+	    (Stdlib.min mi (Fd.min e), Stdlib.max ma (Fd.max e)))
 	  (max_int, min_int) array in
       if mi = ma then Fd.int mi else
       let value = Fd.create (Fcl_domain.interval mi ma) in
Index: facile-1.1.3/src/fcl_gcc.ml
===================================================================
--- facile-1.1.3.orig/src/fcl_gcc.ml
+++ facile-1.1.3/src/fcl_gcc.ml
@@ -22,7 +22,7 @@ let int_min (a : int) b = if a < b then
 let tarjan nb_vertices successors root =
   let partition = ref []
   and stack = ref [] 
-  and dfn = Array.create nb_vertices 0
+  and dfn = Array.make nb_vertices 0
   and num = ref 0 in
 
   let push x = stack := x :: !stack
@@ -84,8 +84,8 @@ let new_gcc vars distribution index_of_v
   and n = Array.length distribution in
 
    (* Rep duale des domaines des vars.(i) *)
-  let bool_doms = Array.create_matrix k n false
-  and size_bool_doms = Array.create k (-1) in
+  let bool_doms = Array.make_matrix k n false
+  and size_bool_doms = Array.make k (-1) in
 
   let maj i =
     let bdi = bool_doms.(i) in
@@ -93,7 +93,7 @@ let new_gcc vars distribution index_of_v
     D.iter (fun vj -> bdi.(index_of_value vj) <- true) (domain_of vars.(i));
     size_bool_doms.(i) <- Fd.size vars.(i)
 
-  and flow = Array.create k none
+  and flow = Array.make k none
 
   and data_values =
     Array.map (fun (c, v) -> {value=v;card=c;nb_pred=0;tmp_pred=none}) distribution
@@ -176,7 +176,7 @@ let new_gcc vars distribution index_of_v
        [required_values] *)
 
     (* Le tableau des prédécesseurs *)
-    let preds = Array.create n [] in
+    let preds = Array.make n [] in
     let init_preds () =
       for i = 0 to k - 1 do
       	D.iter (fun v -> let j = index_of_value v in preds.(j) <- i :: preds.(j)) (domain_of vars.(i))
@@ -242,7 +242,7 @@ let new_gcc vars distribution index_of_v
       in (* target_in_domain *)
 
       let augment targets only_once =
-	let tmp_flow = Array.create k none in
+	let tmp_flow = Array.make k none in
 	for j = 0 to n - 1 do data_values.(j).tmp_pred <- none done;
 	let rec longer targets only_once = 
 	  Fcl_debug.call 'd' (fun f -> fprintf f "targets=%a\n" print_int_list targets);
@@ -382,7 +382,7 @@ let new_gcc vars distribution index_of_v
 
       Fcl_debug.call 'd' (fun f -> fprintf f "partition: "; List.iter (fun c -> fprintf f "["; List.iter (fun x -> fprintf f "%d " x) c; fprintf f "] ") partition; fprintf f "\n");
 
-      let components = Array.create (k+n) (-1) in
+      let components = Array.make (k+n) (-1) in
       let num = ref 0 in
       List.iter
 	(fun compo ->
@@ -415,7 +415,7 @@ let new_gcc vars distribution index_of_v
 
       (* Mise a jour des cardinaux *)
       (* Variables affectées *)
-      	let known_values = Array.create n 0 in
+      	let known_values = Array.make n 0 in
       	for i = 0 to k - 1 do
 	  match Fd.value vars.(i) with
 	    Val v ->
Index: facile-1.1.3/src/fcl_genesis.ml
===================================================================
--- facile-1.1.3.orig/src/fcl_genesis.ml
+++ facile-1.1.3/src/fcl_genesis.ml
@@ -25,7 +25,7 @@ let urbcsp var dom cstr nogood =
     invalid_arg "Nombre de nogoods"
   else
     (* Tous les couples de variables possibles (en cassant la symétrie) *)
-    let cstr_array = Array.create max_cstr (0, 0)
+    let cstr_array = Array.make max_cstr (0, 0)
     and i = ref 0 in
     for var1 = 0 to var - 2 do
       for var2 = var1 + 1 to var - 1 do
Index: facile-1.1.3/src/fcl_misc.ml
===================================================================
--- facile-1.1.3.orig/src/fcl_misc.ml
+++ facile-1.1.3/src/fcl_misc.ml
@@ -49,9 +49,9 @@ module Operators = struct
     assert (int_overflow (float x -. float y));
     x - y
 
-  let (+) = Pervasives.(+)
-  let (-) = Pervasives.(-)
-  let ( * ) = Pervasives.( * )
+  let (+) = Stdlib.(+)
+  let (-) = Stdlib.(-)
+  let ( * ) = Stdlib.( * )
 
   let (=+) x y = x := !x + y
   let (=+.) x y = x := !x +. y
Index: facile-1.1.3/src/fcl_nonlinear.ml
===================================================================
--- facile-1.1.3.orig/src/fcl_nonlinear.ml
+++ facile-1.1.3/src/fcl_nonlinear.ml
@@ -274,7 +274,7 @@ let min_max_of_div_for_div a b z =
 let min_max_of_remainder x y =
   let r_abs_max =
     let min_y, max_y = Fd.min_max y in
-    max (Pervasives.abs min_y) (Pervasives.abs max_y) - 1 in
+    max (Stdlib.abs min_y) (Stdlib.abs max_y) - 1 in
   if Fd.min x >= 0 then (0, r_abs_max)
   else if Fd.max x <= 0 then ((0 - r_abs_max), 0)
   else ((0 - r_abs_max), r_abs_max)
Index: facile-1.1.3/src/fcl_sorting.ml
===================================================================
--- facile-1.1.3.orig/src/fcl_sorting.ml
+++ facile-1.1.3/src/fcl_sorting.ml
@@ -27,7 +27,7 @@ type tree = F of int | N of int * tree *
 
 let inverse p =
   let n = Array.length p in
-  let inv = Array.create n (-1) in
+  let inv = Array.make n (-1) in
   Array.iteri (fun i x -> inv.(x) <- i) p;
   inv;;
 
@@ -90,7 +90,7 @@ let new_sort a p d =
     and b' i = max_a.(pi.(i)) in
 
 (* calcul de s (infI, infI') et s' (supI, supI') *)
-    let infI = Array.create n (-1) and supI = Array.create n (-1) in
+    let infI = Array.make n (-1) and supI = Array.make n (-1) in
 
     (* Calcul de s sans tri: On remarque que
         1) e, e' et b' sont déjà triés
@@ -135,7 +135,7 @@ let new_sort a p d =
 	
     compute_supI (n-1) (n-1) [];
 
-    let infI' = Array.create n (-1) and supI' = Array.create n (-1) in
+    let infI' = Array.make n (-1) and supI' = Array.make n (-1) in
     for i = 0 to n-1 do
       let pi_i = pi.(i) in
       if (infI.(i) > supI.(i)) then Fcl_stak.fail "Sorting: infI > supI";
@@ -214,8 +214,8 @@ let new_sort a p d =
 
     (* Version naive quadratique pour graphmin (30s vs 35s pour atfm) *)
     let graphmin inf sup =
-      let b = Array.create n false
-      and t = Array.create n (-1) in
+      let b = Array.make n false
+      and t = Array.make n (-1) in
       for i = 0 to n - 1 do
 	let j = ref inf.(i) in
 	while b.(!j) do incr j; if !j > sup.(i) then begin
@@ -265,7 +265,7 @@ let new_sort a p d =
 
       (* mapmin *)
     let classes decomp = 
-      let c = Array.create n [||] in
+      let c = Array.make n [||] in
       List.iter (fun sety -> let arrayy = Array.of_list sety in List.iter (fun y -> c.(y) <- arrayy) sety) decomp;
       c in
     let classes_s = classes decomps and classes_s' = classes decomps' in
@@ -355,7 +355,7 @@ let sortp a =
   else
     let inf, sup =
       Array.fold_left
-      	(fun (inf, sup) x -> Pervasives.min (Fd.min x) inf, Pervasives.max (Fd.max x) sup) (max_int, min_int) a in
+      	(fun (inf, sup) x -> Stdlib.min (Fd.min x) inf, Stdlib.max (Fd.max x) sup) (max_int, min_int) a in
     let d = Fd.array n inf sup
     and p = Fd.array n 0 (n - 1) in
     Fcl_cstr.post (cstr a ~p:(Some p) d);
@@ -368,7 +368,7 @@ let sort a =
   else
     let inf, sup =
       Array.fold_left
-      	(fun (inf, sup) x -> Pervasives.min (Fd.min x) inf, Pervasives.max (Fd.max x) sup) (max_int, min_int) a in
+      	(fun (inf, sup) x -> Stdlib.min (Fd.min x) inf, Stdlib.max (Fd.max x) sup) (max_int, min_int) a in
     let d = Fd.array n inf sup in
     Fcl_cstr.post (cstr a d);
     d;;
