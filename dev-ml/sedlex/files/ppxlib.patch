Index: sedlex-2.5/src/syntax/ppx_sedlex.ml
===================================================================
--- sedlex-2.5.orig/src/syntax/ppx_sedlex.ml
+++ sedlex-2.5/src/syntax/ppx_sedlex.ml
@@ -269,7 +269,7 @@ let rec repeat r = function
 let regexp_of_pattern env =
   let rec char_pair_op func name p tuple = (* Construct something like Sub(a,b) *)
     match tuple with
-      | Some {ppat_desc=Ppat_tuple (p0 :: p1 :: [])} ->
+      | Some (_,{ppat_desc=Ppat_tuple (p0 :: p1 :: [])}) ->
         begin match func (aux p0) (aux p1) with
         | Some r -> r
         | None ->
@@ -284,13 +284,13 @@ let regexp_of_pattern env =
         List.fold_left (fun r p -> Sedlex.seq r (aux p))
           (aux p)
           pl
-    | Ppat_construct ({txt = Lident "Star"}, Some p) ->
+    | Ppat_construct ({txt = Lident "Star"}, Some (_, p)) ->
         Sedlex.rep (aux p)
-    | Ppat_construct ({txt = Lident "Plus"}, Some p) ->
+    | Ppat_construct ({txt = Lident "Plus"}, Some (_, p)) ->
         Sedlex.plus (aux p)
     | Ppat_construct
         ({txt = Lident "Rep"},
-         Some {ppat_desc=Ppat_tuple[p0; {ppat_desc=Ppat_constant (i1 as i2)|Ppat_interval(i1, i2)}]}) ->
+         Some (_, {ppat_desc=Ppat_tuple[p0; {ppat_desc=Ppat_constant (i1 as i2)|Ppat_interval(i1, i2)}]})) ->
          begin match i1, i2 with
          | Pconst_integer(i1,_), Pconst_integer(i2,_) ->
              let i1 = int_of_string i1 in
@@ -302,11 +302,11 @@ let regexp_of_pattern env =
          end
     | Ppat_construct ({txt = Lident "Rep"}, _) ->
         err p.ppat_loc "the Rep operator takes 2 arguments"
-    | Ppat_construct ({txt = Lident "Opt"}, Some p) ->
+    | Ppat_construct ({txt = Lident "Opt"}, Some (_,p)) ->
         Sedlex.alt Sedlex.eps (aux p)
     | Ppat_construct ({txt = Lident "Compl"}, arg) ->
         begin match arg with
-        | Some p0 ->
+        | Some (_,p0) ->
             begin match Sedlex.compl (aux p0) with
             | Some r -> r
             | None ->
@@ -321,7 +321,7 @@ let regexp_of_pattern env =
         char_pair_op Sedlex.intersection "Intersect" p arg
     | Ppat_construct ({txt = Lident "Chars"}, arg) ->
         let const = match arg with
-          | Some {ppat_desc=Ppat_constant const} ->
+          | Some (_,{ppat_desc=Ppat_constant const}) ->
               Some (const)
           | _ -> None
         in
