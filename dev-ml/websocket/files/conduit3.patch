From 223f6e6187fa5c1b5c0538d781f351d05eff70e3 Mon Sep 17 00:00:00 2001
From: Calascibetta Romain <romain.calascibetta@gmail.com>
Date: Wed, 6 May 2020 18:51:53 +0200
Subject: [PATCH] Move to conduit.3.0.0

---
 async/dune                 |  2 +-
 async/wscat.ml             | 32 +++++++++++++++++-------
 core/websocket.ml          | 10 ++++----
 core/websocket.mli         |  5 ++--
 lwt/dune                   |  4 ++-
 lwt/websocket_lwt_unix.ml  | 51 +++++++++++++++++++++++++++-----------
 lwt/websocket_lwt_unix.mli |  9 +++----
 lwt/wscat.ml               | 39 +++++++++++++++++++++--------
 8 files changed, 102 insertions(+), 50 deletions(-)

diff --git a/async/dune b/async/dune
index d2a60fa..ddf34d6 100644
--- a/async/dune
+++ b/async/dune
@@ -10,4 +10,4 @@
  (public_name wscat-async)
  (package websocket-async)
  (modules wscat)
- (libraries uri.services logs-async-reporter websocket-async))
+ (libraries conduit-async.tcp conduit-async.ssl uri.services logs-async-reporter websocket-async))
diff --git a/async/wscat.ml b/async/wscat.ml
index 998962e..43cc64d 100644
--- a/async/wscat.ml
+++ b/async/wscat.ml
@@ -5,6 +5,8 @@ open Websocket_async
 let () =
   Logs.set_reporter (Logs_async_reporter.reporter ())
 
+let failwith fmt = Stdlib.Format.kasprintf Stdlib.failwith fmt
+
 let client protocol extensions uri =
   let host = Option.value_exn ~message:"no host in uri" Uri.(host uri) in
   let port =
@@ -36,18 +38,30 @@ let client protocol extensions uri =
   Unix.Addr_info.get ~service:(string_of_int port) ~host [] >>= function
   | [] -> failwithf "DNS resolution failed for %s" host ()
   | { ai_addr; _ } :: _ ->
-    let addr =
-      match scheme, ai_addr with
-      | _, ADDR_UNIX path -> `Unix_domain_socket path
+    let flow = match scheme, ai_addr with
+      | _, ADDR_UNIX path ->
+        Conduit_async.flow_of_endpoint ~key:Conduit_async_tcp.endpoint
+          (Conduit_async_tcp.Unix (`Unix path))
       | "https", ADDR_INET (h, p)
       | "wss", ADDR_INET (h, p) ->
-        let h = Ipaddr_unix.of_inet_addr h in
-        `OpenSSL (h, p, Conduit_async.V2.Ssl.Config.create ())
+        let tcp_edn = Conduit_async_tcp.Inet (`Inet (h, p)) in
+        let ctx = Conduit_async_ssl.context () in
+        Conduit_async.flow_of_endpoint ~key:Conduit_async_ssl.TCP.endpoint
+          (ctx, tcp_edn)
       | _, ADDR_INET (h, p) ->
-        let h = Ipaddr_unix.of_inet_addr h in
-        `TCP (h, p)
-    in
-    Conduit_async.V2.connect addr >>= tcp_fun
+        Conduit_async.flow_of_endpoint ~key:Conduit_async_tcp.endpoint
+          (Conduit_async_tcp.Inet (`Inet (h, p))) in
+    flow >>= function
+    | Error err -> failwith "%a" Conduit_async.pp_error err
+    | Ok flow -> match Conduit_async.is flow Conduit_async_tcp.protocol,
+                       Conduit_async.is flow Conduit_async_ssl.TCP.protocol with
+      | Some flow, None ->
+        let open Conduit_async_tcp in
+        tcp_fun (Protocol.reader flow, Protocol.writer flow)
+      | None, Some { Conduit_async_ssl.reader; writer; _ } ->
+        tcp_fun (reader, writer)
+      | _ ->
+        Conduit_async.reader_and_writer_of_flow flow >>= tcp_fun
 
 let src = Logs.Src.create "websocket.wscat"
 
diff --git a/core/websocket.ml b/core/websocket.ml
index 6b39305..230021c 100644
--- a/core/websocket.ml
+++ b/core/websocket.ml
@@ -177,14 +177,14 @@ module type S = sig
 
     val create :
       ?read_buf:Buffer.t -> ?write_buf:Buffer.t ->
-      Cohttp.Request.t -> Conduit.endp -> IO.ic -> IO.oc -> t
+      Cohttp.Request.t -> IO.conn -> IO.ic -> IO.oc -> t
 
     val make_standard : t -> t
     val send : t -> Frame.t -> unit IO.t
     val send_multiple : t -> Frame.t list -> unit IO.t
     val recv : t -> Frame.t IO.t
     val http_request : t -> Cohttp.Request.t
-    val source : t -> Conduit.endp
+    val source : t -> IO.conn
   end
 end
 
@@ -316,7 +316,7 @@ module Make (IO : Cohttp.S.IO) = struct
   module Connected_client = struct
     type t = {
       buffer: Buffer.t;
-      endp: Conduit.endp;
+      endp: IO.conn;
       ic: Request.IO.ic;
       oc: Request.IO.oc;
       http_request: Cohttp.Request.t;
@@ -329,11 +329,11 @@ module Make (IO : Cohttp.S.IO) = struct
     let create
         ?read_buf
         ?(write_buf=Buffer.create 128)
-        http_request endp ic oc =
+        http_request flow ic oc =
       let read_frame = make_read_frame ?buf:read_buf ~mode:Server ic oc in
       {
         buffer = write_buf;
-        endp;
+        endp= flow;
         ic;
         oc;
         http_request;
diff --git a/core/websocket.mli b/core/websocket.mli
index e3a4900..a61ac41 100644
--- a/core/websocket.mli
+++ b/core/websocket.mli
@@ -105,14 +105,14 @@ module type S = sig
 
     val create :
       ?read_buf:Buffer.t -> ?write_buf:Buffer.t ->
-      Cohttp.Request.t -> Conduit.endp -> IO.ic -> IO.oc -> t
+      Cohttp.Request.t -> IO.conn -> IO.ic -> IO.oc -> t
 
     val make_standard : t -> t
     val send : t -> Frame.t -> unit IO.t
     val send_multiple : t -> Frame.t list -> unit IO.t
     val recv : t -> Frame.t IO.t
     val http_request : t -> Cohttp.Request.t
-    val source : t -> Conduit.endp
+    val source : t -> IO.conn
   end
 end
 
@@ -120,4 +120,5 @@ module Make (IO : Cohttp.S.IO) : S
   with type 'a IO.t = 'a IO.t
    and type IO.ic = IO.ic
    and type IO.oc = IO.oc
+   and type IO.conn = IO.conn
 
diff --git a/lwt/dune b/lwt/dune
index 1738bcd..2cc5c56 100644
--- a/lwt/dune
+++ b/lwt/dune
@@ -3,7 +3,9 @@
  (public_name websocket-lwt-unix)
  (modules websocket_lwt_unix)
  (optional)
- (libraries lwt_log cohttp-lwt-unix websocket))
+ (libraries
+   conduit-lwt-unix.tcp
+   lwt_log cohttp-lwt-unix websocket))
 
 (library
  (name websocket_cohttp_lwt)
diff --git a/lwt/websocket_lwt_unix.ml b/lwt/websocket_lwt_unix.ml
index 070032e..ac26034 100644
--- a/lwt/websocket_lwt_unix.ml
+++ b/lwt/websocket_lwt_unix.ml
@@ -26,10 +26,12 @@ let http_error msg = Lwt.fail (HTTP_Error msg)
 let protocol_error msg = Lwt.fail (Protocol_error msg)
 
 let set_tcp_nodelay flow =
-  let open Conduit_lwt_unix in
-  match flow with
-  | TCP { fd; _ } -> Lwt_unix.setsockopt fd Lwt_unix.TCP_NODELAY true
-  | _ -> ()
+  let open Conduit_lwt_unix_tcp in
+  match Conduit_lwt.is flow protocol with
+  | Some flow ->
+    let fd = Protocol.file_descr flow in
+    Lwt_unix.setsockopt fd Lwt_unix.TCP_NODELAY true
+  | None -> ()
 
 let fail_unless eq f =
   if not eq then f () else Lwt.return_unit
@@ -37,11 +39,17 @@ let fail_unless eq f =
 let fail_if eq f =
   if eq then f () else Lwt.return_unit
 
+let failf fmt = Format.kasprintf (fun err -> Lwt.fail (Failure err)) fmt
+
+let result_fold ~ok ~error = function
+  | Ok x -> ok x
+  | Error err -> error err
+
 let with_connection
     ?(extra_headers = Cohttp.Header.init ())
     ?(random_string=Websocket.Rng.init ())
-    ?(ctx=Conduit_lwt_unix.default_ctx)
-    client uri =
+    ~resolvers
+    uri =
   let connect () =
     let module C = Cohttp in
     let nonce = Base64.encode_exn (random_string 16) in
@@ -51,7 +59,12 @@ let with_connection
          "Sec-WebSocket-Key"     , nonce;
          "Sec-WebSocket-Version" , "13"] in
     let req = C.Request.make ~headers uri in
-    Conduit_lwt_unix.connect ~ctx client >>= fun (flow, ic, oc) ->
+    let domain_name = match Uri.host uri with
+      | Some v -> Domain_name.(host_exn (of_string_exn v))
+      | None -> invalid_arg "Uri requires a host" in
+    Conduit_lwt_unix.flow resolvers domain_name >>=
+    result_fold ~ok:Lwt.return ~error:(failf "%a" Conduit_lwt_unix.pp_error) >>= fun flow ->
+    let ic, oc = Conduit_lwt_unix.io_of_flow flow in
     set_tcp_nodelay flow;
     let drain_handshake () =
       Request.write (fun _writer -> Lwt.return ()) req oc >>= fun () ->
@@ -112,10 +125,10 @@ let write_failed_response oc =
 
 let establish_server
     ?read_buf ?write_buf
-    ?timeout ?stop
+    ?timeout:_ ?stop
     ?(on_exn=(fun exn -> !Lwt.async_exception_hook exn))
     ?(check_request=check_origin_with_host)
-    ?(ctx=Conduit_lwt_unix.default_ctx) ~mode react =
+    ~key service cfg react =
   let module C = Cohttp in
   let server_fun flow ic oc =
     (Request.read ic >>= function
@@ -154,10 +167,18 @@ let establish_server
       Connected_client.create ?read_buf ?write_buf request flow ic oc in
     react client
   in
-  Conduit_lwt_unix.serve ~on_exn ?timeout ?stop ~ctx ~mode begin fun flow ic oc ->
-    set_tcp_nodelay flow;
-    server_fun (Conduit_lwt_unix.endp_of_flow flow) ic oc
-  end
+  let handler protocol flow =
+    let flow = Conduit_lwt_unix.abstract protocol flow in
+    Lwt.catch
+      (fun () ->
+         let ic, oc = Conduit_lwt_unix.io_of_flow flow in
+         set_tcp_nodelay flow ;
+         server_fun flow ic oc)
+      (fun exn -> on_exn exn ; Lwt.return ()) in
+  let stop = match stop with Some stop -> stop | None -> let never, _ = Lwt.wait () in never in
+  let cond, run = Conduit_lwt_unix.serve_with_handler ~key ~service ~handler cfg in
+  Lwt.pick [ (stop >>= fun () -> Lwt_condition.broadcast cond () ; Lwt.return ())
+           ; run ]
 
 let mk_frame_stream recv =
   let f () =
@@ -171,10 +192,10 @@ let mk_frame_stream recv =
 let establish_standard_server
     ?read_buf ?write_buf
     ?timeout ?stop
-    ?on_exn ?check_request ?(ctx=Conduit_lwt_unix.default_ctx) ~mode react =
+    ?on_exn ?check_request ~key service cfg react =
   let f client =
     react (Connected_client.make_standard client)
   in
   establish_server ?read_buf ?write_buf ?timeout ?stop
-    ?on_exn ?check_request ~ctx ~mode f
+    ?on_exn ?check_request ~key service cfg f
 
diff --git a/lwt/websocket_lwt_unix.mli b/lwt/websocket_lwt_unix.mli
index b5b9a11..f8c054f 100644
--- a/lwt/websocket_lwt_unix.mli
+++ b/lwt/websocket_lwt_unix.mli
@@ -29,8 +29,7 @@ include Websocket.S
 val with_connection :
   ?extra_headers:Cohttp.Header.t ->
   ?random_string:(int -> string) ->
-  ?ctx:Conduit_lwt_unix.ctx ->
-  Conduit_lwt_unix.client ->
+  resolvers:Conduit.resolvers ->
   Uri.t ->
   ((unit -> Websocket.Frame.t Lwt.t) * (Websocket.Frame.t -> unit Lwt.t)) Lwt.t
 
@@ -41,8 +40,7 @@ val establish_server :
   ?stop:unit Lwt.t ->
   ?on_exn:(exn -> unit) ->
   ?check_request:(Cohttp.Request.t -> bool) ->
-  ?ctx:Conduit_lwt_unix.ctx ->
-  mode:Conduit_lwt_unix.server ->
+  key:'cfg Conduit_lwt.key -> ('master * 'flow) Conduit_lwt.Witness.service -> 'cfg ->
   (Connected_client.t -> unit Lwt.t) ->
   unit Lwt.t
 (** [exception_handler] defaults to [Lwt.async_exception_hook]
@@ -64,8 +62,7 @@ val establish_standard_server :
   ?stop:unit Lwt.t ->
   ?on_exn:(exn -> unit) ->
   ?check_request:(Cohttp.Request.t -> bool) ->
-  ?ctx:Conduit_lwt_unix.ctx ->
-  mode:Conduit_lwt_unix.server ->
+  key:'cfg Conduit_lwt.key -> ('master * 'flow) Conduit_lwt.Witness.service -> 'cfg ->
   (Connected_client.t -> unit Lwt.t) ->
   unit Lwt.t
 (** [establish_standard_server] is like {!establish_server} but with
diff --git a/lwt/wscat.ml b/lwt/wscat.ml
index 56c1026..56fd5a5 100644
--- a/lwt/wscat.ml
+++ b/lwt/wscat.ml
@@ -4,11 +4,14 @@ open Websocket_lwt_unix
 
 let section = Lwt_log.Section.make "wscat"
 
+let resolvers =
+  Conduit_lwt.register_resolver ~key:Conduit_lwt_unix_tcp.endpoint
+    (Conduit_lwt_unix_tcp.resolv_conf ~port:80)
+    Conduit.empty
+
 let client uri =
   let open Frame in
-  Resolver_lwt.resolve_uri ~uri Resolver_lwt_unix.system >>= fun endp ->
-  Conduit_lwt_unix.(endp_to_client ~ctx:default_ctx endp >>= fun client ->
-                    with_connection ~ctx:default_ctx client uri) >>= fun (recv, send) ->
+  with_connection ~resolvers uri >>= fun (recv, send) ->
   let react fr =
     match fr.opcode with
     | Opcode.Ping -> send @@ Frame.create ~opcode:Opcode.Pong ()
@@ -67,6 +70,14 @@ let react client client_id =
       Connected_client.send client Frame.(close 1002)
   in inner ()
 
+let option_map f = function
+  | Some x -> Some (f x)
+  | None -> None
+
+let option_fold ~none = function
+  | Some x -> x
+  | None -> none
+
 let server uri =
   let id = ref (-1) in
   let echo_fun client =
@@ -79,14 +90,20 @@ let server uri =
          Lwt_log.error_f ~section ~exn "Client %d error" id >>= fun () ->
          Lwt.fail exn)
   in
-  Resolver_lwt.resolve_uri ~uri Resolver_lwt_unix.system >>= fun endp ->
-  let open Conduit_lwt_unix in
-  let endp_str = endp |> Conduit.sexp_of_endp |> Sexplib.Sexp.to_string_hum in
-  Lwt_log.info_f ~section "endp = %s" endp_str >>= fun () ->
-  endp_to_server ~ctx:default_ctx endp >>= fun server ->
-  let server_str = server |> sexp_of_server |> Sexplib.Sexp.to_string_hum in
-  Lwt_log.info_f ~section "server = %s" server_str >>= fun () ->
-  establish_server ~ctx:default_ctx ~mode:server echo_fun
+  let sockaddr = match option_map Unix.gethostbyname (Uri.host uri), Uri.port uri with
+    | Some { Unix.h_addr_list; _ }, port when Array.length h_addr_list > 0 ->
+      Unix.ADDR_INET (h_addr_list.(0), option_fold ~none:80 port)
+    | Some _, port | None, port ->
+      Unix.ADDR_INET (Unix.inet_addr_loopback, option_fold ~none:80 port)
+    | exception _ ->
+      let port = Uri.port uri in
+      Unix.ADDR_INET (Unix.inet_addr_loopback, option_fold ~none:80 port) in
+  let key = Conduit_lwt_unix_tcp.configuration in
+  let service = Conduit_lwt_unix_tcp.service in
+  let cfg =
+    { Conduit_lwt_unix_tcp.sockaddr
+    ; capacity= 40 } in
+  establish_server ~key service cfg echo_fun
 
 let main is_server uri =
   if !is_server then (ignore @@ server uri; fst @@ Lwt.wait ())
