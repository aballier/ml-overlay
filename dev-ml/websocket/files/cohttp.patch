From 8945c430899a17c8e85514726c53ea8a92228fb8 Mon Sep 17 00:00:00 2001
From: Vincent Bernardoff <vb@luminar.eu.org>
Date: Sun, 27 Apr 2025 10:35:06 +0200
Subject: [PATCH] support latest cohttp

---
 core/websocket.ml           | 37 ++++++++++++++-------------------
 core/websocket.mli          | 16 ++++++---------
 dune-project                |  4 ++--
 lwt/websocket_cohttp_lwt.ml |  4 ++--
 lwt/websocket_lwt_unix.ml   | 33 +++++++++++++++--------------
 lwt/websocket_lwt_unix.mli  | 41 +++++++++++++++++--------------------
 test/upgrade_connection.ml  | 14 +++++--------
 websocket.opam              |  4 ++--
 8 files changed, 67 insertions(+), 86 deletions(-)

diff --git a/core/websocket.ml b/core/websocket.ml
index 86ec131..91b34dd 100644
--- a/core/websocket.ml
+++ b/core/websocket.ml
@@ -180,7 +180,6 @@ module type S = sig
       ?read_buf:Buffer.t ->
       ?write_buf:Buffer.t ->
       Cohttp.Request.t ->
-      Conduit.endp ->
       IO.ic ->
       IO.oc ->
       t
@@ -190,7 +189,6 @@ module type S = sig
     val send_multiple : t -> Frame.t list -> unit IO.t
     val recv : t -> Frame.t IO.t
     val http_request : t -> Cohttp.Request.t
-    val source : t -> Conduit.endp
   end
 end
 
@@ -296,11 +294,11 @@ module Make (IO : Cohttp.S.IO) = struct
       proto_error "control frame too big"
     else
       (if frame_masked then (
-       Buffer.clear buf;
-       read_exactly ic 4 buf >>= function
-       | None -> proto_error "could not read mask"
-       | Some mask -> return mask)
-      else return String.empty)
+         Buffer.clear buf;
+         read_exactly ic 4 buf >>= function
+         | None -> proto_error "could not read mask"
+         | Some mask -> return mask)
+       else return String.empty)
       >>= fun mask ->
       if payload_len = 0 then
         return @@ Frame.create ~opcode ~extension ~final ()
@@ -321,13 +319,12 @@ module Make (IO : Cohttp.S.IO) = struct
     | None -> raise End_of_file
     | Some hdr -> read_frame ic oc buf mode hdr
 
-  module Request = Cohttp.Request.Make (IO)
-  module Response = Cohttp.Response.Make (IO)
+  module Request = Cohttp.Request.Private.Make (IO)
+  module Response = Cohttp.Response.Private.Make (IO)
 
   module Connected_client = struct
     type t = {
       buffer : Buffer.t;
-      endp : Conduit.endp;
       ic : Request.IO.ic;
       oc : Request.IO.oc;
       http_request : Cohttp.Request.t;
@@ -335,14 +332,10 @@ module Make (IO : Cohttp.S.IO) = struct
       read_frame : unit -> Frame.t IO.t;
     }
 
-    let source { endp; _ } = endp
-
-    let create ?read_buf ?(write_buf = Buffer.create 128) http_request endp ic
-        oc =
+    let create ?read_buf ?(write_buf = Buffer.create 128) http_request ic oc =
       let read_frame = make_read_frame ?buf:read_buf ~mode:Server ic oc in
       {
         buffer = write_buf;
-        endp;
         ic;
         oc;
         http_request;
@@ -369,13 +362,13 @@ module Make (IO : Cohttp.S.IO) = struct
       | Frame.Opcode.Close ->
           (* Immediately echo and pass this last message to the user *)
           (if String.length fr.Frame.content >= 2 then
-           send t
-           @@ Frame.create ~opcode:Frame.Opcode.Close
-                ~content:
-                  String.(
-                    sub ~start:0 ~stop:2 fr.Frame.content |> Sub.to_string)
-                ()
-          else send t @@ Frame.close 1000)
+             send t
+             @@ Frame.create ~opcode:Frame.Opcode.Close
+                  ~content:
+                    String.(
+                      sub ~start:0 ~stop:2 fr.Frame.content |> Sub.to_string)
+                  ()
+           else send t @@ Frame.close 1000)
           >>= fun () -> return fr
       | _ -> return fr
 
diff --git a/core/websocket.mli b/core/websocket.mli
index 04f1689..e6137f9 100644
--- a/core/websocket.mli
+++ b/core/websocket.mli
@@ -23,8 +23,8 @@ exception Protocol_error of string
 
 module Rng : sig
   val init : unit -> int -> string
-  (** [init ?state ()] is a function that returns a string of random
-      bytes of length equal to its argument. *)
+  (** [init ?state ()] is a function that returns a string of random bytes of
+      length equal to its argument. *)
 end
 
 module Frame : sig
@@ -66,12 +66,10 @@ end
 
 val check_origin :
   ?origin_mandatory:bool -> hosts:string list -> Cohttp.Request.t -> bool
-(** [check_origin ~hosts req] will return [true] if the origin header
-    exists and matches one of the provided hostnames.
-    If origin header is not present, return [not origin_mandatory].
-    Default value of [origin_mandatory] is false.
-    If origin header is present but does not contain a hostname,
-    return [false].
+(** [check_origin ~hosts req] will return [true] if the origin header exists and
+    matches one of the provided hostnames. If origin header is not present,
+    return [not origin_mandatory]. Default value of [origin_mandatory] is false.
+    If origin header is present but does not contain a hostname, return [false].
     Hostnames in [hosts] are (ascii-)lowercased when compared.*)
 
 val check_origin_with_host : Cohttp.Request.t -> bool
@@ -109,7 +107,6 @@ module type S = sig
       ?read_buf:Buffer.t ->
       ?write_buf:Buffer.t ->
       Cohttp.Request.t ->
-      Conduit.endp ->
       IO.ic ->
       IO.oc ->
       t
@@ -119,7 +116,6 @@ module type S = sig
     val send_multiple : t -> Frame.t list -> unit IO.t
     val recv : t -> Frame.t IO.t
     val http_request : t -> Cohttp.Request.t
-    val source : t -> Conduit.endp
   end
 end
 
diff --git a/lwt/websocket_cohttp_lwt.ml b/lwt/websocket_cohttp_lwt.ml
index 434ae3e..0b2b45e 100644
--- a/lwt/websocket_cohttp_lwt.ml
+++ b/lwt/websocket_cohttp_lwt.ml
@@ -18,7 +18,7 @@
 
 open Lwt.Infix
 open Websocket
-module Lwt_IO = Websocket.Make (Cohttp_lwt_unix.IO)
+module Lwt_IO = Websocket.Make (Cohttp_lwt_unix.Private.IO)
 
 let send_frames stream oc =
   let buf = Buffer.create 128 in
@@ -53,7 +53,7 @@ let upgrade_connection request incoming_handler =
   in
   let resp =
     Cohttp.Response.make ~status:`Switching_protocols
-      ~encoding:Cohttp.Transfer.Unknown ~headers:response_headers ~flush:true ()
+      ~encoding:Cohttp.Transfer.Unknown ~headers:response_headers ()
   in
   let frames_out_stream, frames_out_fn = Lwt_stream.create () in
   let f ic oc =
diff --git a/lwt/websocket_lwt_unix.ml b/lwt/websocket_lwt_unix.ml
index 4080aa7..0e4fa00 100644
--- a/lwt/websocket_lwt_unix.ml
+++ b/lwt/websocket_lwt_unix.ml
@@ -18,7 +18,8 @@
 open Astring
 open Websocket
 open Lwt.Infix
-include Websocket.Make (Cohttp_lwt_unix.IO)
+open Cohttp_lwt_unix.Private
+include Websocket.Make (IO)
 
 let section = Lwt_log.Section.make "websocket_lwt_unix"
 
@@ -37,11 +38,11 @@ let fail_unless eq f = if not eq then f () else Lwt.return_unit
 let fail_if eq f = if eq then f () else Lwt.return_unit
 
 let drain_handshake req ic oc nonce =
-  Request.write (fun _writer -> Lwt.return ()) req oc >>= fun () ->
-  (Response.read ic >>= function
-   | `Ok r -> Lwt.return r
-   | `Eof -> Lwt.fail End_of_file
-   | `Invalid s -> Lwt.fail @@ Failure s)
+  Request.write ~flush:true (fun _writer -> Lwt.return ()) req oc >>= fun () ->
+  ( Response.read ic >>= function
+    | `Ok r -> Lwt.return r
+    | `Eof -> Lwt.fail End_of_file
+    | `Invalid s -> Lwt.fail @@ Failure s )
   >>= fun response ->
   let open Cohttp in
   let status = Response.status response in
@@ -82,10 +83,11 @@ let connect ctx client url nonce extra_headers =
   in
   let req = Request.make ~headers url in
   Conduit_lwt_unix.connect ~ctx client >>= fun (flow, ic, oc) ->
+  let ic = Input_channel.create ic in
   set_tcp_nodelay flow;
   Lwt.catch
     (fun () -> drain_handshake req ic oc nonce)
-    (fun exn -> Lwt_io.close ic >>= fun () -> Lwt.fail exn)
+    (fun exn -> Input_channel.close ic >>= fun () -> Lwt.fail exn)
   >>= fun () ->
   Lwt_log.info_f ~section "Connected to %s" (Uri.to_string url) >>= fun () ->
   Lwt.return (ic, oc)
@@ -108,7 +110,7 @@ let connect ?(extra_headers = Cohttp.Header.init ())
   let read_frame = make_read_frame ?buf ~mode:(Client random_string) ic oc in
   let read_frame () =
     Lwt.catch read_frame (fun exn ->
-        Lwt.async (fun () -> Lwt_io.close ic);
+        Lwt.async (fun () -> Input_channel.close ic);
         Lwt.fail exn)
   in
   let buf = Buffer.create 128 in
@@ -135,7 +137,7 @@ let write_failed_response oc =
   let open Response in
   write ~flush:true (fun writer -> write_body writer body) response oc
 
-let server_fun ?read_buf ?write_buf check_request flow ic oc react =
+let server_fun ?read_buf ?write_buf check_request ic oc react =
   let read = function
     | `Ok r -> Lwt.return r
     | `Eof ->
@@ -179,10 +181,9 @@ let server_fun ?read_buf ?write_buf check_request flow ic oc react =
     Cohttp.Response.make ~status:`Switching_protocols
       ~encoding:Cohttp.Transfer.Unknown ~headers:response_headers ()
   in
-  Response.write (fun _writer -> Lwt.return_unit) response oc >>= fun () ->
-  let client =
-    Connected_client.create ?read_buf ?write_buf request flow ic oc
-  in
+  Response.write ~flush:true (fun _writer -> Lwt.return_unit) response oc
+  >>= fun () ->
+  let client = Connected_client.create ?read_buf ?write_buf request ic oc in
   react client
 
 let establish_server ?read_buf ?write_buf ?timeout ?stop
@@ -191,12 +192,10 @@ let establish_server ?read_buf ?write_buf ?timeout ?stop
     ?(ctx = Lazy.force Conduit_lwt_unix.default_ctx) ~mode react =
   let module C = Cohttp in
   Conduit_lwt_unix.serve ~on_exn ?timeout ?stop ~ctx ~mode (fun flow ic oc ->
+      let ic = Input_channel.create ic in
       set_tcp_nodelay flow;
       Lwt.catch
-        (fun () ->
-          server_fun ?read_buf ?write_buf check_request
-            (Conduit_lwt_unix.endp_of_flow flow)
-            ic oc react)
+        (fun () -> server_fun ?read_buf ?write_buf check_request ic oc react)
         (function
           | End_of_file -> Lwt.return_unit
           | HTTP_Error _ -> Lwt.return_unit
diff --git a/lwt/websocket_lwt_unix.mli b/lwt/websocket_lwt_unix.mli
index 2ad2736..76236c2 100644
--- a/lwt/websocket_lwt_unix.mli
+++ b/lwt/websocket_lwt_unix.mli
@@ -15,17 +15,16 @@
  *
  *)
 
-(** This module implements a websocket client and server library in
-    the spirit of the otherwise similar TCP functions of the [Lwt_io]
-    module. The websocket protocol add message framing in addition of
-    simple TCP communication, and this library implement framing and
-    unframing of messages. *)
+(** This module implements a websocket client and server library in the spirit
+    of the otherwise similar TCP functions of the [Lwt_io] module. The websocket
+    protocol add message framing in addition of simple TCP communication, and
+    this library implement framing and unframing of messages. *)
 
 include
   Websocket.S
-    with type 'a IO.t := 'a Cohttp_lwt_unix.IO.t
-     and type IO.ic := Cohttp_lwt_unix.IO.ic
-     and type IO.oc := Cohttp_lwt_unix.IO.oc
+    with type 'a IO.t := 'a Cohttp_lwt_unix.Private.IO.t
+     and type IO.ic := Cohttp_lwt_unix.Private.IO.ic
+     and type IO.oc := Cohttp_lwt_unix.Private.IO.oc
 
 type conn
 
@@ -33,9 +32,8 @@ val read : conn -> Websocket.Frame.t Lwt.t
 val write : conn -> Websocket.Frame.t -> unit Lwt.t
 
 val close_transport : conn -> unit Lwt.t
-(** [close_transport conn] closes the underlying transport. You have
-   to manage the connection state (ie. send close frames, etc.)
-   yourself. *)
+(** [close_transport conn] closes the underlying transport. You have to manage
+    the connection state (ie. send close frames, etc.) yourself. *)
 
 val connect :
   ?extra_headers:Cohttp.Header.t ->
@@ -57,18 +55,18 @@ val establish_server :
   mode:Conduit_lwt_unix.server ->
   (Connected_client.t -> unit Lwt.t) ->
   unit Lwt.t
-(** [exception_handler] defaults to [Lwt.async_exception_hook]
-    [check_request] is called before the http upgrade. If it returns false, the
-    websocket connection is aborted with a "403 Forbidden" response. It
-    defaults to {!check_origin_with_host} *)
+(** [exception_handler] defaults to [Lwt.async_exception_hook] [check_request]
+    is called before the http upgrade. If it returns false, the websocket
+    connection is aborted with a "403 Forbidden" response. It defaults to
+    {!check_origin_with_host} *)
 
 (** {2 Convenience functions} *)
 
 val mk_frame_stream :
   (unit -> Websocket.Frame.t Lwt.t) -> Websocket.Frame.t Lwt_stream.t
-(** [mk_frame_stream f] is a stream build from [f], which role is to
-    receive the frames that will form the stream. When a Close frame
-    is received, the stream will be closed. *)
+(** [mk_frame_stream f] is a stream build from [f], which role is to receive the
+    frames that will form the stream. When a Close frame is received, the stream
+    will be closed. *)
 
 val establish_standard_server :
   ?read_buf:Buffer.t ->
@@ -81,11 +79,10 @@ val establish_standard_server :
   mode:Conduit_lwt_unix.server ->
   (Connected_client.t -> unit Lwt.t) ->
   unit Lwt.t
-(** [establish_standard_server] is like {!establish_server} but with
-    automatic handling of some frames:
+(** [establish_standard_server] is like {!establish_server} but with automatic
+    handling of some frames:
 
     - A Pong frame is sent in response to a Ping frame,
     - a Close frame is sent in response to a Close frame.
 
-    All frames are then passed to the frame handling function.
-*)
+    All frames are then passed to the frame handling function. *)
diff --git a/test/upgrade_connection.ml b/test/upgrade_connection.ml
index 701f05d..23658c0 100644
--- a/test/upgrade_connection.ml
+++ b/test/upgrade_connection.ml
@@ -3,6 +3,8 @@ open Websocket
 
 let src = Logs.Src.create "websocket.upgrade_connection"
 
+module Lo = (val Logs.src_log src : Logs.LOG)
+
 let lwt_reporter () =
   let buf_fmt ~like =
     let b = Buffer.create 512 in
@@ -33,11 +35,9 @@ let lwt_reporter () =
   in
   { Logs.report }
 
-let handler (_, conn) req body =
+let handler (_, _conn) req body =
   let open Frame in
-  Logs_lwt.app ~src (fun m ->
-      m "[CONN] %a" Sexplib.Sexp.pp (Cohttp.Connection.sexp_of_t conn))
-  >>= fun _ ->
+  Lo.app (fun m -> m "[CONN]");
   let uri = Cohttp.Request.uri req in
   match Uri.path uri with
   | "/" ->
@@ -98,11 +98,7 @@ let handler (_, conn) req body =
       >|= fun resp -> `Response resp
 
 let start_server ?tls port =
-  let conn_closed (_, c) =
-    Logs.app ~src (fun m ->
-        m "[SERV] connection %a closed" Sexplib.Sexp.pp
-          (Cohttp.Connection.sexp_of_t c))
-  in
+  let conn_closed (_, _c) = Lo.app (fun m -> m "[SERV] connection closed") in
   Logs_lwt.app ~src (fun m -> m "[SERV] Listening for HTTP on port %d" port)
   >>= fun () ->
   let mode =
