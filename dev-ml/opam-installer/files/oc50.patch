Index: opam-full-2.1.3/src_ext/cmdliner/src/cmdliner_base.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/cmdliner/src/cmdliner_base.ml
+++ opam-full-2.1.3/src_ext/cmdliner/src/cmdliner_base.ml
@@ -280,7 +280,7 @@ let t4 ?(sep = ',') (pa0, pr0) (pa1, pr1
   in
   parse, print
 
-let env_bool_parse s = match String.lowercase s with
+let env_bool_parse s = match String.lowercase_ascii s with
 | "" | "false" | "no" | "n" | "0" -> `Ok false
 | "true" | "yes" | "y" | "1" -> `Ok true
 | s -> `Error (err_invalid_val s (alts_str ["true"; "yes"; "false"; "no" ]))
Index: opam-full-2.1.3/src_ext/cmdliner/src/cmdliner_docgen.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/cmdliner/src/cmdliner_docgen.ml
+++ opam-full-2.1.3/src_ext/cmdliner/src/cmdliner_docgen.ml
@@ -170,7 +170,7 @@ let arg_docs ~errs ~subst ~buf ei =
     | true, true -> (* optional by name *)
         let key names =
           let k = List.hd (List.sort rev_compare names) in
-          let k = String.lowercase k in
+          let k = String.lowercase_ascii k in
           if k.[1] = '-' then String.sub k 1 (String.length k - 1) else k
         in
         compare
@@ -178,8 +178,8 @@ let arg_docs ~errs ~subst ~buf ei =
           (key @@ Cmdliner_info.arg_opt_names a1)
     | false, false -> (* positional by variable *)
         compare
-          (String.lowercase @@ Cmdliner_info.arg_docv a0)
-          (String.lowercase @@ Cmdliner_info.arg_docv a1)
+          (String.lowercase_ascii @@ Cmdliner_info.arg_docv a0)
+          (String.lowercase_ascii @@ Cmdliner_info.arg_docv a1)
     | true, false -> -1 (* positional first *)
     | false, true -> 1  (* optional after *)
   in
@@ -310,8 +310,8 @@ let text ~errs ei =
 
 let title ei =
   let main = Cmdliner_info.eval_main ei in
-  let exec = String.capitalize (Cmdliner_info.term_name main) in
-  let name = String.uppercase (invocation ~sep:'-' ei) in
+  let exec = String.capitalize_ascii (Cmdliner_info.term_name main) in
+  let name = String.uppercase_ascii (invocation ~sep:'-' ei) in
   let center_header = esc @@ strf "%s Manual" exec in
   let left_footer =
     let version = match Cmdliner_info.term_version main with
Index: opam-full-2.1.3/src_ext/cudf/cudf.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/cudf/cudf.ml
+++ opam-full-2.1.3/src_ext/cudf/cudf.ml
@@ -73,10 +73,10 @@ let (=%) pkg1 pkg2 =
   pkg1.package = pkg2.package && pkg1.version = pkg2.version
 
 let (<%) pkg1 pkg2 =
-  Pervasives.compare (pkg1.package, pkg1.version) (pkg2.package, pkg2.version)
+  Stdlib.compare (pkg1.package, pkg1.version) (pkg2.package, pkg2.version)
 
 let (>%) pkg1 pkg2 =
-  Pervasives.compare (pkg2.package, pkg2.version) (pkg1.package, pkg1.version)
+  Stdlib.compare (pkg2.package, pkg2.version) (pkg1.package, pkg1.version)
 
 let default_preamble = {
   preamble_id = "" ;
Index: opam-full-2.1.3/src_ext/cudf/cudf_types_pp.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/cudf/cudf_types_pp.ml
+++ opam-full-2.1.3/src_ext/cudf/cudf_types_pp.ml
@@ -101,10 +101,10 @@ let parse_value ty s =
 
 (** Pretty printers *)
 
-let string_of_int = Pervasives.string_of_int
+let string_of_int = Stdlib.string_of_int
 let string_of_posint = string_of_int
 let string_of_nat = string_of_int
-let string_of_bool = Pervasives.string_of_bool
+let string_of_bool = Stdlib.string_of_bool
 
 let string_of_keep = function
     `Keep_version -> "version"
Index: opam-full-2.1.3/src_ext/dose3/algo/defaultgraphs.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/dose3/algo/defaultgraphs.ml
+++ opam-full-2.1.3/src_ext/dose3/algo/defaultgraphs.ml
@@ -92,7 +92,7 @@ module SyntacticDependencyGraph = struct
       |Or i1, Or i2 -> (i1 - i2)
       |Pkg {value = p1}, Pkg {value = p2} -> CudfAdd.compare p1 p2
       |Set s1, Set s2 -> CudfAdd.Cudf_set.compare s1 s2
-      |_, _ -> Pervasives.compare x y (* XXX *)
+      |_, _ -> Stdlib.compare x y (* XXX *)
     let hash = function
       |Pkg {value} -> CudfAdd.hash value 
       |Set s -> Hashtbl.hash s (* XXX Can fail ! *)
@@ -115,7 +115,7 @@ module SyntacticDependencyGraph = struct
       |Condensed
     type t = s ref
 
-    let compare x y = Pervasives.compare !x !y
+    let compare x y = Stdlib.compare !x !y
     let hash x = Hashtbl.hash !x
     let equal x y = ((compare x y) = 0)
     let default = ref (Conflict ("",None))
@@ -318,7 +318,7 @@ module ActionGraph = struct
     let compare x y = match x,y with
       |Install p1, Install p2 -> CudfAdd.compare p1 p2
       |Remove p1, Remove p2 -> CudfAdd.compare p1 p2
-      |x,y -> Pervasives.compare x y
+      |x,y -> Stdlib.compare x y
 
     let hash = function
       |Install p -> Hashtbl.hash (1,p.Cudf.package,p.Cudf.version)
@@ -720,7 +720,7 @@ module IntPkgGraph = struct
 
   module PkgV = struct
     type t = int
-    let compare = Pervasives.compare
+    let compare = Stdlib.compare
     let hash i = i
     let equal = (=)
   end
Index: opam-full-2.1.3/src_ext/dose3/algo/diagnostic.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/dose3/algo/diagnostic.ml
+++ opam-full-2.1.3/src_ext/dose3/algo/diagnostic.ml
@@ -305,7 +305,7 @@ let cmp_ne x y =
         else c
   in
   let cmp (n1,sl1,pl1) (n2,sl2,pl2) =
-    let c = Pervasives.compare n1 n2 in
+    let c = Stdlib.compare n1 n2 in
     if c = 0 then
       let c1 = cmplist sl1 sl2 in
       if c1 = 0 then cmplist pl1 pl2
@@ -506,7 +506,7 @@ let print_error ?(condense=false) ?(mini
       type t = int
       type edge = G.E.t
       let weight e = match G.E.label e with { contents = PkgE.Conflict _ } -> 1000 | _ -> 0
-      let compare = Pervasives.compare
+      let compare = Stdlib.compare
       let add = (+)
       let zero = 0
     end) 
Index: opam-full-2.1.3/src_ext/dose3/algo/strongconflicts.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/dose3/algo/strongconflicts.ml
+++ opam-full-2.1.3/src_ext/dose3/algo/strongconflicts.ml
@@ -24,7 +24,7 @@ type cfl_type = Explicit | Conjunctive |
 
 module CflE = struct
   type t = Cudf.package * Cudf.package * cfl_type
-  let compare = Pervasives.compare
+  let compare = Stdlib.compare
   let default = (Cudf.default_package, Cudf.default_package, Other [])
 end
 
Index: opam-full-2.1.3/src_ext/dose3/algo/strongconflicts_int.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/dose3/algo/strongconflicts_int.ml
+++ opam-full-2.1.3/src_ext/dose3/algo/strongconflicts_int.ml
@@ -26,7 +26,7 @@ type cfl_type = Explicit | Conjunctive |
 
 module CflE = struct
   type t = int * int * cfl_type
-  let compare = Pervasives.compare
+  let compare = Stdlib.compare
   let default = (0, 0, Other []) 
 end
 
@@ -43,7 +43,7 @@ let sctimer = Util.Timer.create "Strongc
 
 (* open Depsolver_int *)
 
-module S = Set.Make (struct type t = int let compare = Pervasives.compare end)
+module S = Set.Make (struct type t = int let compare = Stdlib.compare end)
 
 let swap (p,q) = (min p q, max p q) ;;
 let to_set l = List.fold_right S.add l S.empty ;;
Index: opam-full-2.1.3/src_ext/dose3/common/util.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/dose3/common/util.ml
+++ opam-full-2.1.3/src_ext/dose3/common/util.ml
@@ -87,20 +87,20 @@ module MakeMessages(X : sig val label :
   let clean label =
     try 
       let s = Filename.chop_extension (Filename.basename label) in
-      String.capitalize s
+      String.capitalize_ascii s
     with Invalid_argument _ -> label
 
   let create ?(enabled=false) label =
     if label = "" then begin
       Printf.eprintf "Logging Label Empty\n";
-      Pervasives.exit (64);
+      Stdlib.exit (64);
     end else if not (Hashtbl.mem messages label) then
       let t = { label = clean label ; enabled = enabled } in
       Hashtbl.add messages (clean label) t ;
       t
     else begin
       Printf.eprintf "The label (%s) %s already exists\n" X.label label;
-      Pervasives.exit (64);
+      Stdlib.exit (64);
     end
 
   let eprintf ?(raw=false) t fmt =
@@ -160,7 +160,7 @@ module Logging(X : sig val label : strin
     let l = Printf.sprintf "Fatal error in module %s: " X.label in
     Printf.kprintf (fun s ->
       Printf.eprintf "%s\n %s\n%!" l s; 
-      Pervasives.exit (64)
+      Stdlib.exit (64)
     ) fmt
 end
 
Index: opam-full-2.1.3/src_ext/dune-local/src/dune_lang/t.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/dune-local/src/dune_lang/t.ml
+++ opam-full-2.1.3/src_ext/dune-local/src/dune_lang/t.ml
@@ -78,30 +78,30 @@ module Deprecated = struct
     Format.pp_set_mark_tags ppf true;
     let ofuncs = Format.pp_get_formatter_out_functions ppf () in
     let tfuncs =
-      (Format.pp_get_formatter_tag_functions ppf () [@warning "-3"])
+      (Format.pp_get_formatter_stag_functions ppf () [@warning "-3"])
     in
-    Format.pp_set_formatter_tag_functions ppf
+    Format.pp_set_formatter_stag_functions ppf
       { tfuncs with
-        mark_open_tag =
+        mark_open_stag =
           (function
-          | "atom" ->
+          | Format.String_tag "atom" ->
             state := In_atom :: !state;
             ""
-          | "makefile-action" ->
+          | Format.String_tag "makefile-action" ->
             state := In_makefile_action :: !state;
             ""
-          | "makefile-stuff" ->
+          | Format.String_tag "makefile-stuff" ->
             state := In_makefile_stuff :: !state;
             ""
-          | s -> tfuncs.mark_open_tag s)
-      ; mark_close_tag =
+          | s -> tfuncs.mark_open_stag s)
+      ; mark_close_stag =
           (function
-          | "atom"
-          | "makefile-action"
-          | "makefile-stuff" ->
+          | Format.String_tag "atom"
+          | Format.String_tag "makefile-action"
+          | Format.String_tag "makefile-stuff" ->
             state := List.tl !state;
             ""
-          | s -> tfuncs.mark_close_tag s)
+          | s -> tfuncs.mark_close_stag s)
       } [@warning "-3"];
     Format.pp_set_formatter_out_functions ppf
       { ofuncs with
Index: opam-full-2.1.3/src_ext/dune-local/src/dune_rules/colors.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/dune-local/src/dune_rules/colors.ml
+++ opam-full-2.1.3/src_ext/dune-local/src/dune_rules/colors.ml
@@ -33,7 +33,8 @@ module Style = struct
     | _ -> None
 end
 
-let mark_open_tag s =
+let mark_open_stag = function
+  | Format.String_tag s -> (
   match Style.of_string s with
   | Some style -> Ansi_color.Style.escape_sequence (Style.to_styles style)
   | None ->
@@ -41,15 +42,17 @@ let mark_open_tag s =
       s
     else
       ""
+      )
+      | _ -> ""
 
 let setup_err_formatter_colors () =
   let open Format in
   if Lazy.force Ansi_color.stderr_supports_color then
     List.iter [ err_formatter; Dune_util.Report_error.ppf ] ~f:(fun ppf ->
-        let funcs = (pp_get_formatter_tag_functions ppf () [@warning "-3"]) in
+        let funcs = (pp_get_formatter_stag_functions ppf () [@warning "-3"]) in
         pp_set_mark_tags ppf true;
-        pp_set_formatter_tag_functions ppf
+        pp_set_formatter_stag_functions ppf
           { funcs with
-            mark_close_tag = (fun _ -> Ansi_color.Style.escape_sequence [])
-          ; mark_open_tag
+            mark_close_stag = (fun _ -> Ansi_color.Style.escape_sequence [])
+          ; mark_open_stag
           } [@warning "-3"])
Index: opam-full-2.1.3/src_ext/extlib/src/IO.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/extlib/src/IO.ml
+++ opam-full-2.1.3/src_ext/extlib/src/IO.ml
@@ -310,19 +310,19 @@ let input_channel ch =
         End_of_file -> raise No_more_input
     );
     in_input = (fun s p l ->
-      let n = Pervasives.input ch s p l in
+      let n = Stdlib.input ch s p l in
       if n = 0 then raise No_more_input;
       n
     );
-    in_close = (fun () -> Pervasives.close_in ch);
+    in_close = (fun () -> Stdlib.close_in ch);
   }
 
 let output_channel ch =
   {
     out_write = (fun c -> output_char ch c);
-    out_output = (fun s p l -> Pervasives.output ch s p l; l);
-    out_close = (fun () -> Pervasives.close_out ch);
-    out_flush = (fun () -> Pervasives.flush ch);
+    out_output = (fun s p l -> Stdlib.output ch s p l; l);
+    out_close = (fun () -> Stdlib.close_out ch);
+    out_flush = (fun () -> Stdlib.flush ch);
   }
 
 let input_enum e =
Index: opam-full-2.1.3/src_ext/extlib/src/extArray.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/extlib/src/extArray.ml
+++ opam-full-2.1.3/src_ext/extlib/src/extArray.ml
@@ -192,4 +192,11 @@ let create_float = make_float
 #endif
 #endif
 
+
+#if OCAML >= 500
+external create : int -> 'a -> 'a array = "caml_make_vect"
+let create_matrix = make_matrix
+let make_float = create_float
+#endif
+
 end
Index: opam-full-2.1.3/src_ext/extlib/src/extList.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/extlib/src/extList.ml
+++ opam-full-2.1.3/src_ext/extlib/src/extList.ml
@@ -380,7 +380,7 @@ let combine l1 l2 =
   loop dummy l1 l2;
   dummy.tl
 
-let sort ?(cmp=Pervasives.compare) = List.sort cmp
+let sort ?(cmp=Stdlib.compare) = List.sort cmp
 
 #if OCAML < 406
 let rec init size f =
Index: opam-full-2.1.3/src_ext/extlib/src/extString.ml
===================================================================
--- opam-full-2.1.3.orig/src_ext/extlib/src/extString.ml
+++ opam-full-2.1.3/src_ext/extlib/src/extString.ml
@@ -328,4 +328,17 @@ let rindex_from_opt s i c =
 
 #endif
 
+#if OCAML >= 500
+let create = Bytes.create
+let set = Bytes.set
+let unsafe_set = Bytes.unsafe_set
+let copy x = Bytes.unsafe_to_string (Bytes.copy (Bytes.unsafe_of_string x))
+let fill = Bytes.fill
+let unsafe_fill = Bytes.unsafe_fill
+let uppercase = uppercase_ascii
+let lowercase = lowercase_ascii
+let capitalize = capitalize_ascii
+let uncapitalize = uncapitalize_ascii
+#endif
+
 end
Index: opam-full-2.1.3/src_ext/ocamlgraph/src/dot_lexer.mll
===================================================================
--- opam-full-2.1.3.orig/src_ext/ocamlgraph/src/dot_lexer.mll
+++ opam-full-2.1.3/src_ext/ocamlgraph/src/dot_lexer.mll
@@ -35,7 +35,7 @@
 	"node", NODE;
 	"edge", EDGE;
       ];
-    fun s -> let s = String.lowercase s in Hashtbl.find h s
+    fun s -> let s = String.lowercase_ascii s in Hashtbl.find h s
 
 }
 
