From eb9980f9abc9577b7fc1e93d5dff01dc6a3f5bf2 Mon Sep 17 00:00:00 2001
From: public-release <as-public-release@janestreet.com>
Date: Tue, 13 Aug 2024 20:53:44 +0100
Subject: [PATCH] v0.17~preview.129.36+325

---
 lib/cinaps/tuple_helpers.ml |  29 +-
 lib/src/atomic.ml           |  20 +-
 lib/src/atomic.mli          |  16 +-
 lib/src/basic_diffs.ml      |  36 +-
 lib/src/basic_diffs.mli     |   4 +-
 lib/src/diff_intf.ml        |   8 +-
 lib/src/diffable.ml         |   2 +
 lib/src/dune                |   2 +-
 lib/src/map_diff.ml         |  32 +-
 lib/src/map_diff.mli        |  18 +-
 lib/src/of_diffable.ml      |  28 ++
 lib/src/of_diffable.mli     |  10 +
 lib/src/set_diff.ml         |  19 +-
 lib/src/set_diff.mli        |  12 +-
 lib/src/tuples.ml           | 222 ++++++-----
 lib/src/tuples.mli          | 747 ++++++++++++++++++------------------
 src/diff.ml                 |   4 +-
 src/diff_atomic.ml          |   7 +-
 src/diff_constr.ml          |   4 +-
 src/diff_record.ml          | 101 ++---
 src/diff_variant.ml         | 126 +++---
 src/ppx_diff.ml             |  15 +-
 src/type_kind.ml            |  38 +-
 24 files changed, 802 insertions(+), 704 deletions(-)
 create mode 100644 lib/src/of_diffable.ml
 create mode 100644 lib/src/of_diffable.mli

diff --git a/lib/cinaps/tuple_helpers.ml b/lib/cinaps/tuple_helpers.ml
index 7d97532..bb34ba8 100644
--- a/lib/cinaps/tuple_helpers.ml
+++ b/lib/cinaps/tuple_helpers.ml
@@ -9,7 +9,7 @@ let nums ~size = List.init size ~f:(( + ) 1)
 let var i = sprintf "'a%i" i
 let diff_var i = var i ^ "_diff"
 let create_arg i = sprintf "t%i" i
-let gel i = sprintf "%s Gel.t" (var i)
+let gel i = sprintf "%s Modes.Global.t" (var i)
 let vars ~size = List.map (nums ~size) ~f:var
 let diff_vars ~size = vars ~size @ List.map (nums ~size) ~f:diff_var
 
@@ -152,7 +152,7 @@ let tuple_ml size =
   let of_list = sprintf "of_list%i_exn" in
   let maybe_gel s i ~gel =
     let base = sprintf "%s%i" s i in
-    if not gel then base else sprintf "{Gel.g = %s}" base
+    if not gel then base else sprintf "{global = %s}" base
   in
   let from = maybe_gel "from_" in
   let to_ = maybe_gel "to_" in
@@ -203,7 +203,8 @@ let tuple_ml size =
                | Some d -> %{variant_name i} d :: diff
             |}]
       in
-      [%string {|let diff =
+      [%string
+        {|let diff =
             %{maybe_add i}
           in
         |}]
@@ -231,29 +232,31 @@ let tuple_ml size =
          |}]
   in
   let function_implementations ~local =
-    let maybe_local = if local then "local_ " else "" in
+    let maybe_exclave = if local then "exclave_ " else "" in
     let gel = local in
     [%string
       {|
         let get %{List.map nums ~f:get |> String.concat ~sep:" "} ~from ~to_ =
+          exclave_
           if Base.phys_equal from to_
-          then local_ Optional_diff.none
+          then Optional_diff.none
           else (
             let %{List.map nums ~f:(from ~gel) |> String.concat ~sep:", "} = from in
             let %{List.map nums ~f:(to_ ~gel) |> String.concat ~sep:", "} = to_ in
             let diff = [] in
             %{List.rev_map nums ~f:get_diff |> String.concat ~sep:""}
             match diff with
-            | [] -> local_ Optional_diff.none
-            | _ :: _ -> local_ Optional_diff.return diff)
+            | [] -> Optional_diff.none
+            | _ :: _ -> Optional_diff.return diff)
 
 
         let apply_exn %{List.map nums ~f:apply |> String.concat ~sep:" "} derived_on diff =
+          %{maybe_exclave}
           let %{List.map nums ~f:(derived_on ~gel) |> String.concat ~sep:", "} = derived_on in
           %{List.map nums ~f:apply_diff |> String.concat  ~sep:""}
           match diff with
-          | [] -> %{maybe_local}%{List.map nums ~f:(t ~gel) |> String.concat ~sep:","}
-          | _ :: _ -> %{maybe_local}failwith "BUG: non-empty diff after apply"
+          | [] -> %{List.map nums ~f:(t ~gel) |> String.concat ~sep:","}
+          | _ :: _ -> failwith "BUG: non-empty diff after apply"
         |}]
   in
   let of_list_and_apply_functions =
@@ -263,18 +266,18 @@ let tuple_ml size =
   let of_list_function =
     [%string
       {|
-      let of_list_exn %{of_list_and_apply_functions} ts =
+      let of_list_exn %{of_list_and_apply_functions} ts = exclave_
         match ts with
-        | [] -> local_ Optional_diff.none
+        | [] -> Optional_diff.none
         | _ :: _ ->
           match List.concat ts |> List.stable_sort ~compare:compare_rank with
-          | [] -> local_ Optional_diff.return []
+          | [] -> Optional_diff.return []
           | _ :: _ as diff ->
             let rec loop acc = function
               | [] -> List.rev acc
                %{List.map nums ~f:diff_of_list |> String.concat ~sep:"\n"}
             in
-            local_ Optional_diff.return (loop [] diff)
+            Optional_diff.return (loop [] diff)
          |}]
   in
   let create_arg_of_variant i =
diff --git a/lib/src/atomic.ml b/lib/src/atomic.ml
index 99a6b29..d6b16c8 100644
--- a/lib/src/atomic.ml
+++ b/lib/src/atomic.ml
@@ -1,8 +1,8 @@
 open Base
 
 module Make_base_diff (M : sig
-  type t [@@deriving equal]
-end) =
+    type t [@@deriving equal]
+  end) =
 struct
   let[@inline] get ~from ~to_ =
     if phys_equal from to_ || M.equal from to_
@@ -19,8 +19,8 @@ struct
 end
 
 module Make_diff_plain (M : sig
-  type t [@@deriving equal]
-end) =
+    type t [@@deriving equal]
+  end) =
 struct
   type derived_on = M.t
   type t = M.t [@@deriving equal]
@@ -29,8 +29,8 @@ struct
 end
 
 module Make_diff (M : sig
-  type t [@@deriving sexp, bin_io, equal]
-end) =
+    type t [@@deriving sexp, bin_io, equal]
+  end) =
 struct
   type derived_on = M.t
   type t = M.t [@@deriving sexp, bin_io, equal]
@@ -39,15 +39,15 @@ struct
 end
 
 module Make_plain (M : sig
-  type t [@@deriving equal]
-end) =
+    type t [@@deriving equal]
+  end) =
 struct
   module Diff = Make_diff_plain (M)
 end
 
 module Make (M : sig
-  type t [@@deriving equal, sexp, bin_io]
-end) =
+    type t [@@deriving equal, sexp, bin_io]
+  end) =
 struct
   module Diff = Make_diff (M)
 end
diff --git a/lib/src/atomic.mli b/lib/src/atomic.mli
index 2681e97..091586a 100644
--- a/lib/src/atomic.mli
+++ b/lib/src/atomic.mli
@@ -1,17 +1,17 @@
 open! Base
 
 module Make_diff (M : sig
-  type t [@@deriving sexp, bin_io, equal]
-end) : Diff_intf.S with type derived_on = M.t and type t = M.t
+    type t [@@deriving sexp, bin_io, equal]
+  end) : Diff_intf.S with type derived_on = M.t and type t = M.t
 
 module Make_diff_plain (M : sig
-  type t [@@deriving equal]
-end) : Diff_intf.S_plain with type derived_on := M.t and type t := M.t
+    type t [@@deriving equal]
+  end) : Diff_intf.S_plain with type derived_on := M.t and type t := M.t
 
 module Make (M : sig
-  type t [@@deriving equal, sexp, bin_io]
-end) : Diffable_intf.S with type t := M.t and type Diff.t = M.t
+    type t [@@deriving equal, sexp, bin_io]
+  end) : Diffable_intf.S with type t := M.t and type Diff.t = M.t
 
 module Make_plain (M : sig
-  type t [@@deriving equal]
-end) : Diffable_intf.S_plain with type t := M.t and type Diff.t = M.t
+    type t [@@deriving equal]
+  end) : Diffable_intf.S_plain with type t := M.t and type Diff.t = M.t
diff --git a/lib/src/basic_diffs.ml b/lib/src/basic_diffs.ml
index 01f0ca2..e024b48 100644
--- a/lib/src/basic_diffs.ml
+++ b/lib/src/basic_diffs.ml
@@ -9,8 +9,8 @@ module type S_with_quickcheck = sig
 end
 
 module Make_atomic_with_quickcheck (M : sig
-  type t [@@deriving sexp, bin_io, equal, quickcheck]
-end) =
+    type t [@@deriving sexp, bin_io, equal, quickcheck]
+  end) =
 struct
   include Atomic.Make_diff (M)
 
@@ -18,35 +18,35 @@ struct
 end
 
 module Diff_of_bool = Make_atomic_with_quickcheck (struct
-  type t = bool [@@deriving sexp, bin_io, equal, quickcheck]
-end)
+    type t = bool [@@deriving sexp, bin_io, equal, quickcheck]
+  end)
 
 module Diff_of_char = Make_atomic_with_quickcheck (struct
-  type t = char [@@deriving sexp, bin_io, equal, quickcheck]
-end)
+    type t = char [@@deriving sexp, bin_io, equal, quickcheck]
+  end)
 
 module Diff_of_float = Make_atomic_with_quickcheck (struct
-  type t = float [@@deriving sexp, bin_io, compare, quickcheck]
+    type t = float [@@deriving sexp, bin_io, compare, quickcheck]
 
-  (* Overriding [equal], because
+    (* Overriding [equal], because
        - [Float.equal Float.nan Float.nan = false]
        - [Float.compare Float.nan Float.nan = 0]
          The latter makes more sense for diffs
     *)
-  let equal = [%compare.equal: t]
-end)
+    let equal = [%compare.equal: t]
+  end)
 
 module Diff_of_int = Make_atomic_with_quickcheck (struct
-  type t = int [@@deriving sexp, bin_io, equal, quickcheck]
-end)
+    type t = int [@@deriving sexp, bin_io, equal, quickcheck]
+  end)
 
 module Diff_of_string = Make_atomic_with_quickcheck (struct
-  type t = string [@@deriving sexp, bin_io, equal, quickcheck]
-end)
+    type t = string [@@deriving sexp, bin_io, equal, quickcheck]
+  end)
 
 module Diff_of_unit = Make_atomic_with_quickcheck (struct
-  type t = unit [@@deriving sexp, bin_io, equal, quickcheck]
-end)
+    type t = unit [@@deriving sexp, bin_io, equal, quickcheck]
+  end)
 
 module Diff_of_option = struct
   type 'a derived_on = 'a option [@@deriving sexp, bin_io]
@@ -88,8 +88,8 @@ module Diff_of_option = struct
       let trailing_diffs_rev, rest_rev =
         List.rev l
         |> List.split_while ~f:(function
-             | Diff_some _ -> true
-             | Set_to_some _ | Set_to_none -> false)
+          | Diff_some _ -> true
+          | Set_to_some _ | Set_to_none -> false)
       in
       let a_diffs =
         List.rev_map trailing_diffs_rev ~f:(function
diff --git a/lib/src/basic_diffs.mli b/lib/src/basic_diffs.mli
index 511020f..a2b865f 100644
--- a/lib/src/basic_diffs.mli
+++ b/lib/src/basic_diffs.mli
@@ -27,6 +27,6 @@ module Diff_of_option : sig
 
   include
     Diff_intf.S1
-      with type 'a derived_on := 'a derived_on
-       and type ('a, 'a_diff) t := ('a, 'a_diff) t
+    with type 'a derived_on := 'a derived_on
+     and type ('a, 'a_diff) t := ('a, 'a_diff) t
 end
diff --git a/lib/src/diff_intf.ml b/lib/src/diff_intf.ml
index 5342a48..b2c7bfc 100644
--- a/lib/src/diff_intf.ml
+++ b/lib/src/diff_intf.ml
@@ -50,8 +50,8 @@ module type S1 = sig
 
   include
     S1_plain
-      with type 'a derived_on := 'a derived_on
-       and type ('a, 'a_diff) t := ('a, 'a_diff) t
+    with type 'a derived_on := 'a derived_on
+     and type ('a, 'a_diff) t := ('a, 'a_diff) t
 end
 
 module type S2_plain = sig
@@ -87,6 +87,6 @@ module type S2 = sig
 
   include
     S2_plain
-      with type ('a, 'b) derived_on := ('a, 'b) derived_on
-       and type ('a, 'b, 'a_diff, 'b_diff) t := ('a, 'b, 'a_diff, 'b_diff) t
+    with type ('a, 'b) derived_on := ('a, 'b) derived_on
+     and type ('a, 'b, 'a_diff, 'b_diff) t := ('a, 'b, 'a_diff, 'b_diff) t
 end
diff --git a/lib/src/diffable.ml b/lib/src/diffable.ml
index f71f1a1..c79a131 100644
--- a/lib/src/diffable.ml
+++ b/lib/src/diffable.ml
@@ -6,10 +6,12 @@ module Optional_diff = Optional_diff
 module Tuples = Tuples
 module Set_diff = Set_diff
 module Map_diff = Map_diff
+module Of_diffable = Of_diffable.Make
 
 module For_ppx = struct
   include Basic_diffs
   include Tuples
+  module Global = Base.Modes.Global
   module Of_variant = Of_variant
   module Optional_diff = Optional_diff
 end
diff --git a/lib/src/dune b/lib/src/dune
index fd4572c..97db650 100644
--- a/lib/src/dune
+++ b/lib/src/dune
@@ -1,6 +1,6 @@
 (library
  (name diffable)
  (public_name ppx_diff.diffable)
- (libraries base gel diffable_cinaps)
+ (libraries base diffable_cinaps ppx_stable_witness.stable_witness)
  (preprocess
   (pps ppx_jane)))
diff --git a/lib/src/map_diff.ml b/lib/src/map_diff.ml
index d7ba3cd..a93680e 100644
--- a/lib/src/map_diff.ml
+++ b/lib/src/map_diff.ml
@@ -27,14 +27,14 @@ module Stable = struct
             ~data_equal:phys_equal
             ~init:[]
             ~f:(fun acc (key, diff) ->
-            match diff with
-            | `Left _ -> Change.Remove key :: acc
-            | `Right value -> Change.Add (key, value) :: acc
-            | `Unequal (from, to_) ->
-              let diff = get_a ~from ~to_ in
-              if Optional_diff.is_none diff
-              then acc
-              else Change.Diff (key, Optional_diff.unsafe_value diff) :: acc)
+              match diff with
+              | `Left _ -> Change.Remove key :: acc
+              | `Right value -> Change.Add (key, value) :: acc
+              | `Unequal (from, to_) ->
+                let diff = get_a ~from ~to_ in
+                if Optional_diff.is_none diff
+                then acc
+                else Change.Diff (key, Optional_diff.unsafe_value diff) :: acc)
         in
         if List.is_empty diff then Optional_diff.none else Optional_diff.return diff)
     ;;
@@ -53,16 +53,16 @@ module Stable = struct
     ;;
 
     module Make (M : sig
-      module Key : sig
-        type t
-        type comparator_witness
-      end
+        module Key : sig
+          type t
+          type comparator_witness
+        end
 
-      type 'v t = (Key.t, 'v, Key.comparator_witness) Map.t
-    end) :
+        type 'v t = (Key.t, 'v, Key.comparator_witness) Map.t
+      end) :
       Diff_intf.S1_plain
-        with type 'v derived_on := 'v M.t
-         and type ('v, 'v_diff) t := (M.Key.t, 'v, 'v_diff) t = struct
+      with type 'v derived_on := 'v M.t
+       and type ('v, 'v_diff) t := (M.Key.t, 'v, 'v_diff) t = struct
       let get = get
       let apply_exn = apply_exn
       let of_list_exn = of_list_exn
diff --git a/lib/src/map_diff.mli b/lib/src/map_diff.mli
index cd3f88d..cdd934b 100644
--- a/lib/src/map_diff.mli
+++ b/lib/src/map_diff.mli
@@ -32,19 +32,19 @@ module Stable : sig
       -> ('k, 'v, 'v_diff) t Optional_diff.t
 
     module Make (M : sig
-      module Key : sig
-        type t
-        type comparator_witness
-      end
+        module Key : sig
+          type t
+          type comparator_witness
+        end
 
-      type 'v t = (Key.t, 'v, Key.comparator_witness) Map.t
-    end) :
+        type 'v t = (Key.t, 'v, Key.comparator_witness) Map.t
+      end) :
       Diff_intf.S1_plain
-        with type 'v derived_on := 'v M.t
-         and type ('v, 'v_diff) t := (M.Key.t, 'v, 'v_diff) t
+      with type 'v derived_on := 'v M.t
+       and type ('v, 'v_diff) t := (M.Key.t, 'v, 'v_diff) t
   end
 end
 
 include
   module type of Stable.V1
-    with type ('k, 'v, 'v_diff) Change.t = ('k, 'v, 'v_diff) Stable.V1.Change.t
+  with type ('k, 'v, 'v_diff) Change.t = ('k, 'v, 'v_diff) Stable.V1.Change.t
diff --git a/lib/src/of_diffable.ml b/lib/src/of_diffable.ml
new file mode 100644
index 0000000..7343c41
--- /dev/null
+++ b/lib/src/of_diffable.ml
@@ -0,0 +1,28 @@
+module type Conv = sig
+  type diffable
+  type t
+
+  val to_diffable : t -> diffable
+  val of_diffable : diffable -> t
+end
+
+module Make (Diffable : Diffable_intf.S) (M : Conv with type diffable = Diffable.t) :
+  Diffable_intf.S with type t := M.t and type Diff.t = Diffable.Diff.t = struct
+  module Diff = struct
+    include Diffable.Diff
+
+    type derived_on = M.t
+
+    let get ~from ~to_ =
+      (Diffable.Diff.get [@inlined hint])
+        ~from:(M.to_diffable from)
+        ~to_:(M.to_diffable to_)
+    ;;
+
+    let apply_exn t diff =
+      (Diffable.Diff.apply_exn [@inlined hint]) (M.to_diffable t) diff |> M.of_diffable
+    ;;
+
+    let of_list_exn diffs = Diffable.Diff.of_list_exn diffs
+  end
+end
diff --git a/lib/src/of_diffable.mli b/lib/src/of_diffable.mli
new file mode 100644
index 0000000..9ce8cba
--- /dev/null
+++ b/lib/src/of_diffable.mli
@@ -0,0 +1,10 @@
+module type Conv = sig
+  type diffable
+  type t
+
+  val to_diffable : t -> diffable
+  val of_diffable : diffable -> t
+end
+
+module Make (Diffable : Diffable_intf.S) (M : Conv with type diffable = Diffable.t) :
+  Diffable_intf.S with type t := M.t and type Diff.t = Diffable.Diff.t
diff --git a/lib/src/set_diff.ml b/lib/src/set_diff.ml
index 0991880..3c419b3 100644
--- a/lib/src/set_diff.ml
+++ b/lib/src/set_diff.ml
@@ -20,8 +20,8 @@ module Stable = struct
           Set.symmetric_diff from to_
           |> Sequence.to_list
           |> List.map ~f:(function
-               | First a -> Change.Remove a
-               | Second a -> Change.Add a)
+            | First a -> Change.Remove a
+            | Second a -> Change.Add a)
         in
         if List.is_empty diff then Optional_diff.none else Optional_diff.return diff)
     ;;
@@ -39,13 +39,14 @@ module Stable = struct
     ;;
 
     module Make (S : sig
-      module Elt : sig
-        type t
-        type comparator_witness
-      end
-
-      type t = (Elt.t, Elt.comparator_witness) Set.t
-    end) : Diff_intf.S_plain with type derived_on := S.t and type t := S.Elt.t t = struct
+        module Elt : sig
+          type t
+          type comparator_witness
+        end
+
+        type t = (Elt.t, Elt.comparator_witness) Set.t
+      end) : Diff_intf.S_plain with type derived_on := S.t and type t := S.Elt.t t =
+    struct
       let get = get
       let apply_exn = apply_exn
       let of_list_exn = of_list_exn
diff --git a/lib/src/set_diff.mli b/lib/src/set_diff.mli
index 931e284..b9c9bc5 100644
--- a/lib/src/set_diff.mli
+++ b/lib/src/set_diff.mli
@@ -15,13 +15,13 @@ module Stable : sig
     val of_list_exn : 'a t list -> 'a t Optional_diff.t
 
     module Make (S : sig
-      module Elt : sig
-        type t
-        type comparator_witness
-      end
+        module Elt : sig
+          type t
+          type comparator_witness
+        end
 
-      type t = (Elt.t, Elt.comparator_witness) Set.t
-    end) : Diff_intf.S_plain with type derived_on := S.t and type t := S.Elt.t t
+        type t = (Elt.t, Elt.comparator_witness) Set.t
+      end) : Diff_intf.S_plain with type derived_on := S.t and type t := S.Elt.t t
   end
 end
 
diff --git a/lib/src/tuples.ml b/lib/src/tuples.ml
index 1709dc8..b2b1d4b 100644
--- a/lib/src/tuples.ml
+++ b/lib/src/tuples.ml
@@ -2,6 +2,15 @@ open Base
 open Base_quickcheck.Export
 open Bin_prot.Std
 
+module Modes = struct
+  module Global = struct
+    include Modes.Global
+
+    (* This is normally derived in Core, which depends on Diffable. *)
+    type 'a t = 'a Modes.Global.t = { global : 'a } [@@unboxed] [@@deriving bin_io]
+  end
+end
+
 (*$
   open! Core
   open Diffable_cinaps
@@ -160,7 +169,7 @@ module Tuple2 = struct
   end
 
   module For_inlined_tuple = struct
-    type ('a1, 'a2) t = 'a1 Gel.t * 'a2 Gel.t [@@deriving sexp, bin_io]
+    type ('a1, 'a2) t = 'a1 Modes.Global.t * 'a2 Modes.Global.t [@@deriving sexp, bin_io]
 
     module Diff = struct
       type ('a1, 'a2) derived_on = ('a1, 'a2) t
@@ -175,8 +184,8 @@ module Tuple2 = struct
         if Base.phys_equal from to_
         then Optional_diff.none
         else (
-          let { Gel.g = from_1 }, { Gel.g = from_2 } = from in
-          let { Gel.g = to_1 }, { Gel.g = to_2 } = to_ in
+          let { global = from_1 }, { global = from_2 } = from in
+          let { global = to_1 }, { global = to_2 } = to_ in
           let diff = [] in
           let diff =
             match%optional.Optional_diff get2 ~from:from_2 ~to_:to_2 with
@@ -194,7 +203,7 @@ module Tuple2 = struct
       ;;
 
       let apply_exn apply1_exn apply2_exn derived_on diff =
-        let { Gel.g = derived_on1 }, { Gel.g = derived_on2 } = derived_on in
+        let { global = derived_on1 }, { global = derived_on2 } = derived_on in
         let t1, diff =
           match diff with
           | T1 d :: tl -> apply1_exn derived_on1 d, tl
@@ -206,7 +215,7 @@ module Tuple2 = struct
           | _ -> derived_on2, diff
         in
         match diff with
-        | [] -> { Gel.g = t1 }, { Gel.g = t2 }
+        | [] -> { global = t1 }, { global = t2 }
         | _ :: _ -> failwith "BUG: non-empty diff after apply"
       ;;
 
@@ -425,7 +434,8 @@ module Tuple3 = struct
   end
 
   module For_inlined_tuple = struct
-    type ('a1, 'a2, 'a3) t = 'a1 Gel.t * 'a2 Gel.t * 'a3 Gel.t [@@deriving sexp, bin_io]
+    type ('a1, 'a2, 'a3) t = 'a1 Modes.Global.t * 'a2 Modes.Global.t * 'a3 Modes.Global.t
+    [@@deriving sexp, bin_io]
 
     module Diff = struct
       type ('a1, 'a2, 'a3) derived_on = ('a1, 'a2, 'a3) t
@@ -441,8 +451,8 @@ module Tuple3 = struct
         if Base.phys_equal from to_
         then Optional_diff.none
         else (
-          let { Gel.g = from_1 }, { Gel.g = from_2 }, { Gel.g = from_3 } = from in
-          let { Gel.g = to_1 }, { Gel.g = to_2 }, { Gel.g = to_3 } = to_ in
+          let { global = from_1 }, { global = from_2 }, { global = from_3 } = from in
+          let { global = to_1 }, { global = to_2 }, { global = to_3 } = to_ in
           let diff = [] in
           let diff =
             match%optional.Optional_diff get3 ~from:from_3 ~to_:to_3 with
@@ -465,7 +475,7 @@ module Tuple3 = struct
       ;;
 
       let apply_exn apply1_exn apply2_exn apply3_exn derived_on diff =
-        let { Gel.g = derived_on1 }, { Gel.g = derived_on2 }, { Gel.g = derived_on3 } =
+        let { global = derived_on1 }, { global = derived_on2 }, { global = derived_on3 } =
           derived_on
         in
         let t1, diff =
@@ -484,7 +494,7 @@ module Tuple3 = struct
           | _ -> derived_on3, diff
         in
         match diff with
-        | [] -> { Gel.g = t1 }, { Gel.g = t2 }, { Gel.g = t3 }
+        | [] -> { global = t1 }, { global = t2 }, { global = t3 }
         | _ :: _ -> failwith "BUG: non-empty diff after apply"
       ;;
 
@@ -744,7 +754,8 @@ module Tuple4 = struct
   end
 
   module For_inlined_tuple = struct
-    type ('a1, 'a2, 'a3, 'a4) t = 'a1 Gel.t * 'a2 Gel.t * 'a3 Gel.t * 'a4 Gel.t
+    type ('a1, 'a2, 'a3, 'a4) t =
+      'a1 Modes.Global.t * 'a2 Modes.Global.t * 'a3 Modes.Global.t * 'a4 Modes.Global.t
     [@@deriving sexp, bin_io]
 
     module Diff = struct
@@ -761,14 +772,14 @@ module Tuple4 = struct
         if Base.phys_equal from to_
         then Optional_diff.none
         else (
-          let ( { Gel.g = from_1 }
-              , { Gel.g = from_2 }
-              , { Gel.g = from_3 }
-              , { Gel.g = from_4 } )
+          let ( { global = from_1 }
+              , { global = from_2 }
+              , { global = from_3 }
+              , { global = from_4 } )
             =
             from
           in
-          let { Gel.g = to_1 }, { Gel.g = to_2 }, { Gel.g = to_3 }, { Gel.g = to_4 } =
+          let { global = to_1 }, { global = to_2 }, { global = to_3 }, { global = to_4 } =
             to_
           in
           let diff = [] in
@@ -798,10 +809,10 @@ module Tuple4 = struct
       ;;
 
       let apply_exn apply1_exn apply2_exn apply3_exn apply4_exn derived_on diff =
-        let ( { Gel.g = derived_on1 }
-            , { Gel.g = derived_on2 }
-            , { Gel.g = derived_on3 }
-            , { Gel.g = derived_on4 } )
+        let ( { global = derived_on1 }
+            , { global = derived_on2 }
+            , { global = derived_on3 }
+            , { global = derived_on4 } )
           =
           derived_on
         in
@@ -826,7 +837,7 @@ module Tuple4 = struct
           | _ -> derived_on4, diff
         in
         match diff with
-        | [] -> { Gel.g = t1 }, { Gel.g = t2 }, { Gel.g = t3 }, { Gel.g = t4 }
+        | [] -> { global = t1 }, { global = t2 }, { global = t3 }, { global = t4 }
         | _ :: _ -> failwith "BUG: non-empty diff after apply"
       ;;
 
@@ -855,17 +866,17 @@ module Tuple5 = struct
 
     type ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t =
       ( 'a1
-      , 'a2
-      , 'a3
-      , 'a4
-      , 'a5
-      , 'a1_diff
-      , 'a2_diff
-      , 'a3_diff
-      , 'a4_diff
-      , 'a5_diff )
-      Entry_diff.t
-      list
+        , 'a2
+        , 'a3
+        , 'a4
+        , 'a5
+        , 'a1_diff
+        , 'a2_diff
+        , 'a3_diff
+        , 'a4_diff
+        , 'a5_diff )
+        Entry_diff.t
+        list
     [@@deriving sexp, bin_io, quickcheck]
 
     let compare_rank t1 t2 =
@@ -1139,7 +1150,11 @@ module Tuple5 = struct
 
   module For_inlined_tuple = struct
     type ('a1, 'a2, 'a3, 'a4, 'a5) t =
-      'a1 Gel.t * 'a2 Gel.t * 'a3 Gel.t * 'a4 Gel.t * 'a5 Gel.t
+      'a1 Modes.Global.t
+      * 'a2 Modes.Global.t
+      * 'a3 Modes.Global.t
+      * 'a4 Modes.Global.t
+      * 'a5 Modes.Global.t
     [@@deriving sexp, bin_io]
 
     module Diff = struct
@@ -1156,19 +1171,19 @@ module Tuple5 = struct
         if Base.phys_equal from to_
         then Optional_diff.none
         else (
-          let ( { Gel.g = from_1 }
-              , { Gel.g = from_2 }
-              , { Gel.g = from_3 }
-              , { Gel.g = from_4 }
-              , { Gel.g = from_5 } )
+          let ( { global = from_1 }
+              , { global = from_2 }
+              , { global = from_3 }
+              , { global = from_4 }
+              , { global = from_5 } )
             =
             from
           in
-          let ( { Gel.g = to_1 }
-              , { Gel.g = to_2 }
-              , { Gel.g = to_3 }
-              , { Gel.g = to_4 }
-              , { Gel.g = to_5 } )
+          let ( { global = to_1 }
+              , { global = to_2 }
+              , { global = to_3 }
+              , { global = to_4 }
+              , { global = to_5 } )
             =
             to_
           in
@@ -1205,11 +1220,11 @@ module Tuple5 = struct
 
       let apply_exn apply1_exn apply2_exn apply3_exn apply4_exn apply5_exn derived_on diff
         =
-        let ( { Gel.g = derived_on1 }
-            , { Gel.g = derived_on2 }
-            , { Gel.g = derived_on3 }
-            , { Gel.g = derived_on4 }
-            , { Gel.g = derived_on5 } )
+        let ( { global = derived_on1 }
+            , { global = derived_on2 }
+            , { global = derived_on3 }
+            , { global = derived_on4 }
+            , { global = derived_on5 } )
           =
           derived_on
         in
@@ -1240,7 +1255,11 @@ module Tuple5 = struct
         in
         match diff with
         | [] ->
-          { Gel.g = t1 }, { Gel.g = t2 }, { Gel.g = t3 }, { Gel.g = t4 }, { Gel.g = t5 }
+          ( { global = t1 }
+          , { global = t2 }
+          , { global = t3 }
+          , { global = t4 }
+          , { global = t5 } )
         | _ :: _ -> failwith "BUG: non-empty diff after apply"
       ;;
 
@@ -1295,19 +1314,19 @@ module Tuple6 = struct
          , 'a6_diff)
          t =
       ( 'a1
-      , 'a2
-      , 'a3
-      , 'a4
-      , 'a5
-      , 'a6
-      , 'a1_diff
-      , 'a2_diff
-      , 'a3_diff
-      , 'a4_diff
-      , 'a5_diff
-      , 'a6_diff )
-      Entry_diff.t
-      list
+        , 'a2
+        , 'a3
+        , 'a4
+        , 'a5
+        , 'a6
+        , 'a1_diff
+        , 'a2_diff
+        , 'a3_diff
+        , 'a4_diff
+        , 'a5_diff
+        , 'a6_diff )
+        Entry_diff.t
+        list
     [@@deriving sexp, bin_io, quickcheck]
 
     let compare_rank t1 t2 =
@@ -1632,7 +1651,12 @@ module Tuple6 = struct
 
   module For_inlined_tuple = struct
     type ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) t =
-      'a1 Gel.t * 'a2 Gel.t * 'a3 Gel.t * 'a4 Gel.t * 'a5 Gel.t * 'a6 Gel.t
+      'a1 Modes.Global.t
+      * 'a2 Modes.Global.t
+      * 'a3 Modes.Global.t
+      * 'a4 Modes.Global.t
+      * 'a5 Modes.Global.t
+      * 'a6 Modes.Global.t
     [@@deriving sexp, bin_io]
 
     module Diff = struct
@@ -1652,18 +1676,18 @@ module Tuple6 = struct
            , 'a6_diff)
            t =
         ( 'a1
-        , 'a2
-        , 'a3
-        , 'a4
-        , 'a5
-        , 'a6
-        , 'a1_diff
-        , 'a2_diff
-        , 'a3_diff
-        , 'a4_diff
-        , 'a5_diff
-        , 'a6_diff )
-        Diff.t
+          , 'a2
+          , 'a3
+          , 'a4
+          , 'a5
+          , 'a6
+          , 'a1_diff
+          , 'a2_diff
+          , 'a3_diff
+          , 'a4_diff
+          , 'a5_diff
+          , 'a6_diff )
+          Diff.t
       [@@deriving sexp, bin_io, quickcheck]
 
       open Diff
@@ -1673,21 +1697,21 @@ module Tuple6 = struct
         if Base.phys_equal from to_
         then Optional_diff.none
         else (
-          let ( { Gel.g = from_1 }
-              , { Gel.g = from_2 }
-              , { Gel.g = from_3 }
-              , { Gel.g = from_4 }
-              , { Gel.g = from_5 }
-              , { Gel.g = from_6 } )
+          let ( { global = from_1 }
+              , { global = from_2 }
+              , { global = from_3 }
+              , { global = from_4 }
+              , { global = from_5 }
+              , { global = from_6 } )
             =
             from
           in
-          let ( { Gel.g = to_1 }
-              , { Gel.g = to_2 }
-              , { Gel.g = to_3 }
-              , { Gel.g = to_4 }
-              , { Gel.g = to_5 }
-              , { Gel.g = to_6 } )
+          let ( { global = to_1 }
+              , { global = to_2 }
+              , { global = to_3 }
+              , { global = to_4 }
+              , { global = to_5 }
+              , { global = to_6 } )
             =
             to_
           in
@@ -1737,12 +1761,12 @@ module Tuple6 = struct
         derived_on
         diff
         =
-        let ( { Gel.g = derived_on1 }
-            , { Gel.g = derived_on2 }
-            , { Gel.g = derived_on3 }
-            , { Gel.g = derived_on4 }
-            , { Gel.g = derived_on5 }
-            , { Gel.g = derived_on6 } )
+        let ( { global = derived_on1 }
+            , { global = derived_on2 }
+            , { global = derived_on3 }
+            , { global = derived_on4 }
+            , { global = derived_on5 }
+            , { global = derived_on6 } )
           =
           derived_on
         in
@@ -1778,12 +1802,12 @@ module Tuple6 = struct
         in
         match diff with
         | [] ->
-          ( { Gel.g = t1 }
-          , { Gel.g = t2 }
-          , { Gel.g = t3 }
-          , { Gel.g = t4 }
-          , { Gel.g = t5 }
-          , { Gel.g = t6 } )
+          ( { global = t1 }
+          , { global = t2 }
+          , { global = t3 }
+          , { global = t4 }
+          , { global = t5 }
+          , { global = t6 } )
         | _ :: _ -> failwith "BUG: non-empty diff after apply"
       ;;
 
diff --git a/lib/src/tuples.mli b/lib/src/tuples.mli
index dceb45f..6e8d184 100644
--- a/lib/src/tuples.mli
+++ b/lib/src/tuples.mli
@@ -1,3 +1,5 @@
+open! Base
+
 val max_supported : int * Lexing.position
 
 (*$
@@ -59,7 +61,7 @@ module Tuple2 : sig
   end
 
   module For_inlined_tuple : sig
-    type ('a1, 'a2) t = 'a1 Gel.t * 'a2 Gel.t [@@deriving sexp, bin_io]
+    type ('a1, 'a2) t = 'a1 Modes.Global.t * 'a2 Modes.Global.t [@@deriving sexp, bin_io]
 
     module Diff : sig
       type ('a1, 'a2) derived_on = ('a1, 'a2) t
@@ -151,21 +153,22 @@ module Tuple3 : sig
     val create_of_variants
       :  t1:
            ( 'a1_diff
-           , ('a1, 'a2, 'a3, 'a1_diff, 'a2_diff, 'a3_diff) Entry_diff.t )
-           Of_variant.t
+             , ('a1, 'a2, 'a3, 'a1_diff, 'a2_diff, 'a3_diff) Entry_diff.t )
+             Of_variant.t
       -> t2:
            ( 'a2_diff
-           , ('a1, 'a2, 'a3, 'a1_diff, 'a2_diff, 'a3_diff) Entry_diff.t )
-           Of_variant.t
+             , ('a1, 'a2, 'a3, 'a1_diff, 'a2_diff, 'a3_diff) Entry_diff.t )
+             Of_variant.t
       -> t3:
            ( 'a3_diff
-           , ('a1, 'a2, 'a3, 'a1_diff, 'a2_diff, 'a3_diff) Entry_diff.t )
-           Of_variant.t
+             , ('a1, 'a2, 'a3, 'a1_diff, 'a2_diff, 'a3_diff) Entry_diff.t )
+             Of_variant.t
       -> ('a1, 'a2, 'a3, 'a1_diff, 'a2_diff, 'a3_diff) t
   end
 
   module For_inlined_tuple : sig
-    type ('a1, 'a2, 'a3) t = 'a1 Gel.t * 'a2 Gel.t * 'a3 Gel.t [@@deriving sexp, bin_io]
+    type ('a1, 'a2, 'a3) t = 'a1 Modes.Global.t * 'a2 Modes.Global.t * 'a3 Modes.Global.t
+    [@@deriving sexp, bin_io]
 
     module Diff : sig
       type ('a1, 'a2, 'a3) derived_on = ('a1, 'a2, 'a3) t
@@ -268,25 +271,30 @@ module Tuple4 : sig
     val create_of_variants
       :  t1:
            ( 'a1_diff
-           , ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) Entry_diff.t )
-           Of_variant.t
+             , ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) Entry_diff.t
+             )
+             Of_variant.t
       -> t2:
            ( 'a2_diff
-           , ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) Entry_diff.t )
-           Of_variant.t
+             , ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) Entry_diff.t
+             )
+             Of_variant.t
       -> t3:
            ( 'a3_diff
-           , ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) Entry_diff.t )
-           Of_variant.t
+             , ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) Entry_diff.t
+             )
+             Of_variant.t
       -> t4:
            ( 'a4_diff
-           , ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) Entry_diff.t )
-           Of_variant.t
+             , ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) Entry_diff.t
+             )
+             Of_variant.t
       -> ('a1, 'a2, 'a3, 'a4, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff) t
   end
 
   module For_inlined_tuple : sig
-    type ('a1, 'a2, 'a3, 'a4) t = 'a1 Gel.t * 'a2 Gel.t * 'a3 Gel.t * 'a4 Gel.t
+    type ('a1, 'a2, 'a3, 'a4) t =
+      'a1 Modes.Global.t * 'a2 Modes.Global.t * 'a3 Modes.Global.t * 'a4 Modes.Global.t
     [@@deriving sexp, bin_io]
 
     module Diff : sig
@@ -348,17 +356,17 @@ module Tuple5 : sig
     type ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t =
       private
       ( 'a1
-      , 'a2
-      , 'a3
-      , 'a4
-      , 'a5
-      , 'a1_diff
-      , 'a2_diff
-      , 'a3_diff
-      , 'a4_diff
-      , 'a5_diff )
-      Entry_diff.t
-      list
+        , 'a2
+        , 'a3
+        , 'a4
+        , 'a5
+        , 'a1_diff
+        , 'a2_diff
+        , 'a3_diff
+        , 'a4_diff
+        , 'a5_diff )
+        Entry_diff.t
+        list
     [@@deriving sexp, bin_io, quickcheck]
 
     val get
@@ -370,7 +378,7 @@ module Tuple5 : sig
       -> from:('a1, 'a2, 'a3, 'a4, 'a5) derived_on
       -> to_:('a1, 'a2, 'a3, 'a4, 'a5) derived_on
       -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t
-         Optional_diff.t
+           Optional_diff.t
 
     val apply_exn
       :  ('a1 -> 'a1_diff -> 'a1)
@@ -394,22 +402,22 @@ module Tuple5 : sig
       -> ('a5_diff list -> 'a5_diff Optional_diff.t)
       -> ('a5 -> 'a5_diff -> 'a5)
       -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t
-         list
+           list
       -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t
-         Optional_diff.t
+           Optional_diff.t
 
     val singleton
       :  ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff )
-         Entry_diff.t
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff )
+           Entry_diff.t
       -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t
 
     val create
@@ -424,80 +432,84 @@ module Tuple5 : sig
     val create_of_variants
       :  t1:
            ( 'a1_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t2:
            ( 'a2_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t3:
            ( 'a3_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t4:
            ( 'a4_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t5:
            ( 'a5_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t
   end
 
   module For_inlined_tuple : sig
     type ('a1, 'a2, 'a3, 'a4, 'a5) t =
-      'a1 Gel.t * 'a2 Gel.t * 'a3 Gel.t * 'a4 Gel.t * 'a5 Gel.t
+      'a1 Modes.Global.t
+      * 'a2 Modes.Global.t
+      * 'a3 Modes.Global.t
+      * 'a4 Modes.Global.t
+      * 'a5 Modes.Global.t
     [@@deriving sexp, bin_io]
 
     module Diff : sig
@@ -516,7 +528,7 @@ module Tuple5 : sig
         -> from:('a1, 'a2, 'a3, 'a4, 'a5) derived_on
         -> to_:('a1, 'a2, 'a3, 'a4, 'a5) derived_on
         -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t
-           Optional_diff.t
+             Optional_diff.t
 
       val apply_exn
         :  ('a1 -> 'a1_diff -> 'a1)
@@ -540,9 +552,9 @@ module Tuple5 : sig
         -> ('a5_diff list -> 'a5_diff Optional_diff.t)
         -> ('a5 -> 'a5_diff -> 'a5)
         -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t
-           list
+             list
         -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a1_diff, 'a2_diff, 'a3_diff, 'a4_diff, 'a5_diff) t
-           Optional_diff.t
+             Optional_diff.t
     end
   end
 end
@@ -592,19 +604,19 @@ module Tuple6 : sig
          t =
       private
       ( 'a1
-      , 'a2
-      , 'a3
-      , 'a4
-      , 'a5
-      , 'a6
-      , 'a1_diff
-      , 'a2_diff
-      , 'a3_diff
-      , 'a4_diff
-      , 'a5_diff
-      , 'a6_diff )
-      Entry_diff.t
-      list
+        , 'a2
+        , 'a3
+        , 'a4
+        , 'a5
+        , 'a6
+        , 'a1_diff
+        , 'a2_diff
+        , 'a3_diff
+        , 'a4_diff
+        , 'a5_diff
+        , 'a6_diff )
+        Entry_diff.t
+        list
     [@@deriving sexp, bin_io, quickcheck]
 
     val get
@@ -617,19 +629,19 @@ module Tuple6 : sig
       -> from:('a1, 'a2, 'a3, 'a4, 'a5, 'a6) derived_on
       -> to_:('a1, 'a2, 'a3, 'a4, 'a5, 'a6) derived_on
       -> ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a6
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff
-         , 'a6_diff )
-         t
-         Optional_diff.t
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a6
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff
+           , 'a6_diff )
+           t
+           Optional_diff.t
 
     val apply_exn
       :  ('a1 -> 'a1_diff -> 'a1)
@@ -640,18 +652,18 @@ module Tuple6 : sig
       -> ('a6 -> 'a6_diff -> 'a6)
       -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) derived_on
       -> ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a6
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff
-         , 'a6_diff )
-         t
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a6
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff
+           , 'a6_diff )
+           t
       -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) derived_on
 
     val of_list_exn
@@ -668,61 +680,61 @@ module Tuple6 : sig
       -> ('a6_diff list -> 'a6_diff Optional_diff.t)
       -> ('a6 -> 'a6_diff -> 'a6)
       -> ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a6
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff
-         , 'a6_diff )
-         t
-         list
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a6
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff
+           , 'a6_diff )
+           t
+           list
       -> ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a6
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff
-         , 'a6_diff )
-         t
-         Optional_diff.t
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a6
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff
+           , 'a6_diff )
+           t
+           Optional_diff.t
 
     val singleton
       :  ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a6
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff
-         , 'a6_diff )
-         Entry_diff.t
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a6
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff
+           , 'a6_diff )
+           Entry_diff.t
       -> ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a6
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff
-         , 'a6_diff )
-         t
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a6
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff
+           , 'a6_diff )
+           t
 
     val create
       :  ?t1:'a1_diff
@@ -733,134 +745,139 @@ module Tuple6 : sig
       -> ?t6:'a6_diff
       -> unit
       -> ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a6
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff
-         , 'a6_diff )
-         t
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a6
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff
+           , 'a6_diff )
+           t
 
     val create_of_variants
       :  t1:
            ( 'a1_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a6
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff
-             , 'a6_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a6
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff
+                 , 'a6_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t2:
            ( 'a2_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a6
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff
-             , 'a6_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a6
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff
+                 , 'a6_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t3:
            ( 'a3_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a6
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff
-             , 'a6_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a6
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff
+                 , 'a6_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t4:
            ( 'a4_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a6
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff
-             , 'a6_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a6
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff
+                 , 'a6_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t5:
            ( 'a5_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a6
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff
-             , 'a6_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a6
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff
+                 , 'a6_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> t6:
            ( 'a6_diff
-           , ( 'a1
-             , 'a2
-             , 'a3
-             , 'a4
-             , 'a5
-             , 'a6
-             , 'a1_diff
-             , 'a2_diff
-             , 'a3_diff
-             , 'a4_diff
-             , 'a5_diff
-             , 'a6_diff )
-             Entry_diff.t )
-           Of_variant.t
+             , ( 'a1
+                 , 'a2
+                 , 'a3
+                 , 'a4
+                 , 'a5
+                 , 'a6
+                 , 'a1_diff
+                 , 'a2_diff
+                 , 'a3_diff
+                 , 'a4_diff
+                 , 'a5_diff
+                 , 'a6_diff )
+                 Entry_diff.t )
+             Of_variant.t
       -> ( 'a1
-         , 'a2
-         , 'a3
-         , 'a4
-         , 'a5
-         , 'a6
-         , 'a1_diff
-         , 'a2_diff
-         , 'a3_diff
-         , 'a4_diff
-         , 'a5_diff
-         , 'a6_diff )
-         t
+           , 'a2
+           , 'a3
+           , 'a4
+           , 'a5
+           , 'a6
+           , 'a1_diff
+           , 'a2_diff
+           , 'a3_diff
+           , 'a4_diff
+           , 'a5_diff
+           , 'a6_diff )
+           t
   end
 
   module For_inlined_tuple : sig
     type ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) t =
-      'a1 Gel.t * 'a2 Gel.t * 'a3 Gel.t * 'a4 Gel.t * 'a5 Gel.t * 'a6 Gel.t
+      'a1 Modes.Global.t
+      * 'a2 Modes.Global.t
+      * 'a3 Modes.Global.t
+      * 'a4 Modes.Global.t
+      * 'a5 Modes.Global.t
+      * 'a6 Modes.Global.t
     [@@deriving sexp, bin_io]
 
     module Diff : sig
@@ -880,18 +897,18 @@ module Tuple6 : sig
            , 'a6_diff)
            t =
         ( 'a1
-        , 'a2
-        , 'a3
-        , 'a4
-        , 'a5
-        , 'a6
-        , 'a1_diff
-        , 'a2_diff
-        , 'a3_diff
-        , 'a4_diff
-        , 'a5_diff
-        , 'a6_diff )
-        Diff.t
+          , 'a2
+          , 'a3
+          , 'a4
+          , 'a5
+          , 'a6
+          , 'a1_diff
+          , 'a2_diff
+          , 'a3_diff
+          , 'a4_diff
+          , 'a5_diff
+          , 'a6_diff )
+          Diff.t
       [@@deriving sexp, bin_io, quickcheck]
 
       val get
@@ -904,19 +921,19 @@ module Tuple6 : sig
         -> from:('a1, 'a2, 'a3, 'a4, 'a5, 'a6) derived_on
         -> to_:('a1, 'a2, 'a3, 'a4, 'a5, 'a6) derived_on
         -> ( 'a1
-           , 'a2
-           , 'a3
-           , 'a4
-           , 'a5
-           , 'a6
-           , 'a1_diff
-           , 'a2_diff
-           , 'a3_diff
-           , 'a4_diff
-           , 'a5_diff
-           , 'a6_diff )
-           t
-           Optional_diff.t
+             , 'a2
+             , 'a3
+             , 'a4
+             , 'a5
+             , 'a6
+             , 'a1_diff
+             , 'a2_diff
+             , 'a3_diff
+             , 'a4_diff
+             , 'a5_diff
+             , 'a6_diff )
+             t
+             Optional_diff.t
 
       val apply_exn
         :  ('a1 -> 'a1_diff -> 'a1)
@@ -927,18 +944,18 @@ module Tuple6 : sig
         -> ('a6 -> 'a6_diff -> 'a6)
         -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) derived_on
         -> ( 'a1
-           , 'a2
-           , 'a3
-           , 'a4
-           , 'a5
-           , 'a6
-           , 'a1_diff
-           , 'a2_diff
-           , 'a3_diff
-           , 'a4_diff
-           , 'a5_diff
-           , 'a6_diff )
-           t
+             , 'a2
+             , 'a3
+             , 'a4
+             , 'a5
+             , 'a6
+             , 'a1_diff
+             , 'a2_diff
+             , 'a3_diff
+             , 'a4_diff
+             , 'a5_diff
+             , 'a6_diff )
+             t
         -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) derived_on
 
       val of_list_exn
@@ -955,33 +972,33 @@ module Tuple6 : sig
         -> ('a6_diff list -> 'a6_diff Optional_diff.t)
         -> ('a6 -> 'a6_diff -> 'a6)
         -> ( 'a1
-           , 'a2
-           , 'a3
-           , 'a4
-           , 'a5
-           , 'a6
-           , 'a1_diff
-           , 'a2_diff
-           , 'a3_diff
-           , 'a4_diff
-           , 'a5_diff
-           , 'a6_diff )
-           t
-           list
+             , 'a2
+             , 'a3
+             , 'a4
+             , 'a5
+             , 'a6
+             , 'a1_diff
+             , 'a2_diff
+             , 'a3_diff
+             , 'a4_diff
+             , 'a5_diff
+             , 'a6_diff )
+             t
+             list
         -> ( 'a1
-           , 'a2
-           , 'a3
-           , 'a4
-           , 'a5
-           , 'a6
-           , 'a1_diff
-           , 'a2_diff
-           , 'a3_diff
-           , 'a4_diff
-           , 'a5_diff
-           , 'a6_diff )
-           t
-           Optional_diff.t
+             , 'a2
+             , 'a3
+             , 'a4
+             , 'a5
+             , 'a6
+             , 'a1_diff
+             , 'a2_diff
+             , 'a3_diff
+             , 'a4_diff
+             , 'a5_diff
+             , 'a6_diff )
+             t
+             Optional_diff.t
     end
   end
 end
diff --git a/src/diff.ml b/src/diff.ml
index e8bbde7..819dedd 100644
--- a/src/diff.ml
+++ b/src/diff.ml
@@ -331,8 +331,8 @@ let to_items t ~context ~(type_to_diff_declaration : unit Type_declaration.t) =
                   `optional_diff
                   ~args_are_optional:false
                   ~row_diff:(fun row_name ->
-                  let name = create_arg_name row_name in
-                  [%expr [%e Text name |> e] [%e variants name]])]
+                    let name = create_arg_name row_name in
+                    [%expr [%e Text name |> e] [%e variants name]])]
             ;;]
         in
         let t_of_sexp =
diff --git a/src/diff_atomic.ml b/src/diff_atomic.ml
index 2291f29..e9eda03 100644
--- a/src/diff_atomic.ml
+++ b/src/diff_atomic.ml
@@ -61,9 +61,10 @@ let create_functions kind ~atomic ~sig_or_struct ~builder =
   let apply_exn = [%expr fun _derived_on diff -> diff] in
   let of_list_exn =
     [%expr
-      function
-      | [] -> Optional_diff.none
-      | _ :: _ as l -> Optional_diff.return (Base.List.last_exn l)]
+      fun l ->
+        match l with
+        | [] -> Optional_diff.none
+        | _ :: _ -> Optional_diff.return (Base.List.last_exn l)]
   in
   { Diff.Functions.get; apply_exn; of_list_exn }
 ;;
diff --git a/src/diff_constr.ml b/src/diff_constr.ml
index 560599b..22de969 100644
--- a/src/diff_constr.ml
+++ b/src/diff_constr.ml
@@ -31,8 +31,8 @@ let create
   let module_ =
     Longident_helper.to_simple_list module_ ~builder ~on_functor_application:(fun _ ->
       Error.createf
-        "Functor applications are not supported (with the exception of \"set\" for \
-         elements and \"map\" for keys)")
+        "Functor applications are not supported (with the exception of sets and maps \
+         using the [@diff.set] and [@diff.map] annotations)")
     @ [ Module_name.diff_module_name ~type_to_diff_name:type_name ]
   in
   (* (type1, type2, 'a, Diff_of_type1.t, Diff_of_type2.t, 'a_diff) X.Diff.t *)
diff --git a/src/diff_record.ml b/src/diff_record.ml
index 7d7c627..fa57015 100644
--- a/src/diff_record.ml
+++ b/src/diff_record.ml
@@ -195,49 +195,51 @@ let apply ~field_diffs ~local_apply ~builder =
     ~init:
       [%expr
         fun derived_on diff ->
-          (* {[ let { x = derived_on_x ; y = derived_on_y ; ... } = derived_on ]} *)
-          let [%p record ~field_names (Some Prefix.derived_on) |> p] = derived_on in
           [%e
-            match field_diffs with
-            | Single { field_name; field_diff = _ } ->
-              let txt = with_prefix ~field_name in
+            return_expr
               [%expr
-                let [%p txt None |> p] =
-                  let [%p variant_row ~field_name "d" |> p] = diff in
-                  [%e apply_field_diff ~field_name (Text "d" |> e)]
-                in
-                [%e return_expr (record ~field_names None |> e)]]
-            | Multi field_diffs ->
-              List.fold_right
-                field_diffs
-                ~f:(fun { field_name; field_diff = _ } expr ->
-                  let txt = with_prefix ~field_name in
-                  (* {[ let x, diff =
+                (* {[ let { x = derived_on_x ; y = derived_on_y ; ... } = derived_on ]} *)
+                let [%p record ~field_names (Some Prefix.derived_on) |> p] = derived_on in
+                [%e
+                  match field_diffs with
+                  | Single { field_name; field_diff = _ } ->
+                    let txt = with_prefix ~field_name in
+                    [%expr
+                      let [%p txt None |> p] =
+                        let [%p variant_row ~field_name "d" |> p] = diff in
+                        [%e apply_field_diff ~field_name (Text "d" |> e)]
+                      in
+                      [%e record ~field_names None |> e]]
+                  | Multi field_diffs ->
+                    List.fold_right
+                      field_diffs
+                      ~f:(fun { field_name; field_diff = _ } expr ->
+                        let txt = with_prefix ~field_name in
+                        (* {[ let x, diff =
                           match diff with
                           | T1 d :: tl -> X.Diff.apply_exn derived_on1 d, tl
                           | _ -> derived_on1, diff
                        in
                        (* ... *)
                      ]}
-                  *)
-                  [%expr
-                    let [%p txt None |> p], diff =
-                      match diff with
-                      | [%p variant_row ~field_name "d" |> p] :: tl ->
-                        [%e apply_field_diff ~field_name (Text "d" |> e)], tl
-                      | _ -> [%e txt (Some Prefix.derived_on) |> e], diff
-                    in
-                    [%e expr]])
-                ~init:
-                  (* {[ match diff with
+                        *)
+                        [%expr
+                          let [%p txt None |> p], diff =
+                            match diff with
+                            | [%p variant_row ~field_name "d" |> p] :: tl ->
+                              [%e apply_field_diff ~field_name (Text "d" |> e)], tl
+                            | _ -> [%e txt (Some Prefix.derived_on) |> e], diff
+                          in
+                          [%e expr]])
+                      ~init:
+                        (* {[ match diff with
                        | [] -> { x ; y ; ... }
                        | _ :: _ -> BUG
                      ]}*)
-                  (return_expr
-                     [%expr
-                       match diff with
-                       | [] -> [%e record ~field_names None |> e]
-                       | _ :: _ -> failwith "BUG: non-empty diff after apply"])]]
+                        [%expr
+                          match diff with
+                          | [] -> [%e record ~field_names None |> e]
+                          | _ :: _ -> failwith "BUG: non-empty diff after apply"]]]]]
 ;;
 
 let of_list ~field_diffs ~builder =
@@ -292,24 +294,25 @@ let of_list ~field_diffs ~builder =
               | Some d -> loop ([%e variant_row ~field_name "d" |> e] :: acc) tl]
       in
       [%expr
-        function
-        | [] -> Optional_diff.none
-        | _ :: _ as ts ->
-          (match Base.List.concat ts |> Base.List.stable_sort ~compare:compare_rank with
-           | [] -> Optional_diff.return []
-           | _ :: _ as diff ->
-             let diff =
-               let rec loop acc l =
-                 [%e
-                   pexp_match
-                     [%expr l]
-                     (* | [] -> List.rev acc *)
-                     (case ~lhs:[%pat? []] ~guard:None ~rhs:[%expr Base.List.rev acc]
-                      :: List.map field_diffs ~f:match_case)]
+        fun l ->
+          match l with
+          | [] -> Optional_diff.none
+          | _ :: _ as ts ->
+            (match Base.List.concat ts |> Base.List.stable_sort ~compare:compare_rank with
+             | [] -> Optional_diff.return []
+             | _ :: _ as diff ->
+               let diff =
+                 let rec loop acc l =
+                   [%e
+                     pexp_match
+                       [%expr l]
+                       (* | [] -> List.rev acc *)
+                       (case ~lhs:[%pat? []] ~guard:None ~rhs:[%expr Base.List.rev acc]
+                        :: List.map field_diffs ~f:match_case)]
+                 in
+                 loop [] diff
                in
-               loop [] diff
-             in
-             Optional_diff.return diff)]
+               Optional_diff.return diff)]
   in
   List.fold
     (Field_diffs.to_list field_diffs)
diff --git a/src/diff_variant.ml b/src/diff_variant.ml
index 7f7566f..0ea11f7 100644
--- a/src/diff_variant.ml
+++ b/src/diff_variant.ml
@@ -26,8 +26,8 @@ open Build_helper
 module Maybe_polymorphic = struct
   type ('row_type, 'diff_type, 'prefix) t =
     | Polymorphic : (How_to_diff.t Type_kind.core, unit Type_kind.core_kind, unit) t
-    | Not_polymorphic
-        : (How_to_diff.t Type_kind.variant_row_type, unit Type_kind.t, Items.t) t
+    | Not_polymorphic :
+        (How_to_diff.t Type_kind.variant_row_type, unit Type_kind.t, Items.t) t
 
   let is_polymorphic
     (type row_type diff_type prefix)
@@ -103,9 +103,9 @@ end = struct
       variant
       |> Type_kind.constrs
       |> List.concat_map ~f:(fun { Type_kind.module_; _ } ->
-           match module_ with
-           | None -> []
-           | Some module_ -> hds module_)
+        match module_ with
+        | None -> []
+        | Some module_ -> hds module_)
       |> Set.of_list (module Module_name)
     in
     { collisions; record_module_names = Hashtbl.create (module Variant_row_name) }
@@ -148,7 +148,7 @@ module Row : sig
     (* Helper representing the type actually used by [core_diff]. Will look like:
 
        1. [txt]
-       2. local_ (t1, t2, ...) Tuples.TupleN.For_inlined_tuple.t = local_ ( { Gel.g = txt1 }, { Gel.g = txt2 }, ...)
+       2. local_ (t1, t2, ...) Tuples.TupleN.For_inlined_tuple.t = local_ ( { global = txt1 }, { global = txt2 }, ...)
        3. local_ { R_record.field_a = txt_a ; field_b = txt_b }
 
        (For [2] and [3] the local_ keyword is only used for expresions, not for patterns.)
@@ -333,9 +333,9 @@ end = struct
                then text
                else
                  Record
-                   { module_ = Some (Module_name.of_string "Gel")
+                   { module_ = Some (Module_name.of_string "Global")
                    ; fields =
-                       [ { field_name = Record_field_name.of_string "g"
+                       [ { field_name = Record_field_name.of_string "global"
                          ; field_value = text
                          }
                        ]
@@ -503,7 +503,7 @@ let get ~builder ~rows ~maybe_polymorphic:mp =
            [%expr Optional_diff.none]
          | Some diff ->
            (* B: d = get_B ~from ~to_
-              T: d = get_T ~from:(local_ ({ Gel.g = from1 }, ...)) ~to_:...
+              T: d = get_T ~from:(local_ ({ global = from1 }, ...)) ~to_:...
               R: d = get_R ~from:(local_ { field_a = from_a;...}) ~to_:...
            *)
            let d =
@@ -614,8 +614,8 @@ let apply_exn ~rows ~builder ~maybe_polymorphic:mp =
                [%expr
                  (* {[let to_b = apply_b derived_on diff in to_b]}
                      OR
-                     {[let ({ Gel.g = to_1 }, { Gel.g = to_2 }, ...) =
-                         apply_t (local_ ({ Gel.g = derived_on1 } , { Gel.g = derived_on2 }, ....)) diff
+                     {[let ({ global = to_1 }, { global = to_2 }, ...) =
+                         apply_t (local_ ({ global = derived_on1 } , { global = derived_on2 }, ....)) diff
                        in
                        T (to_1, to_2, ...)
                      ]}
@@ -624,7 +624,7 @@ let apply_exn ~rows ~builder ~maybe_polymorphic:mp =
                          apply_r (local_ { R_record.field_a = derived_on_a ; ... }) diff
                        in
                        R { field_a = to_a ; ... }]}
-                  *)
+                 *)
                  let [%p Row.Row_diff.derived_on type_ mp Prefix.to_ |> p] =
                    [%e Row.function_name row Function_name.apply_exn |> e]
                      [%e Row.Row_diff.derived_on type_ mp Prefix.derived_on |> e]
@@ -721,7 +721,7 @@ let of_list ~rows ~maybe_polymorphic:mp ~builder =
        @ List.map diff_rows ~f:(fun (row, _diff) -> case Diff row))
   in
   let r row which prefix = Row.get_row row mp which prefix in
-  let error_case ?(local = false) row which =
+  let error_case row which =
     let error =
       [%expr
         failwith
@@ -730,7 +730,7 @@ let of_list ~rows ~maybe_polymorphic:mp ~builder =
            ^ " with diff of variant "
            ^ diff_variant_name t)]
     in
-    case ~lhs:[%pat? t] ~rhs:(if local then [%expr [%e error]] else error)
+    case ~lhs:[%pat? t] ~rhs:error
   in
   let unpack_diffs row ~for_:which =
     (* Get all [Diff]s of a given variant:
@@ -804,56 +804,60 @@ let of_list ~rows ~maybe_polymorphic:mp ~builder =
     then
       (* All diffs are of the [Set_to] variant, so just pick the last one *)
       [%expr
-        function
-        | [] -> Optional_diff.none
-        | _ :: _ as l -> Optional_diff.return (Base.List.last_exn l)]
+        fun l ->
+          match l with
+          | [] -> Optional_diff.none
+          | _ :: _ -> Optional_diff.return (Base.List.last_exn l)]
     else
       [%expr
-        function
-        | [] -> Optional_diff.none
-        | [ hd ] -> Optional_diff.return hd
-        | l ->
-          (* Otherwise look at the last [Set_to] (if any) + any diffs after it *)
-          let diffs_rev, rest_rev =
-            Base.List.rev l
-            |> Base.List.split_while
-                 ~f:
-                   [%e
-                     let case row which return =
-                       case ~lhs:[%pat? [%p r row which any |> p]] ~rhs:return
-                     in
-                     pexp_function
-                       (List.map diff_rows ~f:(fun (row, _) -> case row Diff [%expr true])
-                        @ List.map set_rows ~f:(fun row -> case row Set [%expr false]))]
-          in
-          let diffs = Base.List.rev diffs_rev in
-          [%e
-            let any_row rows which =
-              List.map rows ~f:(fun row -> r row which any |> p)
-              |> List.reduce_exn ~f:ppat_or
+        fun l ->
+          match l with
+          | [] -> Optional_diff.none
+          | [ hd ] -> Optional_diff.return hd
+          | l ->
+            (* Otherwise look at the last [Set_to] (if any) + any diffs after it *)
+            let diffs_rev, rest_rev =
+              Base.List.rev l
+              |> Base.List.split_while
+                   ~f:
+                     [%e
+                       let case row which return =
+                         case ~lhs:[%pat? [%p r row which any |> p]] ~rhs:return
+                       in
+                       pexp_function
+                         (List.map diff_rows ~f:(fun (row, _) ->
+                            case row Diff [%expr true])
+                          @ List.map set_rows ~f:(fun row -> case row Set [%expr false]))]
             in
-            pexp_match
-              [%expr rest_rev, diffs]
-              ([ case ~lhs:[%pat? [], []] ~rhs:[%expr assert false] ]
-               @ (if List.is_empty diff_rows
-                  then []
-                  else
-                    [ case (* the first elt in [rest_rev] can't be a [Diff _]  *)
-                        ~lhs:[%pat? [%p any_row (List.map diff_rows ~f:fst) Diff] :: _, _]
-                        ~rhs:[%expr assert false]
-                    ])
-               @ (if List.is_empty set_rows
-                  then []
-                  else
-                    [ case (* [diffs] don't contain a [Set _]  *)
-                        ~lhs:[%pat? _, [%p any_row set_rows Set] :: _]
-                        ~rhs:[%expr assert false]
-                    ; case (* [Set _] followed by no diffs, just return the [Set _] *)
-                        ~lhs:[%pat? ([%p any_row set_rows Set] as t) :: _, []]
-                        ~rhs:[%expr Optional_diff.return t]
-                    ])
-               @ List.map diff_rows ~f:(fun (row, _) -> diffs_only_case row)
-               @ List.map set_rows ~f:set_followed_by_diffs_case)]]
+            let diffs = Base.List.rev diffs_rev in
+            [%e
+              let any_row rows which =
+                List.map rows ~f:(fun row -> r row which any |> p)
+                |> List.reduce_exn ~f:ppat_or
+              in
+              pexp_match
+                [%expr rest_rev, diffs]
+                ([ case ~lhs:[%pat? [], []] ~rhs:[%expr assert false] ]
+                 @ (if List.is_empty diff_rows
+                    then []
+                    else
+                      [ case (* the first elt in [rest_rev] can't be a [Diff _]  *)
+                          ~lhs:
+                            [%pat? [%p any_row (List.map diff_rows ~f:fst) Diff] :: _, _]
+                          ~rhs:[%expr assert false]
+                      ])
+                 @ (if List.is_empty set_rows
+                    then []
+                    else
+                      [ case (* [diffs] don't contain a [Set _]  *)
+                          ~lhs:[%pat? _, [%p any_row set_rows Set] :: _]
+                          ~rhs:[%expr assert false]
+                      ; case (* [Set _] followed by no diffs, just return the [Set _] *)
+                          ~lhs:[%pat? ([%p any_row set_rows Set] as t) :: _, []]
+                          ~rhs:[%expr Optional_diff.return t]
+                      ])
+                 @ List.map diff_rows ~f:(fun (row, _) -> diffs_only_case row)
+                 @ List.map set_rows ~f:set_followed_by_diffs_case)]]
   in
   let init =
     (* The diff_variant_name function is only used in error cases *)
diff --git a/src/ppx_diff.ml b/src/ppx_diff.ml
index d954476..8e3f4c7 100644
--- a/src/ppx_diff.ml
+++ b/src/ppx_diff.ml
@@ -67,6 +67,7 @@ let validate_rec_flag (td : How_to_diff.t Type_declaration.t) rec_flag ~builder
   | Recursive -> ()
   | Nonrecursive ->
     (match td.kind with
+     | Abstract -> ()
      | Type_kind.Core (Constr { type_name; module_ = None; _ }, _)
        when Type_name.( = ) type_name td.name -> ()
      | _ ->
@@ -118,13 +119,13 @@ let generator sig_or_struct ~f =
       +> What_to_derive.Extra.arg
       +> arg "stable_version" (Ast_pattern.eint __))
     (fun ~(loc : Location.t)
-         ~path:(_ : string)
-         ((rec_flag : rec_flag), (type_declarations : type_declaration list))
-         how
-         key
-         elt
-         extra_derive
-         stable_version ->
+      ~path:(_ : string)
+      ((rec_flag : rec_flag), (type_declarations : type_declaration list))
+      how
+      key
+      elt
+      extra_derive
+      stable_version ->
       let (builder : Builder.t) =
         Builder.create
           (module struct
diff --git a/src/type_kind.ml b/src/type_kind.ml
index fa971e7..cdfb85c 100644
--- a/src/type_kind.ml
+++ b/src/type_kind.ml
@@ -75,14 +75,11 @@ let rec core_to_ppx (core : unit core) ~builder =
 let label_declarations record_fields ~builder =
   let open (val builder : Builder.S) in
   List.map record_fields ~f:(fun { field_name; field_type; mutable_; global } ->
-    let declaration =
-      label_declaration
-        ~name:(Located.mk (Record_field_name.to_string field_name))
-        ~type_:(core_to_ppx field_type ~builder)
-        ~mutable_:(if mutable_ then Mutable else Immutable)
-    in
-    let modality = if global then Some Global else None in
-    modality, declaration)
+    label_declaration
+      ~name:(Located.mk (Record_field_name.to_string field_name))
+      ~type_:(core_to_ppx field_type ~builder)
+      ~mutable_:(if mutable_ then Mutable else Immutable)
+      ~modality:(if global then Some Global else None))
 ;;
 
 let to_ppx_kind t ~builder =
@@ -91,7 +88,7 @@ let to_ppx_kind t ~builder =
   | Abstract -> Ptype_abstract, None
   | Core core -> Ptype_abstract, Some (core_to_ppx core ~builder)
   | Record { fields; local = (_ : bool); equal_to } ->
-    ( ptype_record (label_declarations fields ~builder)
+    ( Ptype_record (label_declarations fields ~builder)
     , Option.map equal_to ~f:(core_to_ppx ~builder) )
   | Variant { rows; equal_to } ->
     ( Ptype_variant
@@ -102,11 +99,13 @@ let to_ppx_kind t ~builder =
              ~args:
                (match row_type with
                 | None -> Pcstr_tuple []
-                | Some (Single type_) -> Pcstr_tuple [ core_to_ppx type_ ~builder ]
+                | Some (Single type_) ->
+                  pcstr_tuple_no_modalities [ core_to_ppx type_ ~builder ]
                 | Some (Inlined_tuple l) ->
-                  Pcstr_tuple (List.map l ~f:(fun t -> core_to_ppx t ~builder))
+                  pcstr_tuple_no_modalities
+                    (List.map l ~f:(fun t -> core_to_ppx t ~builder))
                 | Some (Inlined_record fields) ->
-                  pcstr_record (label_declarations fields ~builder))))
+                  Pcstr_record (label_declarations fields ~builder))))
     , Option.map equal_to ~f:(core_to_ppx ~builder) )
 ;;
 
@@ -140,7 +139,7 @@ let fold_record_fields l ~init ~f =
         ; mutable_ = (_ : bool)
         ; global = (_ : bool)
         }
-        -> fold_core field_type ~init:acc ~f)
+      -> fold_core field_type ~init:acc ~f)
 ;;
 
 let fold t ~init ~f =
@@ -337,7 +336,7 @@ let create_record fields ~builder =
       | Some Global -> true
       | None -> false
     in
-    let { pld_name; pld_mutable; pld_type; pld_loc = _; pld_attributes = _ } = field in
+    let { pld_name; pld_mutable; pld_type; pld_loc = _; pld_attributes = _; _ } = field in
     let field_type =
       let kind, how_to_diff = create_core pld_type ~builder in
       let how_to_diff =
@@ -411,7 +410,8 @@ let of_ppx_kind
               let variant_type =
                 match pcd_args with
                 | Pcstr_tuple [] -> None
-                | Pcstr_tuple [ core_type ] ->
+                | Pcstr_tuple [ arg ] ->
+                  let core_type = Ppxlib_jane.Shim.Pcstr_tuple_arg.to_core_type arg in
                   let kind, core_how_to_diff = create_core core_type ~builder in
                   let how_to_diff =
                     Option.merge
@@ -423,9 +423,13 @@ let of_ppx_kind
                 | Pcstr_record record ->
                   error_if_custom_how_to_diff "inlined records";
                   Some (Inlined_record (create_record record ~builder))
-                | Pcstr_tuple types ->
+                | Pcstr_tuple args ->
                   error_if_custom_how_to_diff "inlined tuples";
-                  Some (Inlined_tuple (List.map types ~f:(create_core ~builder)))
+                  Some
+                    (Inlined_tuple
+                       (List.map args ~f:(fun arg ->
+                          Ppxlib_jane.Shim.Pcstr_tuple_arg.to_core_type arg
+                          |> create_core ~builder)))
               in
               Variant_row_name.of_string pcd_name.txt, variant_type)
         ; equal_to = Option.map equal_to ~f:(create_core ~builder)
