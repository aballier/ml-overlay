From f35fdf4bdcb82c308d70f7c9c313a77777f54bdf Mon Sep 17 00:00:00 2001
From: Patrick Ferris <patrick@sirref.org>
Date: Fri, 20 Jun 2025 12:21:20 +0100
Subject: [PATCH] Support ppxlib.0.36.0

---
 src/ppx/instrument.ml | 79 +++++++++++++++++++++++++------------------
 1 file changed, 46 insertions(+), 33 deletions(-)

diff --git a/src/ppx/instrument.ml b/src/ppx/instrument.ml
index 7a300336..bd727115 100644
--- a/src/ppx/instrument.ml
+++ b/src/ppx/instrument.ml
@@ -1314,38 +1314,32 @@ class instrumenter =
             instrument_expr ~use_loc_of:e ~post:true (Exp.assert_ e_new)
 
           (* Expressions that have subexpressions that might not get visited. *)
-          | Pexp_function cases ->
-            traverse_cases ~is_in_tail_position:true cases
-            >>| fun cases_new ->
-            let cases, _, _, need_binding = instrument_cases cases_new in
-            if need_binding then
-              Exp.fun_ ~loc ~attrs
-                Ppxlib.Nolabel None ([%pat? ___bisect_matched_value___])
-                (Exp.match_ ~loc
-                  ([%expr ___bisect_matched_value___]) cases)
-            else
-              Exp.function_ ~loc ~attrs cases
-
-          | Pexp_fun (label, default_value, p, e) ->
-            begin match default_value with
-            | None ->
-              return None
-            | Some e ->
-              traverse ~is_in_tail_position:false e
-              >>| fun e ->
-              Some (instrument_expr e)
-            end
-            >>= fun default_value ->
-            traverse ~is_in_tail_position:true e
-            >>| fun e ->
-            let e =
-              match e.pexp_desc with
-              | Pexp_function _ | Pexp_fun _ -> e
-              | Pexp_constraint (e', t) ->
-                {e with pexp_desc = Pexp_constraint (instrument_expr e', t)}
-              | _ -> instrument_expr e
+          | Pexp_function (params, constraint_, body) ->
+            let open Parsetree in
+            let new_params =
+              List.map (function
+                | { pparam_desc = Pparam_val (lbl, Some default_value, c); _ } as p ->
+                  traverse ~is_in_tail_position:false default_value
+                  >>| fun e -> { p with pparam_desc = Pparam_val (lbl, Some (instrument_expr e), c) }
+                | e -> return e
+                ) params
+            in
+            Ppxlib.With_errors.combine_errors new_params
+            >>= fun new_params ->
+
+            traverse_function_body ~is_in_tail_position:true body
+            >>| fun new_body ->
+            let new_body =
+              match new_body with
+              | Pfunction_body { pexp_desc = Pexp_function _; _ } -> new_body
+              | Pfunction_body { pexp_desc = Pexp_constraint (e', t); _ } ->
+                Pfunction_body {e with pexp_desc = Pexp_constraint (instrument_expr e', t)}
+              | Pfunction_body e -> Pfunction_body (instrument_expr e)
+              | Pfunction_cases _ as cases -> cases
             in
-            Exp.fun_ ~loc ~attrs label default_value p e
+
+            let e = Ast_builder.Default.pexp_function ~loc new_params constraint_ new_body in
+            { e with pexp_attributes = attrs }
 
           | Pexp_match (e, cases) ->
             traverse_cases ~is_in_tail_position cases
@@ -1418,7 +1412,7 @@ class instrumenter =
           | Pexp_lazy e ->
             let rec is_trivial_syntactic_value e =
               match e.Parsetree.pexp_desc with
-              | Pexp_function _ | Pexp_fun _ | Pexp_poly _ | Pexp_ident _
+              | Pexp_function _ | Pexp_poly _ | Pexp_ident _
               | Pexp_constant _ | Pexp_construct (_, None) ->
                 true
               | Pexp_constraint (e, _) | Pexp_coerce (e, _, _) ->
@@ -1446,7 +1440,7 @@ class instrumenter =
             >>| fun e ->
             let e =
               match e.pexp_desc with
-              | Pexp_function _ | Pexp_fun _ -> e
+              | Pexp_function _ -> e
               | _ -> instrument_expr e
             in
             Exp.poly ~loc ~attrs e t
@@ -1654,6 +1648,25 @@ class instrumenter =
         end
         |> collect_errors
 
+      and traverse_function_body ~is_in_tail_position body =
+        let open Ppxlib in
+        match body with
+        | Pfunction_body e ->
+          traverse ~is_in_tail_position e
+          >>| fun e -> Pfunction_body e
+        | Pfunction_cases (cases, loc, attrs) ->
+            traverse_cases ~is_in_tail_position:true cases
+            >>| fun cases_new ->
+            let cases, _, _, need_binding = instrument_cases cases_new in
+            if need_binding then
+              Pfunction_body
+              (Exp.fun_ ~loc ~attrs
+                Ppxlib.Nolabel None ([%pat? ___bisect_matched_value___])
+                (Exp.match_ ~loc
+                  ([%expr ___bisect_matched_value___]) cases))
+            else
+              Pfunction_cases (cases, loc, attrs)
+
       in
 
       traverse ~is_in_tail_position:false e
