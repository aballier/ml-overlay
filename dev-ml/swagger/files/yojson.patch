Index: ocaml-swagger-0.2.0/src/swagger.atd
===================================================================
--- ocaml-swagger-0.2.0.orig/src/swagger.atd
+++ ocaml-swagger-0.2.0/src/swagger.atd
@@ -1,4 +1,4 @@
-type json <ocaml module="Yojson.Safe"> = abstract
+type t <ocaml module="Yojson.Safe"> = abstract
 
 type contact =
   { ?name : string option
@@ -14,42 +14,42 @@ type license =
 type info =
   { title : string
   ; ?description : string option
-  ; ?terms_of_service <json name="termsOfService"> : string option
+  ; ?terms_of_service <t name="termsOfService"> : string option
   ; ?contact : contact option
   ; ?license : license option
   ; version : string
   }
 
 type scheme =
-  [ Http  <json name="http">
-  | Https <json name="https">
-  | Ws    <json name="ws">
-  | Wss   <json name="wss">
+  [ Http  <t name="http">
+  | Https <t name="https">
+  | Ws    <t name="ws">
+  | Wss   <t name="wss">
   ]
 
 type location =
-  [ Query    <json name="query">
-  | Header   <json name="header">
-  | Path     <json name="path">
-  | FormData <json name="formData">
-  | Body     <json name="body">
+  [ Query    <t name="query">
+  | Header   <t name="header">
+  | Path     <t name="path">
+  | FormData <t name="formData">
+  | Body     <t name="body">
   ]
 
 type kind =
-  [ String  <json name="string">
-  | Number  <json name="number">
-  | Integer <json name="integer">
-  | Boolean <json name="boolean">
-  | Array   <json name="array">
-  | File    <json name="file">
+  [ String  <t name="string">
+  | Number  <t name="number">
+  | Integer <t name="integer">
+  | Boolean <t name="boolean">
+  | Array   <t name="array">
+  | File    <t name="file">
   ]
 
 type collection_format =
-  [ Csv   <json name="csv">
-  | Ssv   <json name="ssv">
-  | Tsv   <json name="tsv">
-  | Pipes <json name="pipes">
-  | Multi <json name="multi">
+  [ Csv   <t name="csv">
+  | Ssv   <t name="ssv">
+  | Tsv   <t name="tsv">
+  | Pipes <t name="pipes">
+  | Multi <t name="multi">
   ]
 
 type xml =
@@ -61,31 +61,31 @@ type xml =
   }
 
 type items_kind =
-  [ String  <json name="string">
-  | Number  <json name="number">
-  | Integer <json name="integer">
-  | Boolean <json name="boolean">
-  | Array   <json name="array">
+  [ String  <t name="string">
+  | Number  <t name="number">
+  | Integer <t name="integer">
+  | Boolean <t name="boolean">
+  | Array   <t name="array">
   ]
 
 type items =
-  { kind <json name="type"> : items_kind
+  { kind <t name="type"> : items_kind
   ; ?format : string option
   ; ?items : items option
-  ; ~collection_format <json name="collectionFormat"> <ocaml default="`Csv"> : collection_format
-  ; ?default : json option
+  ; ~collection_format <t name="collectionFormat"> <ocaml default="`Csv"> : collection_format
+  ; ?default : t option
   ; ?maximum : int option
-  ; ?exclusive_maximum <json name="exclusiveMaximum"> : bool option
+  ; ?exclusive_maximum <t name="exclusiveMaximum"> : bool option
   ; ?minimum : int option
-  ; ?exclusive_minimum <json name="exclusiveMinimum"> : bool option
-  ; ?max_length <json name="maxLength"> : int option
-  ; ?min_length <json name="minLength"> : int option
+  ; ?exclusive_minimum <t name="exclusiveMinimum"> : bool option
+  ; ?max_length <t name="maxLength"> : int option
+  ; ?min_length <t name="minLength"> : int option
   ; ?pattern : string option
-  ; ?max_items <json name="maxItems"> : int option
-  ; ?min_items <json name="minItems"> : int option
-  ; ?unique_items <json name="uniqueItems"> : bool option
-  ; ?enum : json list option
-  ; ?multiple_of <json name="multipleOf"> : int option
+  ; ?max_items <t name="maxItems"> : int option
+  ; ?min_items <t name="minItems"> : int option
+  ; ?unique_items <t name="uniqueItems"> : bool option
+  ; ?enum : t list option
+  ; ?multiple_of <t name="multipleOf"> : int option
   }
 
 type external_documentation =
@@ -94,99 +94,99 @@ type external_documentation =
   }
 
 type schema_kind =
-  [ Boolean <json name="boolean">
-  | Object  <json name="object">
-  | Array   <json name="array">
-  | Number  <json name="number">
-  | String  <json name="string">
-  | Integer <json name="integer">
+  [ Boolean <t name="boolean">
+  | Object  <t name="object">
+  | Array   <t name="array">
+  | Number  <t name="number">
+  | String  <t name="string">
+  | Integer <t name="integer">
   ]
 
 type schema =
-  { ?ref <json name="$ref"> : reference option
+  { ?ref <t name="$ref"> : reference option
   ; ?format : string option
   ; ?title : string option
   ; ?description : string option
-  ; ?default : json option
-  ; ?multiple_of <json name="multipleOf"> : int option
+  ; ?default : t option
+  ; ?multiple_of <t name="multipleOf"> : int option
   ; ?maximum : int option
-  ; ?exclusive_maximum <json name="exclusiveMaximum"> : bool option
+  ; ?exclusive_maximum <t name="exclusiveMaximum"> : bool option
   ; ?minimum : int option
-  ; ?exclusive_minimum <json name="exclusiveMinimum"> : bool option
-  ; ?max_length <json name="maxLength"> : int option
-  ; ?min_length <json name="minLength"> : int option
+  ; ?exclusive_minimum <t name="exclusiveMinimum"> : bool option
+  ; ?max_length <t name="maxLength"> : int option
+  ; ?min_length <t name="minLength"> : int option
   ; ?pattern : string option
-  ; ?max_items <json name="maxItems"> : int option
-  ; ?min_items <json name="minItems"> : int option
-  ; ?unique_items <json name="uniqueItems"> : bool option
-  ; ?max_properties <json name="maxProperties"> : int option
-  ; ?min_properties <json name="minProperties"> : int option
+  ; ?max_items <t name="maxItems"> : int option
+  ; ?min_items <t name="minItems"> : int option
+  ; ?unique_items <t name="uniqueItems"> : bool option
+  ; ?max_properties <t name="maxProperties"> : int option
+  ; ?min_properties <t name="minProperties"> : int option
   ; ?required : string list option
-  ; ?enum : json list option
-  ; ?kind <json name="type"> : schema_kind option
+  ; ?enum : t list option
+  ; ?kind <t name="type"> : schema_kind option
   ; ?items : schema option
-  ; ?all_of <json name="allOf"> : json option
-  ; ?properties : (string * schema) list <json repr="object"> option
-  ; ?additional_properties <json name="additionalProperties"> : schema <json repr="object"> option
+  ; ?all_of <t name="allOf"> : t option
+  ; ?properties : (string * schema) list <t repr="object"> option
+  ; ?additional_properties <t name="additionalProperties"> : schema <t repr="object"> option
   ; ?discriminator : string option
-  ; ~read_only <json name="readOnly"> <ocaml default="false"> : bool
+  ; ~read_only <t name="readOnly"> <ocaml default="false"> : bool
   ; ?xml : xml option
   ; ?external_docs : external_documentation option
-  ; ?example : json option
+  ; ?example : t option
   }
 
 type parameter =
   { name : string
-  ; location <json name="in"> : location
+  ; location <t name="in"> : location
   ; ?description : string option
   ; ~required <ocaml default="false"> : bool
   ; ?schema : schema option
-  ; ?kind <json name="type"> : kind option
+  ; ?kind <t name="type"> : kind option
   ; ?format : string option
-  ; ~allow_empty_value <json name="allowEmptyValue"> <ocaml default="false"> : bool
+  ; ~allow_empty_value <t name="allowEmptyValue"> <ocaml default="false"> : bool
   ; ?items : items option
-  ; ~collection_format <json name="collectionFormat"> <ocaml default="`Csv"> : collection_format
-  ; ?default : json option
+  ; ~collection_format <t name="collectionFormat"> <ocaml default="`Csv"> : collection_format
+  ; ?default : t option
   ; ?maximum : int option
-  ; ?exclusive_maximum <json name="exclusiveMaximum"> : bool option
+  ; ?exclusive_maximum <t name="exclusiveMaximum"> : bool option
   ; ?minimum : int option
-  ; ?exclusive_minimum <json name="exclusiveMinimum"> : bool option
-  ; ?max_length <json name="maxLength"> : int option
-  ; ?min_length <json name="minLength"> : int option
+  ; ?exclusive_minimum <t name="exclusiveMinimum"> : bool option
+  ; ?max_length <t name="maxLength"> : int option
+  ; ?min_length <t name="minLength"> : int option
   ; ?pattern : string option
-  ; ?max_items <json name="maxItems"> : int option
-  ; ?min_items <json name="minItems"> : int option
-  ; ?unique_items <json name="uniqueItems"> : bool option
-  ; ?enum : json list option
-  ; ?multiple_of <json name="multipleOf"> : int option
+  ; ?max_items <t name="maxItems"> : int option
+  ; ?min_items <t name="minItems"> : int option
+  ; ?unique_items <t name="uniqueItems"> : bool option
+  ; ?enum : t list option
+  ; ?multiple_of <t name="multipleOf"> : int option
   }
 
-type parameters_definitions = (string * parameter) list <json repr="object">
+type parameters_definitions = (string * parameter) list <t repr="object">
 
 type header =
   { ?description : string option
-  ; kind <json name="type"> : kind
+  ; kind <t name="type"> : kind
   ; ?format : string option
   ; ?items : items option
-  ; ~collection_format <json name="collectionFormat"> <ocaml default="`Csv"> : collection_format
-  ; ?default : json option
+  ; ~collection_format <t name="collectionFormat"> <ocaml default="`Csv"> : collection_format
+  ; ?default : t option
   ; ?maximum : int option
-  ; ?exclusive_maximum <json name="exclusiveMaximum"> : bool option
+  ; ?exclusive_maximum <t name="exclusiveMaximum"> : bool option
   ; ?minimum : int option
-  ; ?exclusive_minimum <json name="exclusiveMinimum"> : bool option
-  ; ?max_length <json name="maxLength"> : int option
-  ; ?min_length <json name="minLength"> : int option
+  ; ?exclusive_minimum <t name="exclusiveMinimum"> : bool option
+  ; ?max_length <t name="maxLength"> : int option
+  ; ?min_length <t name="minLength"> : int option
   ; ?pattern : string option
-  ; ?max_items <json name="maxItems"> : int option
-  ; ?min_items <json name="minItems"> : int option
-  ; ?unique_items <json name="uniqueItems"> : bool option
-  ; ?enum : json list option
-  ; ?multiple_of <json name="multipleOf"> : int option
+  ; ?max_items <t name="maxItems"> : int option
+  ; ?min_items <t name="minItems"> : int option
+  ; ?unique_items <t name="uniqueItems"> : bool option
+  ; ?enum : t list option
+  ; ?multiple_of <t name="multipleOf"> : int option
   }
 
-type headers = (string * header) list <json repr="object">
+type headers = (string * header) list <t repr="object">
 
-type example = (string * json) list <json repr="object">
+type example = (string * t) list <t repr="object">
 
 type response =
   { description : string
@@ -195,21 +195,21 @@ type response =
   ; ?examples : example option
   }
 
-type responses_definitions = (string * response) list <json repr="object">
+type responses_definitions = (string * response) list <t repr="object">
 
 type reference = string <ocaml valid="Swagger_util.Validate.url"> 
 
-type responses = (string * json) list <json repr="object">
+type responses = (string * t) list <t repr="object">
 
 type operation =
   { ?tags : string list option
   ; ?summary : string option <ocaml valid="Swagger_util.Validate.length ~max:120">
   ; ?description : string option
-  ; ?external_docs <json name="externalDocs"> : external_documentation option
-  ; ?operation_id <json name="operationId"> : string option
+  ; ?external_docs <t name="externalDocs"> : external_documentation option
+  ; ?operation_id <t name="operationId"> : string option
   ; ?consumes : string list option (* validate mime? *)
   ; ?produces : string list option (* validate mime? *)
-  ; ?parameters : json list option
+  ; ?parameters : t list option
   ; responses : responses
   ; ?schemes : scheme list option
   ; ~deprecated <ocaml default="false"> : bool
@@ -225,62 +225,62 @@ type path_item =
   ; ?options : operation option
   ; ?head : operation option
   ; ?patch : operation option
-  ; ?parameters : json list option (* validate : uniqueness, only one body, required must be true if in is "path", schema only present if in is "body" *)
+  ; ?parameters : t list option (* validate : uniqueness, only one body, required must be true if in is "path", schema only present if in is "body" *)
   }
 
-type paths = (string <ocaml valid="Swagger_util.Validate.path"> * path_item) list <json repr="object">
+type paths = (string <ocaml valid="Swagger_util.Validate.path"> * path_item) list <t repr="object">
 
 type security_scheme_type =
-  [ Basic  <json name="basic">
-  | ApiKey <json name="apiKey">
-  | OAuth2 <json name="oauth2">
+  [ Basic  <t name="basic">
+  | ApiKey <t name="apiKey">
+  | OAuth2 <t name="oauth2">
   ]
 
 type security_scheme_location =
-  [ Query  <json name="query">
-  | Header <json name="header">
+  [ Query  <t name="query">
+  | Header <t name="header">
   ]
 
 type security_scheme_flow =
-  [ Implicit    <json name="implicit">
-  | Password    <json name="password">
-  | Application <json name="application">
-  | AccessCode  <json name="accessCode">
+  [ Implicit    <t name="implicit">
+  | Password    <t name="password">
+  | Application <t name="application">
+  | AccessCode  <t name="accessCode">
   ]
 
-type scopes = (string * string) list <json repr="object">
+type scopes = (string * string) list <t repr="object">
 
 (* The Swagger 2.0 spec says all fields in the Security Scheme Object are required, except
    "description". However, the Kubernetes spec includes neither flow, authorization, tokenUrl
    nor scopes. *)
 type security_scheme =
-  { kind <json name="type"> : security_scheme_type
+  { kind <t name="type"> : security_scheme_type
   ; ?description : string option
   ; name : string
-  ; location <json name="in"> : security_scheme_location
+  ; location <t name="in"> : security_scheme_location
   ; ?flow : security_scheme_flow option
-  ; ?authorization_url <json name="authorizationUrl"> : string option <ocaml valid="Swagger_util.Validate.url">
-  ; ?token_url <json name="tokenUrl"> : string option <ocaml valid="Swagger_util.Validate.url">
+  ; ?authorization_url <t name="authorizationUrl"> : string option <ocaml valid="Swagger_util.Validate.url">
+  ; ?token_url <t name="tokenUrl"> : string option <ocaml valid="Swagger_util.Validate.url">
   ; ?scopes : scopes option
   }
 
-type security_definitions = (string * security_scheme) list <json repr="object">
+type security_definitions = (string * security_scheme) list <t repr="object">
 
-type security_requirement = (string * string list) list <json repr="object">
+type security_requirement = (string * string list) list <t repr="object">
 
 type tag =
   { name : string
   ; ?description : string option
-  ; ?external_docs <json name="externalDocs"> : external_documentation option
+  ; ?external_docs <t name="externalDocs"> : external_documentation option
   }
 
-type definitions = (string * schema) list <json repr="object">
+type definitions = (string * schema) list <t repr="object">
 
 type swagger =
   { swagger : string <ocaml valid="Swagger_util.Validate.version">
   ; info : info
   ; ?host : string option <ocaml valid="Swagger_util.Validate.host"> 
-  ; ?base_path <json name="basePath"> : string option <ocaml valid="Swagger_util.Validate.base_path">
+  ; ?base_path <t name="basePath"> : string option <ocaml valid="Swagger_util.Validate.base_path">
   ; ?schemes : scheme list option
   ; ?consumes : string list option (* validate mime? *)
   ; ?produces : string list option (* validate mime? *)
@@ -288,8 +288,8 @@ type swagger =
   ; ?definitions : definitions option
   ; ?parameters : parameters_definitions option
   ; ?responses : responses_definitions option
-  ; ?security_definitions <json name="securityDefinitions"> : security_definitions option
+  ; ?security_definitions <t name="securityDefinitions"> : security_definitions option
   ; ?security : security_requirement list option
   ; ?tags : tag list option (* validate uniqueness *)
-  ; ?external_docs <json name="externalDocs"> : external_documentation option
+  ; ?external_docs <t name="externalDocs"> : external_documentation option
   }
